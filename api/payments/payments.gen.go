// Package payments provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package payments

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Defines values for BooleanOperatorOp.
const (
	BooleanOperatorOp BooleanOperatorOp = "!="

	BooleanOperatorOpEqualEqual BooleanOperatorOp = "=="
)

// Defines values for DateOperatorOp.
const (
	DateOperatorOp DateOperatorOp = "!="

	DateOperatorOp1 DateOperatorOp = ">"

	DateOperatorOp2 DateOperatorOp = ">="

	DateOperatorOp3 DateOperatorOp = "<"

	DateOperatorOp4 DateOperatorOp = "<="

	DateOperatorOpEqualEqual DateOperatorOp = "=="
)

// Defines values for FinancialInstrumentBooleanOperatorOp.
const (
	FinancialInstrumentBooleanOperatorOpAnd FinancialInstrumentBooleanOperatorOp = "and"

	FinancialInstrumentBooleanOperatorOpOr FinancialInstrumentBooleanOperatorOp = "or"
)

// Defines values for FinancialInstrumentDateOperatorField.
const (
	FinancialInstrumentDateOperatorFieldCreatedAt FinancialInstrumentDateOperatorField = "created_at"

	FinancialInstrumentDateOperatorFieldUpdatedAt FinancialInstrumentDateOperatorField = "updated_at"
)

// Defines values for FinancialInstrumentErrorCode.
const (
	FinancialInstrumentErrorCodeFinancialInstrumentVerificationFailed FinancialInstrumentErrorCode = "financial-instrument-verification-failed"

	FinancialInstrumentErrorCodeInvalidCountry FinancialInstrumentErrorCode = "invalid-country"

	FinancialInstrumentErrorCodeInvalidMonth FinancialInstrumentErrorCode = "invalid-month"

	FinancialInstrumentErrorCodeInvalidPhone FinancialInstrumentErrorCode = "invalid-phone"

	FinancialInstrumentErrorCodeInvalidRegion FinancialInstrumentErrorCode = "invalid-region"

	FinancialInstrumentErrorCodeInvalidYear FinancialInstrumentErrorCode = "invalid-year"

	FinancialInstrumentErrorCodeJwtTokenAlreadyUsed FinancialInstrumentErrorCode = "jwt-token-already-used"

	FinancialInstrumentErrorCodeMissingFinancialInstrument FinancialInstrumentErrorCode = "missing-financial-instrument"

	FinancialInstrumentErrorCodeTooManyFinancialInstruments FinancialInstrumentErrorCode = "too-many-financial-instruments"
)

// Defines values for FinancialInstrumentIdMemberOperatorOp.
const (
	FinancialInstrumentIdMemberOperatorOpIn FinancialInstrumentIdMemberOperatorOp = "in"

	FinancialInstrumentIdMemberOperatorOpNotIn FinancialInstrumentIdMemberOperatorOp = "not_in"
)

// Defines values for FinancialInstrumentIdOperatorField.
const (
	FinancialInstrumentIdOperatorFieldId FinancialInstrumentIdOperatorField = "id"
)

// Defines values for FinancialInstrumentIdValueOperatorOp.
const (
	FinancialInstrumentIdValueOperatorOp FinancialInstrumentIdValueOperatorOp = "!="

	FinancialInstrumentIdValueOperatorOpEqualEqual FinancialInstrumentIdValueOperatorOp = "=="
)

// Defines values for FinancialInstrumentIntegerOperatorField.
const (
	FinancialInstrumentIntegerOperatorFieldCardExpMonth FinancialInstrumentIntegerOperatorField = "card.exp_month"

	FinancialInstrumentIntegerOperatorFieldCardExpYear FinancialInstrumentIntegerOperatorField = "card.exp_year"
)

// Defines values for FinancialInstrumentNotOperatorOp.
const (
	FinancialInstrumentNotOperatorOpNot FinancialInstrumentNotOperatorOp = "not"
)

// Defines values for FinancialInstrumentSortingSpecField.
const (
	FinancialInstrumentSortingSpecFieldCardExpMonth FinancialInstrumentSortingSpecField = "card.exp_month"

	FinancialInstrumentSortingSpecFieldCardExpYear FinancialInstrumentSortingSpecField = "card.exp_year"

	FinancialInstrumentSortingSpecFieldCardName FinancialInstrumentSortingSpecField = "card.name"

	FinancialInstrumentSortingSpecFieldCreatedAt FinancialInstrumentSortingSpecField = "created_at"

	FinancialInstrumentSortingSpecFieldType FinancialInstrumentSortingSpecField = "type"

	FinancialInstrumentSortingSpecFieldUpdatedAt FinancialInstrumentSortingSpecField = "updated_at"
)

// Defines values for FinancialInstrumentStringOperatorField.
const (
	FinancialInstrumentStringOperatorFieldCardCvc FinancialInstrumentStringOperatorField = "card.cvc"

	FinancialInstrumentStringOperatorFieldCardName FinancialInstrumentStringOperatorField = "card.name"

	FinancialInstrumentStringOperatorFieldCardNumber FinancialInstrumentStringOperatorField = "card.number"

	FinancialInstrumentStringOperatorFieldPspTokenPsp FinancialInstrumentStringOperatorField = "psp_token.psp"

	FinancialInstrumentStringOperatorFieldPspTokenValue FinancialInstrumentStringOperatorField = "psp_token.value"
)

// Defines values for FinancialInstrumentTypeMemberOperatorOp.
const (
	FinancialInstrumentTypeMemberOperatorOpIn FinancialInstrumentTypeMemberOperatorOp = "in"

	FinancialInstrumentTypeMemberOperatorOpNotIn FinancialInstrumentTypeMemberOperatorOp = "not_in"
)

// Defines values for FinancialInstrumentTypeMemberOperatorValues.
const (
	FinancialInstrumentTypeMemberOperatorValuesCard FinancialInstrumentTypeMemberOperatorValues = "card"

	FinancialInstrumentTypeMemberOperatorValuesPspToken FinancialInstrumentTypeMemberOperatorValues = "psp_token"
)

// Defines values for FinancialInstrumentTypeOperatorField.
const (
	FinancialInstrumentTypeOperatorFieldType FinancialInstrumentTypeOperatorField = "type"
)

// Defines values for FinancialInstrumentTypeValueOperatorOp.
const (
	FinancialInstrumentTypeValueOperatorOp FinancialInstrumentTypeValueOperatorOp = "!="

	FinancialInstrumentTypeValueOperatorOpEqualEqual FinancialInstrumentTypeValueOperatorOp = "=="
)

// Defines values for FinancialInstrumentTypeValueOperatorValue.
const (
	FinancialInstrumentTypeValueOperatorValueCard FinancialInstrumentTypeValueOperatorValue = "card"

	FinancialInstrumentTypeValueOperatorValuePspToken FinancialInstrumentTypeValueOperatorValue = "psp_token"
)

// Defines values for GatewayBooleanFieldOperatorField.
const (
	GatewayBooleanFieldOperatorFieldDefaultGateway GatewayBooleanFieldOperatorField = "default_gateway"
)

// Defines values for GatewayBooleanOperatorOp.
const (
	GatewayBooleanOperatorOpAnd GatewayBooleanOperatorOp = "and"

	GatewayBooleanOperatorOpOr GatewayBooleanOperatorOp = "or"
)

// Defines values for GatewayErrorCode.
const (
	GatewayErrorCodeDefaultGatewayDeletingConflict GatewayErrorCode = "default-gateway-deleting-conflict"

	GatewayErrorCodeDefaultGatewayUnsetConflict GatewayErrorCode = "default-gateway-unset-conflict"

	GatewayErrorCodeDuplicateGatewayId GatewayErrorCode = "duplicate-gateway-id"

	GatewayErrorCodeInvalidPspType GatewayErrorCode = "invalid-psp-type"

	GatewayErrorCodeRuleDependencyDeletingConflict GatewayErrorCode = "rule-dependency-deleting-conflict"
)

// Defines values for GatewayJSONOperatorField.
const (
	GatewayJSONOperatorFieldConfig GatewayJSONOperatorField = "config"
)

// Defines values for GatewayNotOperatorOp.
const (
	GatewayNotOperatorOpNot GatewayNotOperatorOp = "not"
)

// Defines values for GatewaySortingSpecField.
const (
	GatewaySortingSpecFieldCreatedAt GatewaySortingSpecField = "created_at"

	GatewaySortingSpecFieldDefaultCurrency GatewaySortingSpecField = "default_currency"

	GatewaySortingSpecFieldDefaultGateway GatewaySortingSpecField = "default_gateway"

	GatewaySortingSpecFieldId GatewaySortingSpecField = "id"

	GatewaySortingSpecFieldType GatewaySortingSpecField = "type"

	GatewaySortingSpecFieldUpdatedAt GatewaySortingSpecField = "updated_at"
)

// Defines values for GatewayStringOperatorField.
const (
	GatewayStringOperatorFieldDefaultCurrency GatewayStringOperatorField = "default_currency"

	GatewayStringOperatorFieldId GatewayStringOperatorField = "id"
)

// Defines values for GatewayTypeMemberOperatorOp.
const (
	GatewayTypeMemberOperatorOpIn GatewayTypeMemberOperatorOp = "in"

	GatewayTypeMemberOperatorOpNotIn GatewayTypeMemberOperatorOp = "not_in"
)

// Defines values for GatewayTypeOperatorField.
const (
	GatewayTypeOperatorFieldType GatewayTypeOperatorField = "type"
)

// Defines values for GatewayTypeValueOperatorOp.
const (
	GatewayTypeValueOperatorOp GatewayTypeValueOperatorOp = "!="

	GatewayTypeValueOperatorOpEqualEqual GatewayTypeValueOperatorOp = "=="
)

// Defines values for GeneralErrorCode.
const (
	GeneralErrorCodeDefaultGatewayRequired GeneralErrorCode = "default-gateway-required"

	GeneralErrorCodeInternalServerError GeneralErrorCode = "internal-server-error"

	GeneralErrorCodeInvalidIdFormat GeneralErrorCode = "invalid-id-format"

	GeneralErrorCodeInvalidPayload GeneralErrorCode = "invalid-payload"

	GeneralErrorCodeMissing GeneralErrorCode = "missing"

	GeneralErrorCodeNotFound GeneralErrorCode = "not-found"

	GeneralErrorCodeOperationNotSupportedByGateway GeneralErrorCode = "operation-not-supported-by-gateway"

	GeneralErrorCodeTenantNotFound GeneralErrorCode = "tenant-not-found"
)

// Defines values for IntegerOperatorOp.
const (
	IntegerOperatorOp IntegerOperatorOp = "!="

	IntegerOperatorOp1 IntegerOperatorOp = ">"

	IntegerOperatorOp2 IntegerOperatorOp = ">="

	IntegerOperatorOp3 IntegerOperatorOp = "<"

	IntegerOperatorOp4 IntegerOperatorOp = "<="

	IntegerOperatorOpEqualEqual IntegerOperatorOp = "=="
)

// Defines values for JSONValueOperatorOp.
const (
	JSONValueOperatorOp JSONValueOperatorOp = "!="

	JSONValueOperatorOp1 JSONValueOperatorOp = ">"

	JSONValueOperatorOp2 JSONValueOperatorOp = ">="

	JSONValueOperatorOp3 JSONValueOperatorOp = "<"

	JSONValueOperatorOp4 JSONValueOperatorOp = "<="

	JSONValueOperatorOpEqualEqual JSONValueOperatorOp = "=="

	JSONValueOperatorOpIlike JSONValueOperatorOp = "ilike"

	JSONValueOperatorOpIs JSONValueOperatorOp = "is"

	JSONValueOperatorOpIsNot JSONValueOperatorOp = "is_not"

	JSONValueOperatorOpLike JSONValueOperatorOp = "like"
)

// Defines values for OrderErrorCode.
const (
	OrderErrorCodeAmountNegativeOrZero OrderErrorCode = "amount-negative-or-zero"

	OrderErrorCodeDiscountNegativeOrZero OrderErrorCode = "discount-negative-or-zero"

	OrderErrorCodeInvalidCancelUrl OrderErrorCode = "invalid-cancel-url"

	OrderErrorCodeInvalidCurrency OrderErrorCode = "invalid-currency"

	OrderErrorCodeInvalidErrorUrl OrderErrorCode = "invalid-error-url"

	OrderErrorCodeInvalidFinancialInstrumentTypes OrderErrorCode = "invalid-financial-instrument-types"

	OrderErrorCodeInvalidSuccessUrl OrderErrorCode = "invalid-success-url"

	OrderErrorCodePriceNegativeOrZero OrderErrorCode = "price-negative-or-zero"

	OrderErrorCodeQuantityNegativeOrZero OrderErrorCode = "quantity-negative-or-zero"
)

// Defines values for PaymentCardDetailsBrand.
const (
	PaymentCardDetailsBrandAmericanExpress PaymentCardDetailsBrand = "AmericanExpress"

	PaymentCardDetailsBrandDinersClub PaymentCardDetailsBrand = "DinersClub"

	PaymentCardDetailsBrandDiscover PaymentCardDetailsBrand = "Discover"

	PaymentCardDetailsBrandJCB PaymentCardDetailsBrand = "JCB"

	PaymentCardDetailsBrandMasterCard PaymentCardDetailsBrand = "MasterCard"

	PaymentCardDetailsBrandUnionPay PaymentCardDetailsBrand = "UnionPay"

	PaymentCardDetailsBrandUnknown PaymentCardDetailsBrand = "Unknown"

	PaymentCardDetailsBrandVisa PaymentCardDetailsBrand = "Visa"
)

// Defines values for RuleAction.
const (
	RuleActionBlock RuleAction = "block"

	RuleActionRetry RuleAction = "retry"

	RuleActionRoute RuleAction = "route"
)

// Defines values for RuleActionMemberOperatorOp.
const (
	RuleActionMemberOperatorOpIn RuleActionMemberOperatorOp = "in"

	RuleActionMemberOperatorOpNotIn RuleActionMemberOperatorOp = "not_in"
)

// Defines values for RuleActionMemberOperatorValues.
const (
	RuleActionMemberOperatorValuesBlock RuleActionMemberOperatorValues = "block"

	RuleActionMemberOperatorValuesRetry RuleActionMemberOperatorValues = "retry"

	RuleActionMemberOperatorValuesRoute RuleActionMemberOperatorValues = "route"
)

// Defines values for RuleActionOperatorField.
const (
	RuleActionOperatorFieldType RuleActionOperatorField = "type"
)

// Defines values for RuleActionValueOperatorOp.
const (
	RuleActionValueOperatorOp RuleActionValueOperatorOp = "!="

	RuleActionValueOperatorOpEqualEqual RuleActionValueOperatorOp = "=="
)

// Defines values for RuleActionValueOperatorValue.
const (
	RuleActionValueOperatorValueBlock RuleActionValueOperatorValue = "block"

	RuleActionValueOperatorValueRetry RuleActionValueOperatorValue = "retry"

	RuleActionValueOperatorValueRoute RuleActionValueOperatorValue = "route"
)

// Defines values for RuleBooleanOperatorOp.
const (
	RuleBooleanOperatorOpAnd RuleBooleanOperatorOp = "and"

	RuleBooleanOperatorOpOr RuleBooleanOperatorOp = "or"
)

// Defines values for RuleCreateAction.
const (
	RuleCreateActionBlock RuleCreateAction = "block"

	RuleCreateActionRetry RuleCreateAction = "retry"

	RuleCreateActionRoute RuleCreateAction = "route"
)

// Defines values for RuleDateOperatorField.
const (
	RuleDateOperatorFieldCreatedAt RuleDateOperatorField = "created_at"

	RuleDateOperatorFieldUpdatedAt RuleDateOperatorField = "updated_at"
)

// Defines values for RuleErrorCode.
const (
	RuleErrorCodeInvalidCriteria RuleErrorCode = "invalid-criteria"

	RuleErrorCodeInvalidRouteAction RuleErrorCode = "invalid-route-action"
)

// Defines values for RuleIdMemberOperatorOp.
const (
	RuleIdMemberOperatorOpIn RuleIdMemberOperatorOp = "in"

	RuleIdMemberOperatorOpNotIn RuleIdMemberOperatorOp = "not_in"
)

// Defines values for RuleIdOperatorField.
const (
	RuleIdOperatorFieldId RuleIdOperatorField = "id"
)

// Defines values for RuleIdValueOperatorOp.
const (
	RuleIdValueOperatorOp RuleIdValueOperatorOp = "!="

	RuleIdValueOperatorOpEqualEqual RuleIdValueOperatorOp = "=="
)

// Defines values for RuleIntegerOperatorField.
const (
	RuleIntegerOperatorFieldActiveRevision RuleIntegerOperatorField = "active_revision"

	RuleIntegerOperatorFieldOrdinal RuleIntegerOperatorField = "ordinal"
)

// Defines values for RuleNotOperatorOp.
const (
	RuleNotOperatorOpNot RuleNotOperatorOp = "not"
)

// Defines values for RuleSortingSpecField.
const (
	RuleSortingSpecFieldActiveRevision RuleSortingSpecField = "active_revision"

	RuleSortingSpecFieldCreatedAt RuleSortingSpecField = "created_at"

	RuleSortingSpecFieldOrdinal RuleSortingSpecField = "ordinal"

	RuleSortingSpecFieldUpdatedAt RuleSortingSpecField = "updated_at"
)

// Defines values for RuleStringOperatorField.
const (
	RuleStringOperatorFieldCriteria RuleStringOperatorField = "criteria"

	RuleStringOperatorFieldDescription RuleStringOperatorField = "description"

	RuleStringOperatorFieldRouteToGateway RuleStringOperatorField = "route_to_gateway"
)

// Defines values for RuleUpdateAction.
const (
	RuleUpdateActionBlock RuleUpdateAction = "block"

	RuleUpdateActionRetry RuleUpdateAction = "retry"

	RuleUpdateActionRoute RuleUpdateAction = "route"
)

// Defines values for SortingSpecDirection.
const (
	SortingSpecDirectionAsc SortingSpecDirection = "asc"

	SortingSpecDirectionDesc SortingSpecDirection = "desc"
)

// Defines values for StringMemberOperatorOp.
const (
	StringMemberOperatorOpIn StringMemberOperatorOp = "in"

	StringMemberOperatorOpNotIn StringMemberOperatorOp = "not_in"
)

// Defines values for StringValueOperatorOp.
const (
	StringValueOperatorOp StringValueOperatorOp = "!="

	StringValueOperatorOpEqualEqual StringValueOperatorOp = "=="

	StringValueOperatorOpIlike StringValueOperatorOp = "ilike"

	StringValueOperatorOpLike StringValueOperatorOp = "like"
)

// Defines values for ThreeDSAuthenticationState.
const (
	ThreeDSAuthenticationStateChallenge ThreeDSAuthenticationState = "challenge"

	ThreeDSAuthenticationStateDeviceFingerprint ThreeDSAuthenticationState = "device_fingerprint"

	ThreeDSAuthenticationStateFailed ThreeDSAuthenticationState = "failed"

	ThreeDSAuthenticationStateSuccessful ThreeDSAuthenticationState = "successful"
)

// Defines values for ThreeDSProviderType.
const (
	ThreeDSProviderTypeAdyen ThreeDSProviderType = "adyen"

	ThreeDSProviderTypeN3dsecure ThreeDSProviderType = "3dsecure"

	ThreeDSProviderTypePaay ThreeDSProviderType = "paay"
)

// Defines values for TransferState.
const (
	TransferStateCanceled TransferState = "canceled"

	TransferStateFailed TransferState = "failed"

	TransferStatePending TransferState = "pending"

	TransferStateSuccessful TransferState = "successful"
)

// Defines values for TransferType.
const (
	TransferTypeCredit TransferType = "credit"

	TransferTypeDebit TransferType = "debit"

	TransferTypeReversal TransferType = "reversal"
)

// Defines values for TransferBooleanOperatorOp.
const (
	TransferBooleanOperatorOpAnd TransferBooleanOperatorOp = "and"

	TransferBooleanOperatorOpOr TransferBooleanOperatorOp = "or"
)

// Defines values for TransferCreateBaseAction.
const (
	TransferCreateBaseActionAuthorize TransferCreateBaseAction = "authorize"

	TransferCreateBaseActionCapture TransferCreateBaseAction = "capture"

	TransferCreateBaseActionPayout TransferCreateBaseAction = "payout"
)

// Defines values for TransferDateOperatorField.
const (
	TransferDateOperatorFieldCreatedAt TransferDateOperatorField = "created_at"

	TransferDateOperatorFieldUpdatedAt TransferDateOperatorField = "updated_at"
)

// Defines values for TransferErrorCode.
const (
	TransferErrorCodeBlockedByRule TransferErrorCode = "blocked-by-rule"

	TransferErrorCodeCurrencyConflictsDuringRetryAttempts TransferErrorCode = "currency-conflicts-during-retry-attempts"

	TransferErrorCodeFinancialInstrumentNotFound TransferErrorCode = "financial-instrument-not-found"

	TransferErrorCodeGatewayNotFound TransferErrorCode = "gateway-not-found"

	TransferErrorCodeInsufficientTransferAmount TransferErrorCode = "insufficient-transfer-amount"

	TransferErrorCodeInvalidAmount TransferErrorCode = "invalid-amount"

	TransferErrorCodeInvalidTransferState TransferErrorCode = "invalid-transfer-state"

	TransferErrorCodeInvalidTransferType TransferErrorCode = "invalid-transfer-type"

	TransferErrorCodeJwtTokenAlreadyUsed TransferErrorCode = "jwt-token-already-used"

	TransferErrorCodeMissingJwtToken TransferErrorCode = "missing-jwt-token"

	TransferErrorCodeOrderNotFound TransferErrorCode = "order-not-found"
)

// Defines values for TransferFinancialInstrumentIdOperatorField.
const (
	TransferFinancialInstrumentIdOperatorFieldDestination TransferFinancialInstrumentIdOperatorField = "destination"

	TransferFinancialInstrumentIdOperatorFieldSource TransferFinancialInstrumentIdOperatorField = "source"
)

// Defines values for TransferGatewayResponseState.
const (
	TransferGatewayResponseStateError TransferGatewayResponseState = "error"

	TransferGatewayResponseStateFailed TransferGatewayResponseState = "failed"

	TransferGatewayResponseStateSuccessful TransferGatewayResponseState = "successful"

	TransferGatewayResponseStateTimeout TransferGatewayResponseState = "timeout"
)

// Defines values for TransferIdMemberOperatorOp.
const (
	TransferIdMemberOperatorOpIn TransferIdMemberOperatorOp = "in"

	TransferIdMemberOperatorOpNotIn TransferIdMemberOperatorOp = "not_in"
)

// Defines values for TransferIdOperatorField.
const (
	TransferIdOperatorFieldId TransferIdOperatorField = "id"
)

// Defines values for TransferIdValueOperatorOp.
const (
	TransferIdValueOperatorOp TransferIdValueOperatorOp = "!="

	TransferIdValueOperatorOpEqualEqual TransferIdValueOperatorOp = "=="
)

// Defines values for TransferIntegerOperatorField.
const (
	TransferIntegerOperatorFieldAmount TransferIntegerOperatorField = "amount"

	TransferIntegerOperatorFieldAmountCaptured TransferIntegerOperatorField = "amount_captured"

	TransferIntegerOperatorFieldAmountReversed TransferIntegerOperatorField = "amount_reversed"
)

// Defines values for TransferJSONOperatorField.
const (
	TransferJSONOperatorFieldGatewayResponse TransferJSONOperatorField = "gateway_response"
)

// Defines values for TransferNotOperatorOp.
const (
	TransferNotOperatorOpNot TransferNotOperatorOp = "not"
)

// Defines values for TransferSortingSpecField.
const (
	TransferSortingSpecFieldAmount TransferSortingSpecField = "amount"

	TransferSortingSpecFieldAmountCaptured TransferSortingSpecField = "amount_captured"

	TransferSortingSpecFieldAmountReversed TransferSortingSpecField = "amount_reversed"

	TransferSortingSpecFieldCreatedAt TransferSortingSpecField = "created_at"

	TransferSortingSpecFieldCurrency TransferSortingSpecField = "currency"

	TransferSortingSpecFieldUpdatedAt TransferSortingSpecField = "updated_at"
)

// Defines values for TransferStateMemberOperatorOp.
const (
	TransferStateMemberOperatorOpIn TransferStateMemberOperatorOp = "in"

	TransferStateMemberOperatorOpNotIn TransferStateMemberOperatorOp = "not_in"
)

// Defines values for TransferStateMemberOperatorValues.
const (
	TransferStateMemberOperatorValuesCanceled TransferStateMemberOperatorValues = "canceled"

	TransferStateMemberOperatorValuesFailed TransferStateMemberOperatorValues = "failed"

	TransferStateMemberOperatorValuesPending TransferStateMemberOperatorValues = "pending"

	TransferStateMemberOperatorValuesSuccessful TransferStateMemberOperatorValues = "successful"
)

// Defines values for TransferStateOperatorField.
const (
	TransferStateOperatorFieldState TransferStateOperatorField = "state"
)

// Defines values for TransferStateValueOperatorOp.
const (
	TransferStateValueOperatorOp TransferStateValueOperatorOp = "!="

	TransferStateValueOperatorOpEqualEqual TransferStateValueOperatorOp = "=="
)

// Defines values for TransferStateValueOperatorValue.
const (
	TransferStateValueOperatorValueCanceled TransferStateValueOperatorValue = "canceled"

	TransferStateValueOperatorValueFailed TransferStateValueOperatorValue = "failed"

	TransferStateValueOperatorValuePending TransferStateValueOperatorValue = "pending"

	TransferStateValueOperatorValueSuccessful TransferStateValueOperatorValue = "successful"
)

// Defines values for TransferStringOperatorField.
const (
	TransferStringOperatorFieldCurrency TransferStringOperatorField = "currency"

	TransferStringOperatorFieldGateway TransferStringOperatorField = "gateway"
)

// Defines values for TransferTypeMemberOperatorOp.
const (
	TransferTypeMemberOperatorOpIn TransferTypeMemberOperatorOp = "in"

	TransferTypeMemberOperatorOpNotIn TransferTypeMemberOperatorOp = "not_in"
)

// Defines values for TransferTypeMemberOperatorValues.
const (
	TransferTypeMemberOperatorValuesCredit TransferTypeMemberOperatorValues = "credit"

	TransferTypeMemberOperatorValuesDebit TransferTypeMemberOperatorValues = "debit"

	TransferTypeMemberOperatorValuesReversal TransferTypeMemberOperatorValues = "reversal"

	TransferTypeMemberOperatorValuesVerification TransferTypeMemberOperatorValues = "verification"
)

// Defines values for TransferTypeOperatorField.
const (
	TransferTypeOperatorFieldType TransferTypeOperatorField = "type"
)

// Defines values for TransferTypeValueOperatorOp.
const (
	TransferTypeValueOperatorOp TransferTypeValueOperatorOp = "!="

	TransferTypeValueOperatorOpEqualEqual TransferTypeValueOperatorOp = "=="
)

// Defines values for TransferTypeValueOperatorValue.
const (
	TransferTypeValueOperatorValueCredit TransferTypeValueOperatorValue = "credit"

	TransferTypeValueOperatorValueDebit TransferTypeValueOperatorValue = "debit"

	TransferTypeValueOperatorValueReversal TransferTypeValueOperatorValue = "reversal"

	TransferTypeValueOperatorValueVerification TransferTypeValueOperatorValue = "verification"
)

// Defines values for TransferUpdateAction.
const (
	TransferUpdateActionCancel TransferUpdateAction = "cancel"

	TransferUpdateActionCapture TransferUpdateAction = "capture"
)

// Defines values for VerificationTransferState.
const (
	VerificationTransferStateFailed VerificationTransferState = "failed"

	VerificationTransferStateSuccessful VerificationTransferState = "successful"
)

// Defines values for VerificationTransferType.
const (
	VerificationTransferTypeVerification VerificationTransferType = "verification"
)

// Address Verification Service result if available. The combination of `code` and `message` could be one of
//
// - A : Street address matches, but postal code does not match.
// - B : Street address matches, but postal code not verified.
// - C : Street address and postal code do not match.
// - D : Street address and postal code match.
// - E : AVS data is invalid or AVS is not allowed for this card type.
// - F : Card member's name does not match, but billing postal code matches.
// - G : Non-U.S. issuing bank does not support AVS.
// - H : Card member's name does not match. Street address and postal code match.
// - I : Address not verified.
// - J : Card member's name, billing address, and postal code match. Shipping information verified and chargeback protection guaranteed through the Fraud Protection Program.
// - K : Card member's name matches but billing address and billing postal code do not match.
// - L : Card member's name and billing postal code match, but billing address does not match.
// - M : Street address and postal code match.
// - N : Street address and postal code do not match. For American Express: Card member's name, street address and postal code do not match.
// - O : Card member's name and billing address match, but billing postal code does not match.
// - P : Postal code matches, but street address not verified.
// - Q : Card member's name, billing address, and postal code match. Shipping information verified but chargeback protection not guaranteed.
// - R : System unavailable.
// - S : U.S.-issuing bank does not support AVS.
// - T : Card member's name does not match, but street address matches.
// - U : Address information unavailable.
// - V : Card member's name, billing address, and billing postal code match.
// - W : Street address does not match, but 9-digit postal code matches.
// - X : Street address and 9-digit postal code match.
// - Y : Street address and 5-digit postal code match.
// - Z : Street address does not match, but 5-digit postal code matches.
//
// Please notice, some PSP may return different `code` and `message` values not listed above
type AVSResult struct {
	// Code of AVS result
	Code *string `json:"code"`

	// Message of AVS result
	Message *string `json:"message"`

	// Postal code match of AVS result
	PostalMatch *string `json:"postal_match"`

	// Street match of AVS result
	StreetMatch *string `json:"street_match"`
}

// Amount intended to be collected by this payment. A positive integer representing how much to
// charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100,
// a zero-decimal currency).
type Amount int

// ApiError defines model for ApiError.
type ApiError struct {
	Errors []GeneralError `json:"errors"`

	// A unique identifier of the failed request.
	TraceId *string `json:"trace_id,omitempty"`
}

// BooleanOperator defines model for BooleanOperator.
type BooleanOperator struct {
	Op    BooleanOperatorOp `json:"op"`
	Value bool              `json:"value"`
}

// BooleanOperatorOp defines model for BooleanOperator.Op.
type BooleanOperatorOp string

// The information of browser collected for 3DS authentication
type BrowserInfo struct {
	// Color depth of screen
	ColorDepth string `json:"color_depth"`

	// Is Java enabled or not for the browser
	JavaEnabled bool `json:"java_enabled"`

	// The language of the browser
	Language string `json:"language"`

	// Height of screen
	ScreenHeight string `json:"screen_height"`

	// Width of screen
	ScreenWidth string `json:"screen_width"`

	// Color depth of screen
	Timezone string `json:"timezone"`

	// User-Agent of browser
	UserAgent string `json:"user_agent"`
}

// DateOperator defines model for DateOperator.
type DateOperator struct {
	Op DateOperatorOp `json:"op"`

	// Filtering time value, in UTC.
	Value time.Time `json:"value"`
}

// DateOperatorOp defines model for DateOperator.Op.
type DateOperatorOp string

// An error object
type Error struct {
	// Explanation of what exactly went wrong.
	Detail *string `json:"detail,omitempty"`
}

// FinancialInstrument defines model for FinancialInstrument.
type FinancialInstrument struct {
	Data interface{} `json:"data"`
}

// FinancialInstrumentApiErrors defines model for FinancialInstrumentApiErrors.
type FinancialInstrumentApiErrors struct {
	Errors []interface{} `json:"errors"`

	// A unique identifier of the failed request.
	TraceId *string `json:"trace_id,omitempty"`
}

// FinancialInstrumentBooleanOperator defines model for FinancialInstrumentBooleanOperator.
type FinancialInstrumentBooleanOperator struct {
	Op     FinancialInstrumentBooleanOperatorOp `json:"op"`
	Values []map[string]interface{}             `json:"values"`
}

// FinancialInstrumentBooleanOperatorOp defines model for FinancialInstrumentBooleanOperator.Op.
type FinancialInstrumentBooleanOperatorOp string

// FinancialInstrumentDateOperator defines model for FinancialInstrumentDateOperator.
type FinancialInstrumentDateOperator struct {
	// Embedded struct due to allOf(#/components/schemas/DateOperator)
	DateOperator `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field FinancialInstrumentDateOperatorField `json:"field"`
}

// FinancialInstrumentDateOperatorField defines model for FinancialInstrumentDateOperator.Field.
type FinancialInstrumentDateOperatorField string

// FinancialInstrumentError defines model for FinancialInstrumentError.
type FinancialInstrumentError struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Application-specific error code:
	//   * `invalid-region` - Specified region is not a valid ISO 3166-2 subdivision
	//   * `invalid-country` - Specified country is not a valid ISO 3166-1 alpha-2 code
	//   * `invalid-phone` - Invalid phone number according to E.164
	//   * `invalid-month` - Invalid month, should be between 1 and 12
	//   * `invalid-year` - Should be some year in a future
	//   * `missing-financial-instrument` - Financial instrument was not present in the payload
	//   * `too-many-financial-instruments` - Only one instrument in payload is allowed
	//   * `financial-instrument-verification-failed` - Financial instrument verification failed
	//   * `jwt-token-already-used` - JWT token has been already used
	Code *FinancialInstrumentErrorCode `json:"code,omitempty"`
}

// Application-specific error code:
//   * `invalid-region` - Specified region is not a valid ISO 3166-2 subdivision
//   * `invalid-country` - Specified country is not a valid ISO 3166-1 alpha-2 code
//   * `invalid-phone` - Invalid phone number according to E.164
//   * `invalid-month` - Invalid month, should be between 1 and 12
//   * `invalid-year` - Should be some year in a future
//   * `missing-financial-instrument` - Financial instrument was not present in the payload
//   * `too-many-financial-instruments` - Only one instrument in payload is allowed
//   * `financial-instrument-verification-failed` - Financial instrument verification failed
//   * `jwt-token-already-used` - JWT token has been already used
type FinancialInstrumentErrorCode string

// FinancialInstrumentFilter defines model for FinancialInstrumentFilter.
type FinancialInstrumentFilter []FinancialInstrumentFilteringOperator

// FinancialInstrumentFilteringOperator defines model for FinancialInstrumentFilteringOperator.
type FinancialInstrumentFilteringOperator interface{}

// FinancialInstrumentIdMemberOperator defines model for FinancialInstrumentIdMemberOperator.
type FinancialInstrumentIdMemberOperator struct {
	Op     FinancialInstrumentIdMemberOperatorOp `json:"op"`
	Values []string                              `json:"values"`
}

// FinancialInstrumentIdMemberOperatorOp defines model for FinancialInstrumentIdMemberOperator.Op.
type FinancialInstrumentIdMemberOperatorOp string

// FinancialInstrumentIdOperator defines model for FinancialInstrumentIdOperator.
type FinancialInstrumentIdOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field FinancialInstrumentIdOperatorField `json:"field"`
}

// FinancialInstrumentIdOperatorField defines model for FinancialInstrumentIdOperator.Field.
type FinancialInstrumentIdOperatorField string

// FinancialInstrumentIdValueOperator defines model for FinancialInstrumentIdValueOperator.
type FinancialInstrumentIdValueOperator struct {
	Op FinancialInstrumentIdValueOperatorOp `json:"op"`

	// ID of a financial instrument
	Value string `json:"value"`
}

// FinancialInstrumentIdValueOperatorOp defines model for FinancialInstrumentIdValueOperator.Op.
type FinancialInstrumentIdValueOperatorOp string

// FinancialInstrumentIntegerOperator defines model for FinancialInstrumentIntegerOperator.
type FinancialInstrumentIntegerOperator struct {
	// Embedded struct due to allOf(#/components/schemas/IntegerOperator)
	IntegerOperator `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field FinancialInstrumentIntegerOperatorField `json:"field"`
}

// FinancialInstrumentIntegerOperatorField defines model for FinancialInstrumentIntegerOperator.Field.
type FinancialInstrumentIntegerOperatorField string

// FinancialInstrumentListData defines model for FinancialInstrumentListData.
type FinancialInstrumentListData struct {
	Data  []FinancialInstrument `json:"data"`
	Links struct {
		// The first page of data.
		First string `json:"first"`

		// The last page of data.
		Last string `json:"last"`

		// The next page of data.
		Next *string `json:"next,omitempty"`

		// The previous page of data.
		Prev *string `json:"prev,omitempty"`

		// The current page of data.
		Self string `json:"self"`
	} `json:"links"`
	Meta struct {
		// Total number of financial instruments.
		TotalElements *int `json:"total_elements,omitempty"`

		// Total number of pages.
		TotalPages *int `json:"total_pages,omitempty"`
	} `json:"meta"`
}

// FinancialInstrumentNotOperator defines model for FinancialInstrumentNotOperator.
type FinancialInstrumentNotOperator struct {
	Op FinancialInstrumentNotOperatorOp `json:"op"`

	// A FinancialInstrumentFilteringOperator object (recursive)
	Value map[string]interface{} `json:"value"`
}

// FinancialInstrumentNotOperatorOp defines model for FinancialInstrumentNotOperator.Op.
type FinancialInstrumentNotOperatorOp string

// FinancialInstrumentSorting defines model for FinancialInstrumentSorting.
type FinancialInstrumentSorting []FinancialInstrumentSortingSpec

// FinancialInstrumentSortingSpec defines model for FinancialInstrumentSortingSpec.
type FinancialInstrumentSortingSpec struct {
	// Embedded struct due to allOf(#/components/schemas/SortingSpec)
	SortingSpec `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field FinancialInstrumentSortingSpecField `json:"field"`
}

// FinancialInstrumentSortingSpecField defines model for FinancialInstrumentSortingSpec.Field.
type FinancialInstrumentSortingSpecField string

// FinancialInstrumentStringOperator defines model for FinancialInstrumentStringOperator.
type FinancialInstrumentStringOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field FinancialInstrumentStringOperatorField `json:"field"`
}

// FinancialInstrumentStringOperatorField defines model for FinancialInstrumentStringOperator.Field.
type FinancialInstrumentStringOperatorField string

// FinancialInstrumentTypeMemberOperator defines model for FinancialInstrumentTypeMemberOperator.
type FinancialInstrumentTypeMemberOperator struct {
	Op     FinancialInstrumentTypeMemberOperatorOp       `json:"op"`
	Values []FinancialInstrumentTypeMemberOperatorValues `json:"values"`
}

// FinancialInstrumentTypeMemberOperatorOp defines model for FinancialInstrumentTypeMemberOperator.Op.
type FinancialInstrumentTypeMemberOperatorOp string

// FinancialInstrumentTypeMemberOperatorValues defines model for FinancialInstrumentTypeMemberOperator.Values.
type FinancialInstrumentTypeMemberOperatorValues string

// FinancialInstrumentTypeOperator defines model for FinancialInstrumentTypeOperator.
type FinancialInstrumentTypeOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field FinancialInstrumentTypeOperatorField `json:"field"`
}

// FinancialInstrumentTypeOperatorField defines model for FinancialInstrumentTypeOperator.Field.
type FinancialInstrumentTypeOperatorField string

// FinancialInstrumentTypeValueOperator defines model for FinancialInstrumentTypeValueOperator.
type FinancialInstrumentTypeValueOperator struct {
	Op    FinancialInstrumentTypeValueOperatorOp    `json:"op"`
	Value FinancialInstrumentTypeValueOperatorValue `json:"value"`
}

// FinancialInstrumentTypeValueOperatorOp defines model for FinancialInstrumentTypeValueOperator.Op.
type FinancialInstrumentTypeValueOperatorOp string

// FinancialInstrumentTypeValueOperatorValue defines model for FinancialInstrumentTypeValueOperator.Value.
type FinancialInstrumentTypeValueOperatorValue string

// An id of an existing merchant gateway record within payment orchestration.
type Gateway struct {
	// Any specific keys passed through to the gateway configuration. Refer to docs
	Config map[string]interface{} `json:"config"`

	// Creation time, in UTC.
	CreatedAt time.Time `json:"created_at"`

	// ISO 4217 currency code. Defaults to USD
	DefaultCurrency string `json:"default_currency"`

	// Is this gateway the default gateway or not.
	//
	// A default gateway is needed and will be used when a transfer without matching any routing rule created.
	// There could be only one default gateway at the same time.
	// When a new gateway created as the default gateway, the old default gateway will no longer be the default gateway anymore.
	DefaultGateway *bool `json:"default_gateway,omitempty"`

	// Unique identifier for this gateway.
	//
	// Used to refer to gateway in rules.
	Id string `json:"id"`

	// The type of PSP to use.
	// Please refer to our documentation https://www.verygoodsecurity.com/docs/payment-optimization/orchestration/gateways/api-configurations
	// for PSP types supported and their corresponding configurations.
	Type GatewayPSPType `json:"type"`

	// Last time psp token was updated, in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// GatewayBooleanFieldOperator defines model for GatewayBooleanFieldOperator.
type GatewayBooleanFieldOperator struct {
	// Embedded struct due to allOf(#/components/schemas/BooleanOperator)
	BooleanOperator `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field GatewayBooleanFieldOperatorField `json:"field"`
}

// GatewayBooleanFieldOperatorField defines model for GatewayBooleanFieldOperator.Field.
type GatewayBooleanFieldOperatorField string

// GatewayBooleanOperator defines model for GatewayBooleanOperator.
type GatewayBooleanOperator struct {
	Op     GatewayBooleanOperatorOp `json:"op"`
	Values []map[string]interface{} `json:"values"`
}

// GatewayBooleanOperatorOp defines model for GatewayBooleanOperator.Op.
type GatewayBooleanOperatorOp string

// GatewayCreate defines model for GatewayCreate.
type GatewayCreate struct {
	// Any specific keys passed through to the gateway configuration. Refer to docs
	Config *map[string]interface{} `json:"config,omitempty"`

	// ISO 4217 currency code. Defaults to USD
	DefaultCurrency *string `json:"default_currency,omitempty"`

	// Is this gateway the default gateway or not.
	//
	// A default gateway is needed and will be used when a transfer without matching any routing rule created.
	// There could be only one default gateway at the same time.
	// When a new gateway created as the default gateway, the old default gateway will no longer be the default gateway anymore.
	DefaultGateway *bool `json:"default_gateway,omitempty"`

	// Unique identifier for this gateway.
	//
	// Used to refer to gateway in rules.
	Id string `json:"id"`

	// The type of PSP to use.
	// Please refer to our documentation https://www.verygoodsecurity.com/docs/payment-optimization/orchestration/gateways/api-configurations
	// for PSP types supported and their corresponding configurations.
	Type GatewayPSPType `json:"type"`
}

// GatewayData defines model for GatewayData.
type GatewayData struct {
	// An id of an existing merchant gateway record within payment orchestration.
	Data Gateway `json:"data"`
}

// GatewayError defines model for GatewayError.
type GatewayError struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Application-specific error code:
	//   * `invalid-psp-type` - The provided PSP type is invalid
	//   * `duplicate-gateway-id` - The provided gateway id already exists
	//   * `default-gateway-deleting-conflict` - Deleting default gateway is not allowed, a new default gateway needs to be created first
	//   * `default-gateway-unset-conflict` - Updating a default gateway to be a non-default gateway is not allowed, a new default gateway needs to be created or assigned first
	//   * `rule-dependency-deleting-conflict` - There are still rules depending on the gateway
	Code *GatewayErrorCode `json:"code,omitempty"`
}

// Application-specific error code:
//   * `invalid-psp-type` - The provided PSP type is invalid
//   * `duplicate-gateway-id` - The provided gateway id already exists
//   * `default-gateway-deleting-conflict` - Deleting default gateway is not allowed, a new default gateway needs to be created first
//   * `default-gateway-unset-conflict` - Updating a default gateway to be a non-default gateway is not allowed, a new default gateway needs to be created or assigned first
//   * `rule-dependency-deleting-conflict` - There are still rules depending on the gateway
type GatewayErrorCode string

// GatewayFilter defines model for GatewayFilter.
type GatewayFilter []GatewayFilteringOperator

// GatewayFilteringOperator defines model for GatewayFilteringOperator.
type GatewayFilteringOperator interface{}

// GatewayJSONOperator defines model for GatewayJSONOperator.
type GatewayJSONOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field GatewayJSONOperatorField `json:"field"`
}

// GatewayJSONOperatorField defines model for GatewayJSONOperator.Field.
type GatewayJSONOperatorField string

// GatewayListData defines model for GatewayListData.
type GatewayListData struct {
	Data  []Gateway `json:"data"`
	Links struct {
		// The first page of data.
		First string `json:"first"`

		// The last page of data.
		Last string `json:"last"`

		// The next page of data.
		Next *string `json:"next,omitempty"`

		// The previous page of data.
		Prev *string `json:"prev,omitempty"`

		// The current page of data.
		Self string `json:"self"`
	} `json:"links"`
	Meta struct {
		// Total number of gateways.
		TotalElements *int `json:"total_elements,omitempty"`

		// Total number of pages.
		TotalPages *int `json:"total_pages,omitempty"`
	} `json:"meta"`
}

// GatewayNotOperator defines model for GatewayNotOperator.
type GatewayNotOperator struct {
	Op GatewayNotOperatorOp `json:"op"`

	// A GatewayFilteringOperator object (recursive)
	Value map[string]interface{} `json:"value"`
}

// GatewayNotOperatorOp defines model for GatewayNotOperator.Op.
type GatewayNotOperatorOp string

// Gateway-specific options object, that nevertheless has some standard keys - 'currency', 'billing_address' and 'shipping_address'.
//
// Beyond the standard keys, optional additional information can be included, like 'order_id', 'invoice', 'email', or any other custom keys specified by the caller.
type GatewayOptions struct {
	// Payment's currency. If empty, default merchant account's currency will be applied.
	Currency             *string                `json:"currency,omitempty"`
	ShippingAddress      *interface{}           `json:"shipping_address"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// The type of PSP to use.
// Please refer to our documentation https://www.verygoodsecurity.com/docs/payment-optimization/orchestration/gateways/api-configurations
// for PSP types supported and their corresponding configurations.
type GatewayPSPType string

// GatewaySorting defines model for GatewaySorting.
type GatewaySorting []GatewaySortingSpec

// GatewaySortingSpec defines model for GatewaySortingSpec.
type GatewaySortingSpec struct {
	// Embedded struct due to allOf(#/components/schemas/SortingSpec)
	SortingSpec `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field GatewaySortingSpecField `json:"field"`
}

// GatewaySortingSpecField defines model for GatewaySortingSpec.Field.
type GatewaySortingSpecField string

// GatewayStringOperator defines model for GatewayStringOperator.
type GatewayStringOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field GatewayStringOperatorField `json:"field"`
}

// GatewayStringOperatorField defines model for GatewayStringOperator.Field.
type GatewayStringOperatorField string

// GatewayTypeMemberOperator defines model for GatewayTypeMemberOperator.
type GatewayTypeMemberOperator struct {
	Op     GatewayTypeMemberOperatorOp `json:"op"`
	Values []GatewayPSPType            `json:"values"`
}

// GatewayTypeMemberOperatorOp defines model for GatewayTypeMemberOperator.Op.
type GatewayTypeMemberOperatorOp string

// GatewayTypeOperator defines model for GatewayTypeOperator.
type GatewayTypeOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field GatewayTypeOperatorField `json:"field"`
}

// GatewayTypeOperatorField defines model for GatewayTypeOperator.Field.
type GatewayTypeOperatorField string

// GatewayTypeValueOperator defines model for GatewayTypeValueOperator.
type GatewayTypeValueOperator struct {
	Op GatewayTypeValueOperatorOp `json:"op"`

	// The type of PSP to use.
	// Please refer to our documentation https://www.verygoodsecurity.com/docs/payment-optimization/orchestration/gateways/api-configurations
	// for PSP types supported and their corresponding configurations.
	Value GatewayPSPType `json:"value"`
}

// GatewayTypeValueOperatorOp defines model for GatewayTypeValueOperator.Op.
type GatewayTypeValueOperatorOp string

// GatewayUpdate defines model for GatewayUpdate.
type GatewayUpdate struct {
	// Any specific keys passed through to the gateway configuration. Refer to docs
	Config *map[string]interface{} `json:"config,omitempty"`

	// ISO 4217 currency code. Defaults to USD
	DefaultCurrency *string `json:"default_currency,omitempty"`

	// Is this gateway the default gateway or not.
	//
	// A default gateway is needed and will be used when a transfer without matching any routing rule created.
	// There could be only one default gateway at the same time.
	// When a gateway set as the default gateway, the old default gateway will no longer be the default gateway anymore.
	DefaultGateway *bool `json:"default_gateway,omitempty"`

	// The type of PSP to use.
	// Please refer to our documentation https://www.verygoodsecurity.com/docs/payment-optimization/orchestration/gateways/api-configurations
	// for PSP types supported and their corresponding configurations.
	Type *GatewayPSPType `json:"type,omitempty"`
}

// GatewaysApiErrors defines model for GatewaysApiErrors.
type GatewaysApiErrors struct {
	Errors []interface{} `json:"errors"`

	// A unique identifier of the failed request.
	TraceId *string `json:"trace_id,omitempty"`
}

// GeneralError defines model for GeneralError.
type GeneralError struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Application-specific error code:
	//   * `invalid-id-format` - Invalid id format
	//   * `invalid-payload` - Payload is invalid
	//   * `internal-server-error` - Internal server error
	//   * `tenant-not-found` - Tenant specified in the request was not found
	//   * `not-found` - Entity could not be found
	//   * `operation-not-supported-by-gateway` - Operation is not support for particular gateway
	//   * `default-gateway-required` - Default gateway is required
	//   * `missing` - Required field is missing
	Code *GeneralErrorCode `json:"code,omitempty"`
}

// Application-specific error code:
//   * `invalid-id-format` - Invalid id format
//   * `invalid-payload` - Payload is invalid
//   * `internal-server-error` - Internal server error
//   * `tenant-not-found` - Tenant specified in the request was not found
//   * `not-found` - Entity could not be found
//   * `operation-not-supported-by-gateway` - Operation is not support for particular gateway
//   * `default-gateway-required` - Default gateway is required
//   * `missing` - Required field is missing
type GeneralErrorCode string

// IntegerOperator defines model for IntegerOperator.
type IntegerOperator struct {
	Op    IntegerOperatorOp `json:"op"`
	Value int               `json:"value"`
}

// IntegerOperatorOp defines model for IntegerOperator.Op.
type IntegerOperatorOp string

// JSONValueOperator defines model for JSONValueOperator.
type JSONValueOperator struct {
	Op    JSONValueOperatorOp `json:"op"`
	Path  []string            `json:"path"`
	Value interface{}         `json:"value"`
}

// JSONValueOperatorOp defines model for JSONValueOperator.Op.
type JSONValueOperatorOp string

// Order defines model for Order.
type Order struct {
	// Embedded fields due to inline allOf schema
	// Creation time, in UTC.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Order ID
	Id *string `json:"id,omitempty"`

	// Session ID for redirect to Hosted Page
	SessionId *openapi_types.UUID `json:"session_id,omitempty"`

	// Last time order was updated, in UTC.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/OrderCreate)
	OrderCreate `yaml:",inline"`
}

// OrderApiErrors defines model for OrderApiErrors.
type OrderApiErrors struct {
	Errors []interface{} `json:"errors"`

	// A unique identifier of the failed request.
	TraceId *string `json:"trace_id,omitempty"`
}

// OrderCreate defines model for OrderCreate.
type OrderCreate struct {
	// The final amount which will be used for transfer
	Amount float32 `json:"amount"`

	// Redirect URL if a user cancels the payment
	CancelUrl *string `json:"cancel_url,omitempty"`

	// ISO 4217 currency code. Defaults to USD
	Currency string `json:"currency"`

	// Redirect URL if payment failed for any reasons
	ErrorUrl *string `json:"error_url,omitempty"`

	// Possible ways, which end-user can use to make a payment
	FinancialInstrumentTypes []string `json:"financial_instrument_types"`
	Items                    *[]struct {
		// Product picture
		Image *string `json:"image"`

		// Product title
		Name string `json:"name"`

		// Discount for an order item in %
		PercentOff *float32 `json:"percent_off,omitempty"`

		// Price in cents
		Price float32 `json:"price"`

		// Count of product items
		Quantity int `json:"quantity"`
	} `json:"items,omitempty"`

	// Discount for an amount of order in %
	PercentOff *float32 `json:"percent_off,omitempty"`

	// Redirect URL if payment completed successfully
	SuccessUrl *string `json:"success_url,omitempty"`
}

// OrderData defines model for OrderData.
type OrderData struct {
	Data Order `json:"data"`
}

// OrderError defines model for OrderError.
type OrderError struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Application-specific error code:
	//   * `invalid-currency` - Currency must be in format ISO 4217
	//   * `amount-negative-or-zero` - Amount must be greater than zero
	//   * `discount-negative-or-zero` - Discount must be from 0 to 100
	//   * `invalid-success-url` - Provide a valid link with HTTPS
	//   * `invalid-cancel-url` - Provide a valid link with HTTPS
	//   * `invalid-error-url` - Provide a valid link with HTTPS
	//   * `invalid-financial-instrument-types` - Set up one of possible payment methods: apple-pay, google-pay, paypal, card
	//   * `price-negative-or-zero` - Item price must be greater than zero
	//   * `quantity-negative-or-zero` - Item quantity must be greater than zero
	Code *OrderErrorCode `json:"code,omitempty"`
}

// Application-specific error code:
//   * `invalid-currency` - Currency must be in format ISO 4217
//   * `amount-negative-or-zero` - Amount must be greater than zero
//   * `discount-negative-or-zero` - Discount must be from 0 to 100
//   * `invalid-success-url` - Provide a valid link with HTTPS
//   * `invalid-cancel-url` - Provide a valid link with HTTPS
//   * `invalid-error-url` - Provide a valid link with HTTPS
//   * `invalid-financial-instrument-types` - Set up one of possible payment methods: apple-pay, google-pay, paypal, card
//   * `price-negative-or-zero` - Item price must be greater than zero
//   * `quantity-negative-or-zero` - Item quantity must be greater than zero
type OrderErrorCode string

// PSP Token object.
type PSPToken struct {
	// PSP Token details.
	PspToken PSPTokenDetails `json:"psp_token"`
}

// PSP Token details.
type PSPTokenDetails struct {
	// PSP that PSP token belongs to.
	Psp   string `json:"psp"`
	Value string `json:"value"`
}

// PSP Token response object.
type PSPTokenObject struct {
	// Creation time, in UTC.
	CreatedAt time.Time `json:"created_at"`

	// ID of a Financial Instrument that's been previously stored.
	Id *StoredFinancialInstrument `json:"id"`

	// PSP Token details.
	PspToken PSPTokenDetails `json:"psp_token"`

	// Last time psp token was updated, in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// Payment card.
type PaymentCardCreate struct {
	// Payment card object details.
	Card PaymentCardDetailsCreate `json:"card"`
}

// PaymentCardDetails defines model for PaymentCardDetails.
type PaymentCardDetails struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentCardDetailsCreate)
	PaymentCardDetailsCreate `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Brand of card
	Brand PaymentCardDetailsBrand `json:"brand"`
}

// Brand of card
type PaymentCardDetailsBrand string

// Payment card object details.
type PaymentCardDetailsCreate struct {
	BillingAddress *interface{} `json:"billing_address"`

	// Card's verification value. This value is needed for a singular transfer or authorization, and expires after an hour due to PCI requirements.
	Cvc string `json:"cvc"`

	// Card's expiration month.
	ExpMonth int `json:"exp_month"`

	// Card's expiration year.
	ExpYear int `json:"exp_year"`

	// Card owner's full name.
	Name string `json:"name"`

	// Customer's card number.
	Number string `json:"number"`
}

// Payment card object.
type PaymentCardObject struct {
	Card PaymentCardDetails `json:"card"`

	// Creation time, in UTC.
	CreatedAt time.Time `json:"created_at"`

	// ID of a Financial Instrument that's been previously stored.
	Id *StoredFinancialInstrument `json:"id"`

	// Last time payment card was updated, in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// Customer's billing or shipping address.
type PhysicalAddress struct {
	Address1 *string `json:"address1"`
	Address2 *string `json:"address2"`
	City     *string `json:"city"`
	Company  *string `json:"company"`

	// Country code in ISO 3166-1 alpha-2
	Country *string `json:"country"`
	Name    *string `json:"name"`

	// Telephone number in E.164
	Phone      *string `json:"phone"`
	PostalCode *string `json:"postal_code"`

	// Principal subdivision in ISO 3166-2
	Region *string `json:"region"`
}

// Reversal defines model for Reversal.
type Reversal struct {
	// Amount intended to be collected by this payment. A positive integer representing how much to
	// charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100,
	// a zero-decimal currency).
	Amount *Amount `json:"amount,omitempty"`

	// Gateway-specific options object, that nevertheless has some standard keys - 'currency', 'billing_address' and 'shipping_address'.
	//
	// Beyond the standard keys, optional additional information can be included, like 'order_id', 'invoice', 'email', or any other custom keys specified by the caller.
	GatewayOptions *GatewayOptions `json:"gateway_options,omitempty"`
}

// A transfer routing rule.
//
// If none are present then we choose the first gateway.
type Rule struct {
	Action RuleAction `json:"action"`

	// Creation time, in UTC.
	CreatedAt   time.Time `json:"created_at"`
	Criteria    string    `json:"criteria"`
	Description *string   `json:"description"`

	// Unique reference identifier for this rule
	Id string `json:"id"`

	// Order of execution of rule
	Ordinal int `json:"ordinal"`

	// ID of gateway to route transfer to
	RouteToGateway *string `json:"route_to_gateway"`

	// Last time rule was updated, in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// RuleAction defines model for Rule.Action.
type RuleAction string

// RuleActionMemberOperator defines model for RuleActionMemberOperator.
type RuleActionMemberOperator struct {
	Op     RuleActionMemberOperatorOp       `json:"op"`
	Values []RuleActionMemberOperatorValues `json:"values"`
}

// RuleActionMemberOperatorOp defines model for RuleActionMemberOperator.Op.
type RuleActionMemberOperatorOp string

// RuleActionMemberOperatorValues defines model for RuleActionMemberOperator.Values.
type RuleActionMemberOperatorValues string

// RuleActionOperator defines model for RuleActionOperator.
type RuleActionOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field RuleActionOperatorField `json:"field"`
}

// RuleActionOperatorField defines model for RuleActionOperator.Field.
type RuleActionOperatorField string

// RuleActionValueOperator defines model for RuleActionValueOperator.
type RuleActionValueOperator struct {
	Op    RuleActionValueOperatorOp    `json:"op"`
	Value RuleActionValueOperatorValue `json:"value"`
}

// RuleActionValueOperatorOp defines model for RuleActionValueOperator.Op.
type RuleActionValueOperatorOp string

// RuleActionValueOperatorValue defines model for RuleActionValueOperator.Value.
type RuleActionValueOperatorValue string

// RuleBooleanOperator defines model for RuleBooleanOperator.
type RuleBooleanOperator struct {
	Op     RuleBooleanOperatorOp    `json:"op"`
	Values []map[string]interface{} `json:"values"`
}

// RuleBooleanOperatorOp defines model for RuleBooleanOperator.Op.
type RuleBooleanOperatorOp string

// RuleCreate defines model for RuleCreate.
type RuleCreate struct {
	Action RuleCreateAction `json:"action"`

	// https://github.com/google/cel-spec
	//
	// Common Expression Language compatible rule
	//
	// Rules can fire by using transfer attributes ( including financial instrument attributes) and environment attributes as criteria.
	//
	// Transfer attributes
	// - `transfer.amount` The amount of transfer
	// - `transfer.currency` ISO 4217 currency code of the transfer
	// - `transfer.type` Type of transfer, could be one of `credit`, `debit`, `reversal` or `verification`
	// - `transfer.source` The ID of source financial instruments
	// - `transfer.destination.bin` # Not implemented
	// - `transfer.destination.card_type` # Not implemented
	//
	// Card attributes
	// - `card.brand` The brand of credit card, could be one of `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, `DinersClub`, `UnionPay` or `Unknown`
	//
	// Environment attributes
	// - `env.utc_hour` Current UTC time hour value, could be used for time-based routing rule
	// - `env.utc_minute` Current UTC time minute value, could be used for time-based routing rule
	// - `env.ip_address_requests_last_hour` # Not implemented
	// - `env.source_requests_last_hour` # Not implemented
	// - `env.username` The username value provided in auth token
	// - `env.user_id` The user id value provided in auth token
	// - `env.client_id` The client id value provided in auth token
	//
	// Sub-merchant routing can be established via `username` or `user_id`.
	Criteria    string  `json:"criteria"`
	Description *string `json:"description"`

	// Order of execution of rule
	Ordinal int `json:"ordinal"`

	// ID of gateway to route transfer to when action is set to `route` or `retry`
	RouteToGateway *string `json:"route_to_gateway"`
}

// RuleCreateAction defines model for RuleCreate.Action.
type RuleCreateAction string

// RuleData defines model for RuleData.
type RuleData struct {
	// A transfer routing rule.
	//
	// If none are present then we choose the first gateway.
	Data Rule `json:"data"`
}

// RuleDateOperator defines model for RuleDateOperator.
type RuleDateOperator struct {
	// Embedded struct due to allOf(#/components/schemas/DateOperator)
	DateOperator `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field RuleDateOperatorField `json:"field"`
}

// RuleDateOperatorField defines model for RuleDateOperator.Field.
type RuleDateOperatorField string

// RuleError defines model for RuleError.
type RuleError struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Application-specific error code:
	//   * `invalid-criteria` - Invalid criteria for syntax error or semantic error
	//   * `invalid-route-action` - Invalid route action
	Code *RuleErrorCode `json:"code,omitempty"`
}

// Application-specific error code:
//   * `invalid-criteria` - Invalid criteria for syntax error or semantic error
//   * `invalid-route-action` - Invalid route action
type RuleErrorCode string

// RuleFilter defines model for RuleFilter.
type RuleFilter []RuleFilteringOperator

// RuleFilteringOperator defines model for RuleFilteringOperator.
type RuleFilteringOperator interface{}

// RuleIdMemberOperator defines model for RuleIdMemberOperator.
type RuleIdMemberOperator struct {
	Op     RuleIdMemberOperatorOp `json:"op"`
	Values []string               `json:"values"`
}

// RuleIdMemberOperatorOp defines model for RuleIdMemberOperator.Op.
type RuleIdMemberOperatorOp string

// RuleIdOperator defines model for RuleIdOperator.
type RuleIdOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field RuleIdOperatorField `json:"field"`
}

// RuleIdOperatorField defines model for RuleIdOperator.Field.
type RuleIdOperatorField string

// RuleIdValueOperator defines model for RuleIdValueOperator.
type RuleIdValueOperator struct {
	Op RuleIdValueOperatorOp `json:"op"`

	// ID of a rule
	Value string `json:"value"`
}

// RuleIdValueOperatorOp defines model for RuleIdValueOperator.Op.
type RuleIdValueOperatorOp string

// RuleIntegerOperator defines model for RuleIntegerOperator.
type RuleIntegerOperator struct {
	// Embedded struct due to allOf(#/components/schemas/IntegerOperator)
	IntegerOperator `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field RuleIntegerOperatorField `json:"field"`
}

// RuleIntegerOperatorField defines model for RuleIntegerOperator.Field.
type RuleIntegerOperatorField string

// RuleListData defines model for RuleListData.
type RuleListData struct {
	Data  []Rule `json:"data"`
	Links struct {
		// The first page of data.
		First string `json:"first"`

		// The last page of data.
		Last string `json:"last"`

		// The next page of data.
		Next *string `json:"next,omitempty"`

		// The previous page of data.
		Prev *string `json:"prev,omitempty"`

		// The current page of data.
		Self string `json:"self"`
	} `json:"links"`
	Meta struct {
		// Total number of rules.
		TotalElements *int `json:"total_elements,omitempty"`

		// Total number of pages.
		TotalPages *int `json:"total_pages,omitempty"`
	} `json:"meta"`
}

// RuleNotOperator defines model for RuleNotOperator.
type RuleNotOperator struct {
	Op RuleNotOperatorOp `json:"op"`

	// A RuleFilteringOperator object (recursive)
	Value map[string]interface{} `json:"value"`
}

// RuleNotOperatorOp defines model for RuleNotOperator.Op.
type RuleNotOperatorOp string

// RuleSorting defines model for RuleSorting.
type RuleSorting []RuleSortingSpec

// RuleSortingSpec defines model for RuleSortingSpec.
type RuleSortingSpec struct {
	// Embedded struct due to allOf(#/components/schemas/SortingSpec)
	SortingSpec `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field RuleSortingSpecField `json:"field"`
}

// RuleSortingSpecField defines model for RuleSortingSpec.Field.
type RuleSortingSpecField string

// RuleStringOperator defines model for RuleStringOperator.
type RuleStringOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field RuleStringOperatorField `json:"field"`
}

// RuleStringOperatorField defines model for RuleStringOperator.Field.
type RuleStringOperatorField string

// RuleUpdate defines model for RuleUpdate.
type RuleUpdate struct {
	Action *RuleUpdateAction `json:"action,omitempty"`

	// https://github.com/google/cel-spec
	//
	// Common Expression Language compatible rule
	//
	// Rules can fire by using transfer attributes ( including financial instrument attributes) and environment attributes as criteria.
	//
	// Transfer attributes
	// - `transfer.amount` The amount of transfer
	// - `transfer.currency` ISO 4217 currency code of the transfer
	// - `transfer.type` Type of transfer, could be one of `credit`, `debit`, `reversal` or `verification`
	// - `transfer.source` The ID of source financial instruments
	// - `transfer.destination.bin` # Not implemented
	// - `transfer.destination.card_type` # Not implemented
	//
	// Card attributes
	// - `card.brand` The brand of credit card, could be one of `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, `DinersClub`, `UnionPay` or `Unknown`
	//
	// Environment attributes
	// - `env.utc_hour` Current UTC time hour value, could be used for time-based routing rule
	// - `env.utc_minute` Current UTC time minute value, could be used for time-based routing rule
	// - `env.ip_address_requests_last_hour` # Not implemented
	// - `env.source_requests_last_hour` # Not implemented
	// - `env.username` The username value provided in auth token
	// - `env.user_id` The user id value provided in auth token
	// - `env.client_id` The client id value provided in auth token
	//
	// Sub-merchant routing can be established via `username` or `user_id`.
	Criteria    *string `json:"criteria,omitempty"`
	Description *string `json:"description"`

	// Order of execution of rule
	Ordinal *int `json:"ordinal,omitempty"`

	// ID of gateway to route transfer to when action is set to `route` or `retry`
	RouteToGateway *string `json:"route_to_gateway"`
}

// RuleUpdateAction defines model for RuleUpdate.Action.
type RuleUpdateAction string

// RulesApiErrors defines model for RulesApiErrors.
type RulesApiErrors struct {
	Errors []interface{} `json:"errors"`

	// A unique identifier of the failed request.
	TraceId *string `json:"trace_id,omitempty"`
}

// SortingSpec defines model for SortingSpec.
type SortingSpec struct {
	Direction *SortingSpecDirection `json:"direction,omitempty"`
}

// SortingSpecDirection defines model for SortingSpec.Direction.
type SortingSpecDirection string

// ID of a Financial Instrument that's been previously stored.
type StoredFinancialInstrument string

// StringMemberOperator defines model for StringMemberOperator.
type StringMemberOperator struct {
	Op     StringMemberOperatorOp `json:"op"`
	Values []string               `json:"values"`
}

// StringMemberOperatorOp defines model for StringMemberOperator.Op.
type StringMemberOperatorOp string

// StringValueOperator defines model for StringValueOperator.
type StringValueOperator struct {
	Op    StringValueOperatorOp `json:"op"`
	Value string                `json:"value"`
}

// StringValueOperatorOp defines model for StringValueOperator.Op.
type StringValueOperatorOp string

// A ThreeDSAuthentication represents the record for a 3DS authentication session
type ThreeDSAuthentication struct {
	// Amount intended to be collected by this payment. A positive integer representing how much to
	// charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100,
	// a zero-decimal currency).
	Amount Amount `json:"amount"`

	// The card financial instrument to be 3DS authenticated
	Card      string `json:"card"`
	Challenge *struct {
		// The form parameter payload for sending as a POST request to the given URL in an iframe
		Params map[string]interface{} `json:"params"`

		// The iframe URL for challenge
		Url string `json:"url"`

		// Should the VGS checkout.js waits for postMessage from iframe after the page is loaded or not
		WaitForMessage bool `json:"wait_for_message"`
	} `json:"challenge"`

	// Creation time, in UTC.
	CreatedAt time.Time `json:"created_at"`

	// ISO 4217 currency code for this 3DS authentication.
	Currency          string `json:"currency"`
	DeviceFingerprint *struct {
		// The form parameter payload for sending as a POST request to the given URL in an iframe
		Params map[string]interface{} `json:"params"`

		// The iframe URL for device fingerprint
		Url string `json:"url"`

		// Should the VGS checkout.js waits for postMessage from iframe after the page is loaded or not
		WaitForMessage *bool `json:"wait_for_message,omitempty"`
	} `json:"device_fingerprint"`

	// Unique reference identifier for this 3DS authentication
	Id string `json:"id"`

	// `device_fingerprint` means the 3DS authentication is created and needs device fingerprint.
	//
	// `challenge` means the 3DS provider requires the user to be challenged for approving this transaction.
	//
	// `successful` means the 3DS authentication is successful, and is ready to be passed to transfer for making a purchase.
	//
	// `failed` occurs when the authentication failed.
	State ThreeDSAuthenticationState `json:"state"`

	// Last time authentication was updated, in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// `device_fingerprint` means the 3DS authentication is created and needs device fingerprint.
//
// `challenge` means the 3DS provider requires the user to be challenged for approving this transaction.
//
// `successful` means the 3DS authentication is successful, and is ready to be passed to transfer for making a purchase.
//
// `failed` occurs when the authentication failed.
type ThreeDSAuthenticationState string

// ThreeDSAuthenticationCreate defines model for ThreeDSAuthenticationCreate.
type ThreeDSAuthenticationCreate struct {
	// Amount intended to be collected by this payment. A positive integer representing how much to
	// charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100,
	// a zero-decimal currency).
	Amount Amount `json:"amount"`

	// The information of browser collected for 3DS authentication
	BrowserInfo BrowserInfo `json:"browser_info"`

	// The ID financial instrument for the credit card to be authenticated
	Card string `json:"card"`

	// ISO 4217 currency code for this authentication.
	Currency string `json:"currency"`

	// The URL of the web page which initiated the 3DS authentication and limited to receive messages from the notifications endpoint via Javascript postMessage calls
	Origin string `json:"origin"`
}

// ThreeDSAuthenticationData defines model for ThreeDSAuthenticationData.
type ThreeDSAuthenticationData struct {
	// A ThreeDSAuthentication represents the record for a 3DS authentication session
	Data ThreeDSAuthentication `json:"data"`
}

// A 3DS service provider with its credentials and configurations
type ThreeDSProvider struct {
	// Any specific keys passed through to the 3DS provider configuration. Refer to docs
	Config map[string]interface{} `json:"config"`

	// Creation time, in UTC.
	CreatedAt time.Time `json:"created_at"`

	// Unique reference identifier for this 3DS provider
	Id string `json:"id"`

	// The type of 3DS provider.
	//
	// Please notice that not all 3DS provider listed in the enum are supported at this moment.
	// Contact VGS customer support to find out the list of supported 3DS providers.
	Type interface{} `json:"type"`

	// Last time 3DS provider was updated, in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// ThreeDSProviderApiErrors defines model for ThreeDSProviderApiErrors.
type ThreeDSProviderApiErrors struct {
	Errors []interface{} `json:"errors"`

	// A unique identifier of the failed request.
	TraceId *string `json:"trace_id,omitempty"`
}

// ThreeDSProviderCreate defines model for ThreeDSProviderCreate.
type ThreeDSProviderCreate struct {
	// Any specific keys passed through to the provider configuration. Refer to docs
	Config map[string]interface{} `json:"config"`

	// The type of 3DS provider.
	//
	// Please notice that not all 3DS provider listed in the enum are supported at this moment.
	// Contact VGS customer support to find out the list of supported 3DS providers.
	Type ThreeDSProviderType `json:"type"`
}

// ThreeDSProviderData defines model for ThreeDSProviderData.
type ThreeDSProviderData struct {
	// A 3DS service provider with its credentials and configurations
	Data ThreeDSProvider `json:"data"`
}

// The type of 3DS provider.
//
// Please notice that not all 3DS provider listed in the enum are supported at this moment.
// Contact VGS customer support to find out the list of supported 3DS providers.
type ThreeDSProviderType string

// A Transfer represents any flow of funds either to or from a Financial Instrument.
//
// A Transfer can be
// - a debit from a payment card
// - a credit to a bank account
// - a reversal of another transfer.
//
// Each type is represented by the `type` field
type Transfer struct {
	// Amount intended to be collected by this payment. A positive integer representing how much to
	// charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100,
	// a zero-decimal currency).
	Amount Amount `json:"amount"`

	// Total amount of funds captured in cents (e.g. 100 cents means $1.00)
	AmountCaptured *int `json:"amount_captured,omitempty"`

	// Total amount of funds reversed in cents (e.g. 100 cents means $1.00)
	AmountReversed *int `json:"amount_reversed,omitempty"`

	// Address Verification Service result if available. The combination of `code` and `message` could be one of
	//
	// - A : Street address matches, but postal code does not match.
	// - B : Street address matches, but postal code not verified.
	// - C : Street address and postal code do not match.
	// - D : Street address and postal code match.
	// - E : AVS data is invalid or AVS is not allowed for this card type.
	// - F : Card member's name does not match, but billing postal code matches.
	// - G : Non-U.S. issuing bank does not support AVS.
	// - H : Card member's name does not match. Street address and postal code match.
	// - I : Address not verified.
	// - J : Card member's name, billing address, and postal code match. Shipping information verified and chargeback protection guaranteed through the Fraud Protection Program.
	// - K : Card member's name matches but billing address and billing postal code do not match.
	// - L : Card member's name and billing postal code match, but billing address does not match.
	// - M : Street address and postal code match.
	// - N : Street address and postal code do not match. For American Express: Card member's name, street address and postal code do not match.
	// - O : Card member's name and billing address match, but billing postal code does not match.
	// - P : Postal code matches, but street address not verified.
	// - Q : Card member's name, billing address, and postal code match. Shipping information verified but chargeback protection not guaranteed.
	// - R : System unavailable.
	// - S : U.S.-issuing bank does not support AVS.
	// - T : Card member's name does not match, but street address matches.
	// - U : Address information unavailable.
	// - V : Card member's name, billing address, and billing postal code match.
	// - W : Street address does not match, but 9-digit postal code matches.
	// - X : Street address and 9-digit postal code match.
	// - Y : Street address and 5-digit postal code match.
	// - Z : Street address does not match, but 5-digit postal code matches.
	//
	// Please notice, some PSP may return different `code` and `message` values not listed above
	AvsResult *AVSResult         `json:"avs_result"`
	Captures  *[]TransferCapture `json:"captures,omitempty"`

	// Creation time, in UTC.
	CreatedAt time.Time `json:"created_at"`

	// ISO 4217 currency code for this transaction. If not supplied based on default of gateway.
	Currency *string `json:"currency"`

	// Destination for funds.
	//
	// Populated for reversals
	Destination *string `json:"destination"`

	// The total amount that will be debited in cents (e.g. 100 cents to debit $1.00)
	// This amount cannot be greater than the `amount`.
	Fee *int `json:"fee,omitempty"`

	// An id of an existing merchant gateway record within payment orchestration.
	Gateway Gateway `json:"gateway"`

	// Gateway-specific response data, taken directly from the PSP's reply.
	GatewayResponse TransferGatewayResponse `json:"gateway_response"`

	// Unique reference identifier for this transfer
	Id string `json:"id"`

	// If the transfer type is `reversal`, this will be the transfer id it's reversing
	ReversedTransfer *string `json:"reversed_transfer"`

	// Where funds are drawn from.
	//
	// Not populated for reversals
	Source *string `json:"source"`

	// 'pending' means transfer needs to be finalized by performing a 'capture' action on it.
	//
	// 'canceled' means the 'authorized' request was nullified, and the funds were released from hold.
	//
	// 'successful' means transfer is in it's final state, and the funds were transferred from customer's account to the destination.
	//
	// 'failed' occurs when the authorization failed to be created.
	State TransferState `json:"state"`

	// - `debit` is created after capturing an Authorization.
	// - `reversal` represents a refund or chargeback where funds are reversed from a previous transfer.
	// - `credit` is when funds are transferred to the Financial Instrument represented by the `destination` field.
	Type TransferType `json:"type"`

	// Last time transfer was updated, in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// 'pending' means transfer needs to be finalized by performing a 'capture' action on it.
//
// 'canceled' means the 'authorized' request was nullified, and the funds were released from hold.
//
// 'successful' means transfer is in it's final state, and the funds were transferred from customer's account to the destination.
//
// 'failed' occurs when the authorization failed to be created.
type TransferState string

// - `debit` is created after capturing an Authorization.
// - `reversal` represents a refund or chargeback where funds are reversed from a previous transfer.
// - `credit` is when funds are transferred to the Financial Instrument represented by the `destination` field.
type TransferType string

// TransferBooleanOperator defines model for TransferBooleanOperator.
type TransferBooleanOperator struct {
	Op     TransferBooleanOperatorOp `json:"op"`
	Values []map[string]interface{}  `json:"values"`
}

// TransferBooleanOperatorOp defines model for TransferBooleanOperator.Op.
type TransferBooleanOperatorOp string

// A Transfer capture represents an attempt to capture previously held fund
type TransferCapture struct {
	Amount *interface{} `json:"amount"`

	// Creation time, in UTC.
	CreatedAt time.Time `json:"created_at"`

	// Gateway-specific response data, taken directly from the PSP's reply.
	GatewayResponse TransferGatewayResponse `json:"gateway_response"`
}

// TransferCreate defines model for TransferCreate.
type TransferCreate struct {
	// Embedded struct due to allOf(#/components/schemas/TransferCreateBase)
	TransferCreateBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Amount intended to be collected by this payment. A positive integer representing how much to
	// charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100,
	// a zero-decimal currency).
	Amount Amount `json:"amount"`

	// Overriding options for the source financial instrument just for this transfer
	SourceOverride *struct {
		// Overriding options for the source card financial instrument just for this transfer
		Card *struct {
			BillingAddress *interface{} `json:"billing_address"`

			// Card's verification value. This value is needed for a singular transfer or authorization, and is only valid for a single use.
			Cvc *string `json:"cvc,omitempty"`

			// Card's expiration month to override for this transfer.
			ExpMonth *int `json:"exp_month"`

			// Card's expiration year to override for this transfer.
			ExpYear *int `json:"exp_year"`

			// Card owner's full name to override for this transfer.
			Name *string `json:"name"`
		} `json:"card"`
	} `json:"source_override"`
}

// TransferCreateBase defines model for TransferCreateBase.
type TransferCreateBase struct {
	// - `authorize` - holds the transfer amount with the customer's bank to be captured or canceled at a later time.
	// - `capture` - transfers funds from the customer account immediately.
	// - `payout` - transfers funds to the customer account immediately.
	Action *TransferCreateBaseAction `json:"action,omitempty"`

	// ISO 4217 currency code for this transaction. If not supplied based on default of gateway.
	Currency *string `json:"currency,omitempty"`

	// ID of a Financial Instrument that's been previously stored.
	Destination *StoredFinancialInstrument `json:"destination"`

	// Gateway-specific options object, that nevertheless has some standard keys - 'currency', 'billing_address' and 'shipping_address'.
	//
	// Beyond the standard keys, optional additional information can be included, like 'order_id', 'invoice', 'email', or any other custom keys specified by the caller.
	GatewayOptions *GatewayOptions `json:"gateway_options,omitempty"`

	// ID of a Financial Instrument that's been previously stored.
	Source *StoredFinancialInstrument `json:"source"`

	// ID of a successful 3DS authentication to be passed to PSP, provides if the PSP accepts external 3DS data
	ThreeDsAuthentication *string `json:"three_ds_authentication"`
}

// - `authorize` - holds the transfer amount with the customer's bank to be captured or canceled at a later time.
// - `capture` - transfers funds from the customer account immediately.
// - `payout` - transfers funds to the customer account immediately.
type TransferCreateBaseAction string

// TransferCreateFromOrderID defines model for TransferCreateFromOrderID.
type TransferCreateFromOrderID struct {
	// Embedded struct due to allOf(#/components/schemas/TransferCreateBase)
	TransferCreateBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Order ID
	OrderId string `json:"order_id"`
}

// TransferData defines model for TransferData.
type TransferData struct {
	// A Transfer represents any flow of funds either to or from a Financial Instrument.
	//
	// A Transfer can be
	// - a debit from a payment card
	// - a credit to a bank account
	// - a reversal of another transfer.
	//
	// Each type is represented by the `type` field
	Data Transfer `json:"data"`
}

// TransferDateOperator defines model for TransferDateOperator.
type TransferDateOperator struct {
	// Embedded struct due to allOf(#/components/schemas/DateOperator)
	DateOperator `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field TransferDateOperatorField `json:"field"`
}

// TransferDateOperatorField defines model for TransferDateOperator.Field.
type TransferDateOperatorField string

// TransferError defines model for TransferError.
type TransferError struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Application-specific error code:
	//   * `invalid-amount` - The provided amount is not in valid range or missing
	//   * `financial-instrument-not-found` - Specified financial instrument could no be found
	//   * `gateway-not-found` - Gateway not found
	//   * `blocked-by-rule` - Blocked by a rule
	//   * `jwt-token-already-used` - JWT token has been already used
	//   * `missing-jwt-token` - JWT token is missing in the request
	//   * `currency-conflicts-during-retry-attempts` - Currency value changed during retry attempts
	//   * `invalid-transfer-type` - The transfer type is invalid for the operation
	//   * `invalid-transfer-state` - The transfer state is invalid for the operation
	//   * `insufficient-transfer-amount` - The transfer doesn't have enough amount for the operation
	//   * `order-not-found` - No order found for specified order_id
	Code *TransferErrorCode `json:"code,omitempty"`
}

// Application-specific error code:
//   * `invalid-amount` - The provided amount is not in valid range or missing
//   * `financial-instrument-not-found` - Specified financial instrument could no be found
//   * `gateway-not-found` - Gateway not found
//   * `blocked-by-rule` - Blocked by a rule
//   * `jwt-token-already-used` - JWT token has been already used
//   * `missing-jwt-token` - JWT token is missing in the request
//   * `currency-conflicts-during-retry-attempts` - Currency value changed during retry attempts
//   * `invalid-transfer-type` - The transfer type is invalid for the operation
//   * `invalid-transfer-state` - The transfer state is invalid for the operation
//   * `insufficient-transfer-amount` - The transfer doesn't have enough amount for the operation
//   * `order-not-found` - No order found for specified order_id
type TransferErrorCode string

// TransferFilter defines model for TransferFilter.
type TransferFilter []TransferFilteringOperator

// TransferFilteringOperator defines model for TransferFilteringOperator.
type TransferFilteringOperator interface{}

// TransferFinancialInstrumentIdOperator defines model for TransferFinancialInstrumentIdOperator.
type TransferFinancialInstrumentIdOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field TransferFinancialInstrumentIdOperatorField `json:"field"`
}

// TransferFinancialInstrumentIdOperatorField defines model for TransferFinancialInstrumentIdOperator.Field.
type TransferFinancialInstrumentIdOperatorField string

// Gateway-specific response data, taken directly from the PSP's reply.
type TransferGatewayResponse struct {
	// Error type from the PSP's API in case something went wrong.
	ErrorCode *string `json:"error_code,omitempty"`

	// Unique reference identifier for this record in PSP's system.
	Id string `json:"id"`

	// Response message from the PSP's API.
	Message string `json:"message"`

	// Full response object from the Gateway's API.
	RawResponse string `json:"raw_response"`

	// Codified value allowing programmatic interpretation of PSP response.
	//
	// - `error` - Occurs when gateway returns a 5xx.
	// - `timeout` - Network error connecting to gateway.
	State TransferGatewayResponseState `json:"state"`
}

// Codified value allowing programmatic interpretation of PSP response.
//
// - `error` - Occurs when gateway returns a 5xx.
// - `timeout` - Network error connecting to gateway.
type TransferGatewayResponseState string

// TransferIdMemberOperator defines model for TransferIdMemberOperator.
type TransferIdMemberOperator struct {
	Op     TransferIdMemberOperatorOp `json:"op"`
	Values []string                   `json:"values"`
}

// TransferIdMemberOperatorOp defines model for TransferIdMemberOperator.Op.
type TransferIdMemberOperatorOp string

// TransferIdOperator defines model for TransferIdOperator.
type TransferIdOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field TransferIdOperatorField `json:"field"`
}

// TransferIdOperatorField defines model for TransferIdOperator.Field.
type TransferIdOperatorField string

// TransferIdValueOperator defines model for TransferIdValueOperator.
type TransferIdValueOperator struct {
	Op TransferIdValueOperatorOp `json:"op"`

	// ID of a transfer
	Value string `json:"value"`
}

// TransferIdValueOperatorOp defines model for TransferIdValueOperator.Op.
type TransferIdValueOperatorOp string

// TransferIntegerOperator defines model for TransferIntegerOperator.
type TransferIntegerOperator struct {
	// Embedded struct due to allOf(#/components/schemas/IntegerOperator)
	IntegerOperator `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field TransferIntegerOperatorField `json:"field"`
}

// TransferIntegerOperatorField defines model for TransferIntegerOperator.Field.
type TransferIntegerOperatorField string

// TransferJSONOperator defines model for TransferJSONOperator.
type TransferJSONOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field TransferJSONOperatorField `json:"field"`
}

// TransferJSONOperatorField defines model for TransferJSONOperator.Field.
type TransferJSONOperatorField string

// TransferListData defines model for TransferListData.
type TransferListData struct {
	Data  []Transfer `json:"data"`
	Links struct {
		// The first page of data.
		First string `json:"first"`

		// The last page of data.
		Last string `json:"last"`

		// The next page of data.
		Next *string `json:"next,omitempty"`

		// The previous page of data.
		Prev *string `json:"prev,omitempty"`

		// The current page of data.
		Self string `json:"self"`
	} `json:"links"`
	Meta struct {
		// Total number of transfers.
		TotalElements *int `json:"total_elements,omitempty"`

		// Total number of pages.
		TotalPages *int `json:"total_pages,omitempty"`
	} `json:"meta"`
}

// TransferNotOperator defines model for TransferNotOperator.
type TransferNotOperator struct {
	Op TransferNotOperatorOp `json:"op"`

	// A TransferFilteringOperator object (recursive)
	Value map[string]interface{} `json:"value"`
}

// TransferNotOperatorOp defines model for TransferNotOperator.Op.
type TransferNotOperatorOp string

// TransferSorting defines model for TransferSorting.
type TransferSorting []TransferSortingSpec

// TransferSortingSpec defines model for TransferSortingSpec.
type TransferSortingSpec struct {
	// Embedded struct due to allOf(#/components/schemas/SortingSpec)
	SortingSpec `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Field TransferSortingSpecField `json:"field"`
}

// TransferSortingSpecField defines model for TransferSortingSpec.Field.
type TransferSortingSpecField string

// TransferStateMemberOperator defines model for TransferStateMemberOperator.
type TransferStateMemberOperator struct {
	Op     TransferStateMemberOperatorOp       `json:"op"`
	Values []TransferStateMemberOperatorValues `json:"values"`
}

// TransferStateMemberOperatorOp defines model for TransferStateMemberOperator.Op.
type TransferStateMemberOperatorOp string

// TransferStateMemberOperatorValues defines model for TransferStateMemberOperator.Values.
type TransferStateMemberOperatorValues string

// TransferStateOperator defines model for TransferStateOperator.
type TransferStateOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field TransferStateOperatorField `json:"field"`
}

// TransferStateOperatorField defines model for TransferStateOperator.Field.
type TransferStateOperatorField string

// TransferStateValueOperator defines model for TransferStateValueOperator.
type TransferStateValueOperator struct {
	Op    TransferStateValueOperatorOp    `json:"op"`
	Value TransferStateValueOperatorValue `json:"value"`
}

// TransferStateValueOperatorOp defines model for TransferStateValueOperator.Op.
type TransferStateValueOperatorOp string

// TransferStateValueOperatorValue defines model for TransferStateValueOperator.Value.
type TransferStateValueOperatorValue string

// TransferStringOperator defines model for TransferStringOperator.
type TransferStringOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field TransferStringOperatorField `json:"field"`
}

// TransferStringOperatorField defines model for TransferStringOperator.Field.
type TransferStringOperatorField string

// TransferTypeMemberOperator defines model for TransferTypeMemberOperator.
type TransferTypeMemberOperator struct {
	Op     TransferTypeMemberOperatorOp       `json:"op"`
	Values []TransferTypeMemberOperatorValues `json:"values"`
}

// TransferTypeMemberOperatorOp defines model for TransferTypeMemberOperator.Op.
type TransferTypeMemberOperatorOp string

// TransferTypeMemberOperatorValues defines model for TransferTypeMemberOperator.Values.
type TransferTypeMemberOperatorValues string

// TransferTypeOperator defines model for TransferTypeOperator.
type TransferTypeOperator struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Field TransferTypeOperatorField `json:"field"`
}

// TransferTypeOperatorField defines model for TransferTypeOperator.Field.
type TransferTypeOperatorField string

// TransferTypeValueOperator defines model for TransferTypeValueOperator.
type TransferTypeValueOperator struct {
	Op    TransferTypeValueOperatorOp    `json:"op"`
	Value TransferTypeValueOperatorValue `json:"value"`
}

// TransferTypeValueOperatorOp defines model for TransferTypeValueOperator.Op.
type TransferTypeValueOperatorOp string

// TransferTypeValueOperatorValue defines model for TransferTypeValueOperator.Value.
type TransferTypeValueOperatorValue string

// TransferUpdate defines model for TransferUpdate.
type TransferUpdate struct {
	// - `capture` - means move transfer to it's final state, and transfer the funds from customer's bank account to the merchant.
	// - `cancel` - means nullify the transfer, releasing funds previously reserved with customer's bank.
	Action TransferUpdateAction `json:"action"`

	// Amount intended to be collected by this payment. A positive integer representing how much to
	// charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100,
	// a zero-decimal currency).
	Amount *Amount `json:"amount,omitempty"`

	// Gateway-specific options object, that nevertheless has some standard keys - 'currency', 'billing_address' and 'shipping_address'.
	//
	// Beyond the standard keys, optional additional information can be included, like 'order_id', 'invoice', 'email', or any other custom keys specified by the caller.
	GatewayOptions *GatewayOptions `json:"gateway_options,omitempty"`
}

// - `capture` - means move transfer to it's final state, and transfer the funds from customer's bank account to the merchant.
// - `cancel` - means nullify the transfer, releasing funds previously reserved with customer's bank.
type TransferUpdateAction string

// TransfersApiErrors defines model for TransfersApiErrors.
type TransfersApiErrors struct {
	Errors []interface{} `json:"errors"`

	// A unique identifier of the failed request.
	TraceId *string `json:"trace_id,omitempty"`
}

// Verification defines model for Verification.
type Verification struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentCardCreate)
	PaymentCardCreate `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Gateway-specific options object, that nevertheless has some standard keys - 'currency', 'billing_address' and 'shipping_address'.
	//
	// Beyond the standard keys, optional additional information can be included, like 'order_id', 'invoice', 'email', or any other custom keys specified by the caller.
	GatewayOptions *GatewayOptions `json:"gateway_options,omitempty"`
}

// VerificationData defines model for VerificationData.
type VerificationData struct {
	// A Verification transfer represents an artificial transfer used to validate financial instruments.
	// Typically a zero dollar auth is used for this purpose.
	Data VerificationTransfer `json:"data"`
}

// A Verification transfer represents an artificial transfer used to validate financial instruments.
// Typically a zero dollar auth is used for this purpose.
type VerificationTransfer struct {
	// Amount used to verify a financial instrument
	Amount int `json:"amount"`

	// Address Verification Service result if available. The combination of `code` and `message` could be one of
	//
	// - A : Street address matches, but postal code does not match.
	// - B : Street address matches, but postal code not verified.
	// - C : Street address and postal code do not match.
	// - D : Street address and postal code match.
	// - E : AVS data is invalid or AVS is not allowed for this card type.
	// - F : Card member's name does not match, but billing postal code matches.
	// - G : Non-U.S. issuing bank does not support AVS.
	// - H : Card member's name does not match. Street address and postal code match.
	// - I : Address not verified.
	// - J : Card member's name, billing address, and postal code match. Shipping information verified and chargeback protection guaranteed through the Fraud Protection Program.
	// - K : Card member's name matches but billing address and billing postal code do not match.
	// - L : Card member's name and billing postal code match, but billing address does not match.
	// - M : Street address and postal code match.
	// - N : Street address and postal code do not match. For American Express: Card member's name, street address and postal code do not match.
	// - O : Card member's name and billing address match, but billing postal code does not match.
	// - P : Postal code matches, but street address not verified.
	// - Q : Card member's name, billing address, and postal code match. Shipping information verified but chargeback protection not guaranteed.
	// - R : System unavailable.
	// - S : U.S.-issuing bank does not support AVS.
	// - T : Card member's name does not match, but street address matches.
	// - U : Address information unavailable.
	// - V : Card member's name, billing address, and billing postal code match.
	// - W : Street address does not match, but 9-digit postal code matches.
	// - X : Street address and 9-digit postal code match.
	// - Y : Street address and 5-digit postal code match.
	// - Z : Street address does not match, but 5-digit postal code matches.
	//
	// Please notice, some PSP may return different `code` and `message` values not listed above
	AvsResult *AVSResult `json:"avs_result"`

	// Creation time, in UTC.
	CreatedAt time.Time `json:"created_at"`

	// ISO 4217 currency code for this transaction. If not supplied based on default of gateway.
	Currency *string `json:"currency"`

	// Destination for funds.
	//
	// Populated for reversals
	Destination *string `json:"destination"`

	// The total amount that will be debited in cents (e.g. 100 cents to debit $1.00)
	// This amount cannot be greater than the `amount`.
	Fee *int `json:"fee,omitempty"`

	// An id of an existing merchant gateway record within payment orchestration.
	Gateway Gateway `json:"gateway"`

	// Gateway-specific response data, taken directly from the PSP's reply.
	GatewayResponse TransferGatewayResponse `json:"gateway_response"`

	// Unique reference identifier for this verification
	Id string `json:"id"`

	// Where funds are drawn from.
	Source *string `json:"source"`

	// 'successful' means that financial instrument was successfully verified
	//
	// 'failed' occurs when the verification fails
	State VerificationTransferState `json:"state"`
	Type  VerificationTransferType  `json:"type"`

	// Last time transfer was updated, in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// 'successful' means that financial instrument was successfully verified
//
// 'failed' occurs when the verification fails
type VerificationTransferState string

// VerificationTransferType defines model for VerificationTransfer.Type.
type VerificationTransferType string

// N3dsAuthenticationId defines model for 3ds_authentication_id.
type N3dsAuthenticationId string

// FinancialInstrumentId defines model for financial_instrument_id.
type FinancialInstrumentId string

// GatewayId defines model for gateway_id.
type GatewayId string

// Limit defines model for limit.
type Limit int

// OrderId defines model for order_id.
type OrderId string

// Page defines model for page.
type Page int

// RuleId defines model for rule_id.
type RuleId string

// TransferId defines model for transfer_id.
type TransferId string

// ApiErrorsResponse defines model for ApiErrorsResponse.
type ApiErrorsResponse ApiError

// FinancialInstrumentApiErrorsResponse defines model for FinancialInstrumentApiErrorsResponse.
type FinancialInstrumentApiErrorsResponse FinancialInstrumentApiErrors

// FinancialInstrumentListDataResponse defines model for FinancialInstrumentListDataResponse.
type FinancialInstrumentListDataResponse FinancialInstrumentListData

// FinancialInstrumentResponse defines model for FinancialInstrumentResponse.
type FinancialInstrumentResponse FinancialInstrument

// GatewayDataResponse defines model for GatewayDataResponse.
type GatewayDataResponse GatewayData

// GatewayListDataResponse defines model for GatewayListDataResponse.
type GatewayListDataResponse GatewayListData

// GatewaysApiErrorsResponse defines model for GatewaysApiErrorsResponse.
type GatewaysApiErrorsResponse GatewaysApiErrors

// OrderApiErrorsResponse defines model for OrderApiErrorsResponse.
type OrderApiErrorsResponse OrderApiErrors

// OrderDataResponse defines model for OrderDataResponse.
type OrderDataResponse OrderData

// RuleListDataResponse defines model for RuleListDataResponse.
type RuleListDataResponse RuleListData

// RuleResponse defines model for RuleResponse.
type RuleResponse RuleData

// RulesApiErrorsResponse defines model for RulesApiErrorsResponse.
type RulesApiErrorsResponse RulesApiErrors

// ThreeDSAuthenticationDataResponse defines model for ThreeDSAuthenticationDataResponse.
type ThreeDSAuthenticationDataResponse ThreeDSAuthenticationData

// ThreeDSProviderApiErrorsResponse defines model for ThreeDSProviderApiErrorsResponse.
type ThreeDSProviderApiErrorsResponse ThreeDSProviderApiErrors

// ThreeDSProviderDataResponse defines model for ThreeDSProviderDataResponse.
type ThreeDSProviderDataResponse ThreeDSProviderData

// TransferDataResponse defines model for TransferDataResponse.
type TransferDataResponse TransferData

// TransferListDataResponse defines model for TransferListDataResponse.
type TransferListDataResponse TransferListData

// TransfersApiErrorsResponse defines model for TransfersApiErrorsResponse.
type TransfersApiErrorsResponse TransfersApiErrors

// VerificationTransferResponse defines model for VerificationTransferResponse.
type VerificationTransferResponse VerificationData

// FinancialInstrumentCreateRequest defines model for FinancialInstrumentCreateRequest.
type FinancialInstrumentCreateRequest interface{}

// GatewayCreateRequest defines model for GatewayCreateRequest.
type GatewayCreateRequest GatewayCreate

// GatewayUpdateRequest defines model for GatewayUpdateRequest.
type GatewayUpdateRequest GatewayUpdate

// OrderCreateRequest defines model for OrderCreateRequest.
type OrderCreateRequest OrderCreate

// ReversalRequest defines model for ReversalRequest.
type ReversalRequest Reversal

// RuleCreateRequest defines model for RuleCreateRequest.
type RuleCreateRequest RuleCreate

// RuleUpdateRequest defines model for RuleUpdateRequest.
type RuleUpdateRequest RuleUpdate

// Arbitrary JSON payload passed from the 3DS provider via post message notification page to VGS checkout.js
type ThreeDSAuthenticationArbitraryJSONRequest map[string]interface{}

// ThreeDSAuthenticationRequest defines model for ThreeDSAuthenticationRequest.
type ThreeDSAuthenticationRequest ThreeDSAuthenticationCreate

// ThreeDSProviderRequest defines model for ThreeDSProviderRequest.
type ThreeDSProviderRequest ThreeDSProviderCreate

// TransferCreateRequest defines model for TransferCreateRequest.
type TransferCreateRequest interface{}

// TransferUpdateRequest defines model for TransferUpdateRequest.
type TransferUpdateRequest TransferUpdate

// VerificationRequest defines model for VerificationRequest.
type VerificationRequest Verification

// GetFinancialInstrumentsParams defines parameters for GetFinancialInstruments.
type GetFinancialInstrumentsParams struct {
	// Zero-based page number.
	Page *Page `json:"page,omitempty"`

	// Amount of items per page.
	Limit *Limit `json:"limit,omitempty"`

	// Conditions for filtering financial instrument results as a JSON payload.
	Filter *FinancialInstrumentFilter `json:"filter,omitempty"`

	// Specs for sorting financial instrument results as a JSON payload.
	Sort *FinancialInstrumentSorting `json:"sort,omitempty"`
}

// GetGatewaysParams defines parameters for GetGateways.
type GetGatewaysParams struct {
	// Zero-based page number.
	Page *Page `json:"page,omitempty"`

	// Amount of items per page.
	Limit *Limit `json:"limit,omitempty"`

	// Conditions for filtering gateway results as a JSON payload.
	Filter *GatewayFilter `json:"filter,omitempty"`

	// Specs for sorting gateway results as a JSON payload.
	Sort *GatewaySorting `json:"sort,omitempty"`
}

// GetRulesParams defines parameters for GetRules.
type GetRulesParams struct {
	// Zero-based page number.
	Page *Page `json:"page,omitempty"`

	// Amount of items per page.
	Limit *Limit `json:"limit,omitempty"`

	// Conditions for filtering rule results as a JSON payload.
	Filter *RuleFilter `json:"filter,omitempty"`

	// Specs for sorting rule results as a JSON payload.
	Sort *RuleSorting `json:"sort,omitempty"`
}

// GetTransfersParams defines parameters for GetTransfers.
type GetTransfersParams struct {
	// Zero-based page number.
	Page *Page `json:"page,omitempty"`

	// Amount of items per page.
	Limit *Limit `json:"limit,omitempty"`

	// Conditions for filtering transfer results as a JSON payload.
	Filter *TransferFilter `json:"filter,omitempty"`

	// Specs for sorting transfer results as a JSON payload.
	Sort *TransferSorting `json:"sort,omitempty"`
}

// CreateThreeDSAuthenticationJSONRequestBody defines body for CreateThreeDSAuthentication for application/json ContentType.
type CreateThreeDSAuthenticationJSONRequestBody ThreeDSAuthenticationRequest

// ThreeDSAuthenticationChallengeJSONRequestBody defines body for ThreeDSAuthenticationChallenge for application/json ContentType.
type ThreeDSAuthenticationChallengeJSONRequestBody ThreeDSAuthenticationArbitraryJSONRequest

// ThreeDSAuthenticationDeviceFingerprintJSONRequestBody defines body for ThreeDSAuthenticationDeviceFingerprint for application/json ContentType.
type ThreeDSAuthenticationDeviceFingerprintJSONRequestBody ThreeDSAuthenticationArbitraryJSONRequest

// CreateThreeDSProviderJSONRequestBody defines body for CreateThreeDSProvider for application/json ContentType.
type CreateThreeDSProviderJSONRequestBody ThreeDSProviderRequest

// CreateFinancialInstrumentJSONRequestBody defines body for CreateFinancialInstrument for application/json ContentType.
type CreateFinancialInstrumentJSONRequestBody FinancialInstrumentCreateRequest

// CreateGatewayJSONRequestBody defines body for CreateGateway for application/json ContentType.
type CreateGatewayJSONRequestBody GatewayCreateRequest

// UpdateGatewayByIdJSONRequestBody defines body for UpdateGatewayById for application/json ContentType.
type UpdateGatewayByIdJSONRequestBody GatewayUpdateRequest

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody OrderCreateRequest

// CreateRuleJSONRequestBody defines body for CreateRule for application/json ContentType.
type CreateRuleJSONRequestBody RuleCreateRequest

// UpdateRuleByIdJSONRequestBody defines body for UpdateRuleById for application/json ContentType.
type UpdateRuleByIdJSONRequestBody RuleUpdateRequest

// CreateTransferJSONRequestBody defines body for CreateTransfer for application/json ContentType.
type CreateTransferJSONRequestBody TransferCreateRequest

// FinalizeTransferJSONRequestBody defines body for FinalizeTransfer for application/json ContentType.
type FinalizeTransferJSONRequestBody TransferUpdateRequest

// ReverseTransferByIdJSONRequestBody defines body for ReverseTransferById for application/json ContentType.
type ReverseTransferByIdJSONRequestBody ReversalRequest

// CreateVerificationJSONRequestBody defines body for CreateVerification for application/json ContentType.
type CreateVerificationJSONRequestBody VerificationRequest

// Getter for additional properties for GatewayOptions. Returns the specified
// element and whether it was found
func (a GatewayOptions) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GatewayOptions
func (a *GatewayOptions) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GatewayOptions to handle AdditionalProperties
func (a *GatewayOptions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["currency"]; found {
		err = json.Unmarshal(raw, &a.Currency)
		if err != nil {
			return fmt.Errorf("error reading 'currency': %w", err)
		}
		delete(object, "currency")
	}

	if raw, found := object["shipping_address"]; found {
		err = json.Unmarshal(raw, &a.ShippingAddress)
		if err != nil {
			return fmt.Errorf("error reading 'shipping_address': %w", err)
		}
		delete(object, "shipping_address")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GatewayOptions to handle AdditionalProperties
func (a GatewayOptions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Currency != nil {
		object["currency"], err = json.Marshal(a.Currency)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currency': %w", err)
		}
	}

	if a.ShippingAddress != nil {
		object["shipping_address"], err = json.Marshal(a.ShippingAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'shipping_address': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateThreeDSAuthentication request with any body
	CreateThreeDSAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateThreeDSAuthentication(ctx context.Context, body CreateThreeDSAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreeDSAuthenticationChallenge request with any body
	ThreeDSAuthenticationChallengeWithBody(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreeDSAuthenticationChallenge(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreeDSAuthenticationDeviceFingerprint request with any body
	ThreeDSAuthenticationDeviceFingerprintWithBody(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThreeDSAuthenticationDeviceFingerprint(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationDeviceFingerprintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThreeDSAuthenticationNotifications request with any body
	ThreeDSAuthenticationNotificationsWithBody(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateThreeDSProvider request with any body
	CreateThreeDSProviderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateThreeDSProvider(ctx context.Context, body CreateThreeDSProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFinancialInstruments request
	GetFinancialInstruments(ctx context.Context, params *GetFinancialInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFinancialInstrument request with any body
	CreateFinancialInstrumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFinancialInstrument(ctx context.Context, body CreateFinancialInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFinancialInstrumentById request
	DeleteFinancialInstrumentById(ctx context.Context, financialInstrumentId FinancialInstrumentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFinancialInstrumentById request
	GetFinancialInstrumentById(ctx context.Context, financialInstrumentId FinancialInstrumentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGateways request
	GetGateways(ctx context.Context, params *GetGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGateway request with any body
	CreateGatewayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGateway(ctx context.Context, body CreateGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGateway request
	DeleteGateway(ctx context.Context, gatewayId GatewayId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayById request
	GetGatewayById(ctx context.Context, gatewayId GatewayId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGatewayById request with any body
	UpdateGatewayByIdWithBody(ctx context.Context, gatewayId GatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGatewayById(ctx context.Context, gatewayId GatewayId, body UpdateGatewayByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrder request with any body
	CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrdersOrderId request
	GetOrdersOrderId(ctx context.Context, orderId OrderId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRules request
	GetRules(ctx context.Context, params *GetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRule request with any body
	CreateRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRule(ctx context.Context, body CreateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRule request
	DeleteRule(ctx context.Context, ruleId RuleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRuleById request
	GetRuleById(ctx context.Context, ruleId RuleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRuleById request with any body
	UpdateRuleByIdWithBody(ctx context.Context, ruleId RuleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRuleById(ctx context.Context, ruleId RuleId, body UpdateRuleByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransfers request
	GetTransfers(ctx context.Context, params *GetTransfersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTransfer request with any body
	CreateTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTransfer(ctx context.Context, body CreateTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransferById request
	GetTransferById(ctx context.Context, transferId TransferId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FinalizeTransfer request with any body
	FinalizeTransferWithBody(ctx context.Context, transferId TransferId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FinalizeTransfer(ctx context.Context, transferId TransferId, body FinalizeTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReverseTransferById request with any body
	ReverseTransferByIdWithBody(ctx context.Context, transferId TransferId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReverseTransferById(ctx context.Context, transferId TransferId, body ReverseTransferByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVerification request with any body
	CreateVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVerification(ctx context.Context, body CreateVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateThreeDSAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreeDSAuthenticationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThreeDSAuthentication(ctx context.Context, body CreateThreeDSAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreeDSAuthenticationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreeDSAuthenticationChallengeWithBody(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreeDSAuthenticationChallengeRequestWithBody(c.Server, n3dsAuthenticationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreeDSAuthenticationChallenge(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreeDSAuthenticationChallengeRequest(c.Server, n3dsAuthenticationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreeDSAuthenticationDeviceFingerprintWithBody(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreeDSAuthenticationDeviceFingerprintRequestWithBody(c.Server, n3dsAuthenticationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreeDSAuthenticationDeviceFingerprint(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationDeviceFingerprintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreeDSAuthenticationDeviceFingerprintRequest(c.Server, n3dsAuthenticationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThreeDSAuthenticationNotificationsWithBody(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThreeDSAuthenticationNotificationsRequestWithBody(c.Server, n3dsAuthenticationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThreeDSProviderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreeDSProviderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThreeDSProvider(ctx context.Context, body CreateThreeDSProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreeDSProviderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFinancialInstruments(ctx context.Context, params *GetFinancialInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFinancialInstrumentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFinancialInstrumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFinancialInstrumentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFinancialInstrument(ctx context.Context, body CreateFinancialInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFinancialInstrumentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFinancialInstrumentById(ctx context.Context, financialInstrumentId FinancialInstrumentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFinancialInstrumentByIdRequest(c.Server, financialInstrumentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFinancialInstrumentById(ctx context.Context, financialInstrumentId FinancialInstrumentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFinancialInstrumentByIdRequest(c.Server, financialInstrumentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGateways(ctx context.Context, params *GetGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGatewayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGatewayRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGateway(ctx context.Context, body CreateGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGatewayRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGateway(ctx context.Context, gatewayId GatewayId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayRequest(c.Server, gatewayId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayById(ctx context.Context, gatewayId GatewayId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayByIdRequest(c.Server, gatewayId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGatewayByIdWithBody(ctx context.Context, gatewayId GatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGatewayByIdRequestWithBody(c.Server, gatewayId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGatewayById(ctx context.Context, gatewayId GatewayId, body UpdateGatewayByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGatewayByIdRequest(c.Server, gatewayId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrdersOrderId(ctx context.Context, orderId OrderId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersOrderIdRequest(c.Server, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRules(ctx context.Context, params *GetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRule(ctx context.Context, body CreateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRule(ctx context.Context, ruleId RuleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRuleRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRuleById(ctx context.Context, ruleId RuleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRuleByIdRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRuleByIdWithBody(ctx context.Context, ruleId RuleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRuleByIdRequestWithBody(c.Server, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRuleById(ctx context.Context, ruleId RuleId, body UpdateRuleByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRuleByIdRequest(c.Server, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransfers(ctx context.Context, params *GetTransfersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransfersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTransferRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTransfer(ctx context.Context, body CreateTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTransferRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransferById(ctx context.Context, transferId TransferId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransferByIdRequest(c.Server, transferId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinalizeTransferWithBody(ctx context.Context, transferId TransferId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinalizeTransferRequestWithBody(c.Server, transferId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinalizeTransfer(ctx context.Context, transferId TransferId, body FinalizeTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinalizeTransferRequest(c.Server, transferId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReverseTransferByIdWithBody(ctx context.Context, transferId TransferId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReverseTransferByIdRequestWithBody(c.Server, transferId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReverseTransferById(ctx context.Context, transferId TransferId, body ReverseTransferByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReverseTransferByIdRequest(c.Server, transferId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerification(ctx context.Context, body CreateVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateThreeDSAuthenticationRequest calls the generic CreateThreeDSAuthentication builder with application/json body
func NewCreateThreeDSAuthenticationRequest(server string, body CreateThreeDSAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateThreeDSAuthenticationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateThreeDSAuthenticationRequestWithBody generates requests for CreateThreeDSAuthentication with any type of body
func NewCreateThreeDSAuthenticationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/3ds_authentications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewThreeDSAuthenticationChallengeRequest calls the generic ThreeDSAuthenticationChallenge builder with application/json body
func NewThreeDSAuthenticationChallengeRequest(server string, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationChallengeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewThreeDSAuthenticationChallengeRequestWithBody(server, n3dsAuthenticationId, "application/json", bodyReader)
}

// NewThreeDSAuthenticationChallengeRequestWithBody generates requests for ThreeDSAuthenticationChallenge with any type of body
func NewThreeDSAuthenticationChallengeRequestWithBody(server string, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "3ds_authentication_id", runtime.ParamLocationPath, n3dsAuthenticationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/3ds_authentications/%s/challenges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewThreeDSAuthenticationDeviceFingerprintRequest calls the generic ThreeDSAuthenticationDeviceFingerprint builder with application/json body
func NewThreeDSAuthenticationDeviceFingerprintRequest(server string, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationDeviceFingerprintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewThreeDSAuthenticationDeviceFingerprintRequestWithBody(server, n3dsAuthenticationId, "application/json", bodyReader)
}

// NewThreeDSAuthenticationDeviceFingerprintRequestWithBody generates requests for ThreeDSAuthenticationDeviceFingerprint with any type of body
func NewThreeDSAuthenticationDeviceFingerprintRequestWithBody(server string, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "3ds_authentication_id", runtime.ParamLocationPath, n3dsAuthenticationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/3ds_authentications/%s/fingerprints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewThreeDSAuthenticationNotificationsRequestWithBody generates requests for ThreeDSAuthenticationNotifications with any type of body
func NewThreeDSAuthenticationNotificationsRequestWithBody(server string, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "3ds_authentication_id", runtime.ParamLocationPath, n3dsAuthenticationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/3ds_authentications/%s/notifications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateThreeDSProviderRequest calls the generic CreateThreeDSProvider builder with application/json body
func NewCreateThreeDSProviderRequest(server string, body CreateThreeDSProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateThreeDSProviderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateThreeDSProviderRequestWithBody generates requests for CreateThreeDSProvider with any type of body
func NewCreateThreeDSProviderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/3ds_providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFinancialInstrumentsRequest generates requests for GetFinancialInstruments
func NewGetFinancialInstrumentsRequest(server string, params *GetFinancialInstrumentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/financial_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFinancialInstrumentRequest calls the generic CreateFinancialInstrument builder with application/json body
func NewCreateFinancialInstrumentRequest(server string, body CreateFinancialInstrumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFinancialInstrumentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFinancialInstrumentRequestWithBody generates requests for CreateFinancialInstrument with any type of body
func NewCreateFinancialInstrumentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/financial_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFinancialInstrumentByIdRequest generates requests for DeleteFinancialInstrumentById
func NewDeleteFinancialInstrumentByIdRequest(server string, financialInstrumentId FinancialInstrumentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "financial_instrument_id", runtime.ParamLocationPath, financialInstrumentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/financial_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFinancialInstrumentByIdRequest generates requests for GetFinancialInstrumentById
func NewGetFinancialInstrumentByIdRequest(server string, financialInstrumentId FinancialInstrumentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "financial_instrument_id", runtime.ParamLocationPath, financialInstrumentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/financial_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaysRequest generates requests for GetGateways
func NewGetGatewaysRequest(server string, params *GetGatewaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGatewayRequest calls the generic CreateGateway builder with application/json body
func NewCreateGatewayRequest(server string, body CreateGatewayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGatewayRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGatewayRequestWithBody generates requests for CreateGateway with any type of body
func NewCreateGatewayRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGatewayRequest generates requests for DeleteGateway
func NewDeleteGatewayRequest(server string, gatewayId GatewayId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gateway_id", runtime.ParamLocationPath, gatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayByIdRequest generates requests for GetGatewayById
func NewGetGatewayByIdRequest(server string, gatewayId GatewayId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gateway_id", runtime.ParamLocationPath, gatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGatewayByIdRequest calls the generic UpdateGatewayById builder with application/json body
func NewUpdateGatewayByIdRequest(server string, gatewayId GatewayId, body UpdateGatewayByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGatewayByIdRequestWithBody(server, gatewayId, "application/json", bodyReader)
}

// NewUpdateGatewayByIdRequestWithBody generates requests for UpdateGatewayById with any type of body
func NewUpdateGatewayByIdRequestWithBody(server string, gatewayId GatewayId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gateway_id", runtime.ParamLocationPath, gatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrderRequest calls the generic CreateOrder builder with application/json body
func NewCreateOrderRequest(server string, body CreateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrderRequestWithBody generates requests for CreateOrder with any type of body
func NewCreateOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrdersOrderIdRequest generates requests for GetOrdersOrderId
func NewGetOrdersOrderIdRequest(server string, orderId OrderId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "order_id", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRulesRequest generates requests for GetRules
func NewGetRulesRequest(server string, params *GetRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRuleRequest calls the generic CreateRule builder with application/json body
func NewCreateRuleRequest(server string, body CreateRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRuleRequestWithBody generates requests for CreateRule with any type of body
func NewCreateRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRuleRequest generates requests for DeleteRule
func NewDeleteRuleRequest(server string, ruleId RuleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRuleByIdRequest generates requests for GetRuleById
func NewGetRuleByIdRequest(server string, ruleId RuleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRuleByIdRequest calls the generic UpdateRuleById builder with application/json body
func NewUpdateRuleByIdRequest(server string, ruleId RuleId, body UpdateRuleByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRuleByIdRequestWithBody(server, ruleId, "application/json", bodyReader)
}

// NewUpdateRuleByIdRequestWithBody generates requests for UpdateRuleById with any type of body
func NewUpdateRuleByIdRequestWithBody(server string, ruleId RuleId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTransfersRequest generates requests for GetTransfers
func NewGetTransfersRequest(server string, params *GetTransfersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transfers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTransferRequest calls the generic CreateTransfer builder with application/json body
func NewCreateTransferRequest(server string, body CreateTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTransferRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTransferRequestWithBody generates requests for CreateTransfer with any type of body
func NewCreateTransferRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transfers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTransferByIdRequest generates requests for GetTransferById
func NewGetTransferByIdRequest(server string, transferId TransferId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transfer_id", runtime.ParamLocationPath, transferId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transfers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFinalizeTransferRequest calls the generic FinalizeTransfer builder with application/json body
func NewFinalizeTransferRequest(server string, transferId TransferId, body FinalizeTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFinalizeTransferRequestWithBody(server, transferId, "application/json", bodyReader)
}

// NewFinalizeTransferRequestWithBody generates requests for FinalizeTransfer with any type of body
func NewFinalizeTransferRequestWithBody(server string, transferId TransferId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transfer_id", runtime.ParamLocationPath, transferId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transfers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReverseTransferByIdRequest calls the generic ReverseTransferById builder with application/json body
func NewReverseTransferByIdRequest(server string, transferId TransferId, body ReverseTransferByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReverseTransferByIdRequestWithBody(server, transferId, "application/json", bodyReader)
}

// NewReverseTransferByIdRequestWithBody generates requests for ReverseTransferById with any type of body
func NewReverseTransferByIdRequestWithBody(server string, transferId TransferId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transfer_id", runtime.ParamLocationPath, transferId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transfers/%s/reversals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVerificationRequest calls the generic CreateVerification builder with application/json body
func NewCreateVerificationRequest(server string, body CreateVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVerificationRequestWithBody generates requests for CreateVerification with any type of body
func NewCreateVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateThreeDSAuthentication request with any body
	CreateThreeDSAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreeDSAuthenticationResponse, error)

	CreateThreeDSAuthenticationWithResponse(ctx context.Context, body CreateThreeDSAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreeDSAuthenticationResponse, error)

	// ThreeDSAuthenticationChallenge request with any body
	ThreeDSAuthenticationChallengeWithBodyWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationChallengeResponse, error)

	ThreeDSAuthenticationChallengeWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationChallengeResponse, error)

	// ThreeDSAuthenticationDeviceFingerprint request with any body
	ThreeDSAuthenticationDeviceFingerprintWithBodyWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationDeviceFingerprintResponse, error)

	ThreeDSAuthenticationDeviceFingerprintWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationDeviceFingerprintJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationDeviceFingerprintResponse, error)

	// ThreeDSAuthenticationNotifications request with any body
	ThreeDSAuthenticationNotificationsWithBodyWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationNotificationsResponse, error)

	// CreateThreeDSProvider request with any body
	CreateThreeDSProviderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreeDSProviderResponse, error)

	CreateThreeDSProviderWithResponse(ctx context.Context, body CreateThreeDSProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreeDSProviderResponse, error)

	// GetFinancialInstruments request
	GetFinancialInstrumentsWithResponse(ctx context.Context, params *GetFinancialInstrumentsParams, reqEditors ...RequestEditorFn) (*GetFinancialInstrumentsResponse, error)

	// CreateFinancialInstrument request with any body
	CreateFinancialInstrumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFinancialInstrumentResponse, error)

	CreateFinancialInstrumentWithResponse(ctx context.Context, body CreateFinancialInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFinancialInstrumentResponse, error)

	// DeleteFinancialInstrumentById request
	DeleteFinancialInstrumentByIdWithResponse(ctx context.Context, financialInstrumentId FinancialInstrumentId, reqEditors ...RequestEditorFn) (*DeleteFinancialInstrumentByIdResponse, error)

	// GetFinancialInstrumentById request
	GetFinancialInstrumentByIdWithResponse(ctx context.Context, financialInstrumentId FinancialInstrumentId, reqEditors ...RequestEditorFn) (*GetFinancialInstrumentByIdResponse, error)

	// GetGateways request
	GetGatewaysWithResponse(ctx context.Context, params *GetGatewaysParams, reqEditors ...RequestEditorFn) (*GetGatewaysResponse, error)

	// CreateGateway request with any body
	CreateGatewayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGatewayResponse, error)

	CreateGatewayWithResponse(ctx context.Context, body CreateGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGatewayResponse, error)

	// DeleteGateway request
	DeleteGatewayWithResponse(ctx context.Context, gatewayId GatewayId, reqEditors ...RequestEditorFn) (*DeleteGatewayResponse, error)

	// GetGatewayById request
	GetGatewayByIdWithResponse(ctx context.Context, gatewayId GatewayId, reqEditors ...RequestEditorFn) (*GetGatewayByIdResponse, error)

	// UpdateGatewayById request with any body
	UpdateGatewayByIdWithBodyWithResponse(ctx context.Context, gatewayId GatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGatewayByIdResponse, error)

	UpdateGatewayByIdWithResponse(ctx context.Context, gatewayId GatewayId, body UpdateGatewayByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGatewayByIdResponse, error)

	// CreateOrder request with any body
	CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	// GetOrdersOrderId request
	GetOrdersOrderIdWithResponse(ctx context.Context, orderId OrderId, reqEditors ...RequestEditorFn) (*GetOrdersOrderIdResponse, error)

	// GetRules request
	GetRulesWithResponse(ctx context.Context, params *GetRulesParams, reqEditors ...RequestEditorFn) (*GetRulesResponse, error)

	// CreateRule request with any body
	CreateRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRuleResponse, error)

	CreateRuleWithResponse(ctx context.Context, body CreateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRuleResponse, error)

	// DeleteRule request
	DeleteRuleWithResponse(ctx context.Context, ruleId RuleId, reqEditors ...RequestEditorFn) (*DeleteRuleResponse, error)

	// GetRuleById request
	GetRuleByIdWithResponse(ctx context.Context, ruleId RuleId, reqEditors ...RequestEditorFn) (*GetRuleByIdResponse, error)

	// UpdateRuleById request with any body
	UpdateRuleByIdWithBodyWithResponse(ctx context.Context, ruleId RuleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRuleByIdResponse, error)

	UpdateRuleByIdWithResponse(ctx context.Context, ruleId RuleId, body UpdateRuleByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRuleByIdResponse, error)

	// GetTransfers request
	GetTransfersWithResponse(ctx context.Context, params *GetTransfersParams, reqEditors ...RequestEditorFn) (*GetTransfersResponse, error)

	// CreateTransfer request with any body
	CreateTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTransferResponse, error)

	CreateTransferWithResponse(ctx context.Context, body CreateTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTransferResponse, error)

	// GetTransferById request
	GetTransferByIdWithResponse(ctx context.Context, transferId TransferId, reqEditors ...RequestEditorFn) (*GetTransferByIdResponse, error)

	// FinalizeTransfer request with any body
	FinalizeTransferWithBodyWithResponse(ctx context.Context, transferId TransferId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinalizeTransferResponse, error)

	FinalizeTransferWithResponse(ctx context.Context, transferId TransferId, body FinalizeTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*FinalizeTransferResponse, error)

	// ReverseTransferById request with any body
	ReverseTransferByIdWithBodyWithResponse(ctx context.Context, transferId TransferId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReverseTransferByIdResponse, error)

	ReverseTransferByIdWithResponse(ctx context.Context, transferId TransferId, body ReverseTransferByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReverseTransferByIdResponse, error)

	// CreateVerification request with any body
	CreateVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationResponse, error)

	CreateVerificationWithResponse(ctx context.Context, body CreateVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationResponse, error)
}

type CreateThreeDSAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThreeDSAuthenticationData
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r CreateThreeDSAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateThreeDSAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreeDSAuthenticationChallengeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThreeDSAuthenticationData
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r ThreeDSAuthenticationChallengeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreeDSAuthenticationChallengeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreeDSAuthenticationDeviceFingerprintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThreeDSAuthenticationData
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r ThreeDSAuthenticationDeviceFingerprintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreeDSAuthenticationDeviceFingerprintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThreeDSAuthenticationNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r ThreeDSAuthenticationNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThreeDSAuthenticationNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateThreeDSProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThreeDSProviderData
	JSONDefault  *ThreeDSProviderApiErrors
}

// Status returns HTTPResponse.Status
func (r CreateThreeDSProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateThreeDSProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFinancialInstrumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FinancialInstrumentListData
	JSONDefault  *FinancialInstrumentApiErrors
}

// Status returns HTTPResponse.Status
func (r GetFinancialInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFinancialInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFinancialInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FinancialInstrument
	JSONDefault  *FinancialInstrumentApiErrors
}

// Status returns HTTPResponse.Status
func (r CreateFinancialInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFinancialInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFinancialInstrumentByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteFinancialInstrumentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFinancialInstrumentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFinancialInstrumentByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FinancialInstrument
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r GetFinancialInstrumentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFinancialInstrumentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GatewayListData
	JSONDefault  *GatewaysApiErrors
}

// Status returns HTTPResponse.Status
func (r GetGatewaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GatewayData
	JSONDefault  *GatewaysApiErrors
}

// Status returns HTTPResponse.Status
func (r CreateGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *GatewaysApiErrors
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GatewayData
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r GetGatewayByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGatewayByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GatewayData
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r UpdateGatewayByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGatewayByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OrderData
	JSONDefault  *OrderApiErrors
}

// Status returns HTTPResponse.Status
func (r CreateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrdersOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrderData
	JSONDefault  *OrderApiErrors
}

// Status returns HTTPResponse.Status
func (r GetOrdersOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrdersOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuleListData
	JSONDefault  *RulesApiErrors
}

// Status returns HTTPResponse.Status
func (r GetRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuleData
	JSONDefault  *RulesApiErrors
}

// Status returns HTTPResponse.Status
func (r CreateRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *RulesApiErrors
}

// Status returns HTTPResponse.Status
func (r DeleteRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuleByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuleData
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r GetRuleByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuleByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRuleByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuleData
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r UpdateRuleByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRuleByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransfersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransferListData
	JSONDefault  *TransfersApiErrors
}

// Status returns HTTPResponse.Status
func (r GetTransfersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransfersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransferData
	JSONDefault  *TransfersApiErrors
}

// Status returns HTTPResponse.Status
func (r CreateTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransferByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransferData
	JSONDefault  *TransfersApiErrors
}

// Status returns HTTPResponse.Status
func (r GetTransferByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransferByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinalizeTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransferData
	JSON201      *TransferData
	JSONDefault  *TransfersApiErrors
}

// Status returns HTTPResponse.Status
func (r FinalizeTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinalizeTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReverseTransferByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransferData
	JSONDefault  *TransfersApiErrors
}

// Status returns HTTPResponse.Status
func (r ReverseTransferByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReverseTransferByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VerificationData
	JSONDefault  *ApiError
}

// Status returns HTTPResponse.Status
func (r CreateVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateThreeDSAuthenticationWithBodyWithResponse request with arbitrary body returning *CreateThreeDSAuthenticationResponse
func (c *ClientWithResponses) CreateThreeDSAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreeDSAuthenticationResponse, error) {
	rsp, err := c.CreateThreeDSAuthenticationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreeDSAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) CreateThreeDSAuthenticationWithResponse(ctx context.Context, body CreateThreeDSAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreeDSAuthenticationResponse, error) {
	rsp, err := c.CreateThreeDSAuthentication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreeDSAuthenticationResponse(rsp)
}

// ThreeDSAuthenticationChallengeWithBodyWithResponse request with arbitrary body returning *ThreeDSAuthenticationChallengeResponse
func (c *ClientWithResponses) ThreeDSAuthenticationChallengeWithBodyWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationChallengeResponse, error) {
	rsp, err := c.ThreeDSAuthenticationChallengeWithBody(ctx, n3dsAuthenticationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreeDSAuthenticationChallengeResponse(rsp)
}

func (c *ClientWithResponses) ThreeDSAuthenticationChallengeWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationChallengeResponse, error) {
	rsp, err := c.ThreeDSAuthenticationChallenge(ctx, n3dsAuthenticationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreeDSAuthenticationChallengeResponse(rsp)
}

// ThreeDSAuthenticationDeviceFingerprintWithBodyWithResponse request with arbitrary body returning *ThreeDSAuthenticationDeviceFingerprintResponse
func (c *ClientWithResponses) ThreeDSAuthenticationDeviceFingerprintWithBodyWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationDeviceFingerprintResponse, error) {
	rsp, err := c.ThreeDSAuthenticationDeviceFingerprintWithBody(ctx, n3dsAuthenticationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreeDSAuthenticationDeviceFingerprintResponse(rsp)
}

func (c *ClientWithResponses) ThreeDSAuthenticationDeviceFingerprintWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, body ThreeDSAuthenticationDeviceFingerprintJSONRequestBody, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationDeviceFingerprintResponse, error) {
	rsp, err := c.ThreeDSAuthenticationDeviceFingerprint(ctx, n3dsAuthenticationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreeDSAuthenticationDeviceFingerprintResponse(rsp)
}

// ThreeDSAuthenticationNotificationsWithBodyWithResponse request with arbitrary body returning *ThreeDSAuthenticationNotificationsResponse
func (c *ClientWithResponses) ThreeDSAuthenticationNotificationsWithBodyWithResponse(ctx context.Context, n3dsAuthenticationId N3dsAuthenticationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThreeDSAuthenticationNotificationsResponse, error) {
	rsp, err := c.ThreeDSAuthenticationNotificationsWithBody(ctx, n3dsAuthenticationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThreeDSAuthenticationNotificationsResponse(rsp)
}

// CreateThreeDSProviderWithBodyWithResponse request with arbitrary body returning *CreateThreeDSProviderResponse
func (c *ClientWithResponses) CreateThreeDSProviderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreeDSProviderResponse, error) {
	rsp, err := c.CreateThreeDSProviderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreeDSProviderResponse(rsp)
}

func (c *ClientWithResponses) CreateThreeDSProviderWithResponse(ctx context.Context, body CreateThreeDSProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreeDSProviderResponse, error) {
	rsp, err := c.CreateThreeDSProvider(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreeDSProviderResponse(rsp)
}

// GetFinancialInstrumentsWithResponse request returning *GetFinancialInstrumentsResponse
func (c *ClientWithResponses) GetFinancialInstrumentsWithResponse(ctx context.Context, params *GetFinancialInstrumentsParams, reqEditors ...RequestEditorFn) (*GetFinancialInstrumentsResponse, error) {
	rsp, err := c.GetFinancialInstruments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFinancialInstrumentsResponse(rsp)
}

// CreateFinancialInstrumentWithBodyWithResponse request with arbitrary body returning *CreateFinancialInstrumentResponse
func (c *ClientWithResponses) CreateFinancialInstrumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFinancialInstrumentResponse, error) {
	rsp, err := c.CreateFinancialInstrumentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFinancialInstrumentResponse(rsp)
}

func (c *ClientWithResponses) CreateFinancialInstrumentWithResponse(ctx context.Context, body CreateFinancialInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFinancialInstrumentResponse, error) {
	rsp, err := c.CreateFinancialInstrument(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFinancialInstrumentResponse(rsp)
}

// DeleteFinancialInstrumentByIdWithResponse request returning *DeleteFinancialInstrumentByIdResponse
func (c *ClientWithResponses) DeleteFinancialInstrumentByIdWithResponse(ctx context.Context, financialInstrumentId FinancialInstrumentId, reqEditors ...RequestEditorFn) (*DeleteFinancialInstrumentByIdResponse, error) {
	rsp, err := c.DeleteFinancialInstrumentById(ctx, financialInstrumentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFinancialInstrumentByIdResponse(rsp)
}

// GetFinancialInstrumentByIdWithResponse request returning *GetFinancialInstrumentByIdResponse
func (c *ClientWithResponses) GetFinancialInstrumentByIdWithResponse(ctx context.Context, financialInstrumentId FinancialInstrumentId, reqEditors ...RequestEditorFn) (*GetFinancialInstrumentByIdResponse, error) {
	rsp, err := c.GetFinancialInstrumentById(ctx, financialInstrumentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFinancialInstrumentByIdResponse(rsp)
}

// GetGatewaysWithResponse request returning *GetGatewaysResponse
func (c *ClientWithResponses) GetGatewaysWithResponse(ctx context.Context, params *GetGatewaysParams, reqEditors ...RequestEditorFn) (*GetGatewaysResponse, error) {
	rsp, err := c.GetGateways(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaysResponse(rsp)
}

// CreateGatewayWithBodyWithResponse request with arbitrary body returning *CreateGatewayResponse
func (c *ClientWithResponses) CreateGatewayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGatewayResponse, error) {
	rsp, err := c.CreateGatewayWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGatewayResponse(rsp)
}

func (c *ClientWithResponses) CreateGatewayWithResponse(ctx context.Context, body CreateGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGatewayResponse, error) {
	rsp, err := c.CreateGateway(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGatewayResponse(rsp)
}

// DeleteGatewayWithResponse request returning *DeleteGatewayResponse
func (c *ClientWithResponses) DeleteGatewayWithResponse(ctx context.Context, gatewayId GatewayId, reqEditors ...RequestEditorFn) (*DeleteGatewayResponse, error) {
	rsp, err := c.DeleteGateway(ctx, gatewayId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayResponse(rsp)
}

// GetGatewayByIdWithResponse request returning *GetGatewayByIdResponse
func (c *ClientWithResponses) GetGatewayByIdWithResponse(ctx context.Context, gatewayId GatewayId, reqEditors ...RequestEditorFn) (*GetGatewayByIdResponse, error) {
	rsp, err := c.GetGatewayById(ctx, gatewayId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayByIdResponse(rsp)
}

// UpdateGatewayByIdWithBodyWithResponse request with arbitrary body returning *UpdateGatewayByIdResponse
func (c *ClientWithResponses) UpdateGatewayByIdWithBodyWithResponse(ctx context.Context, gatewayId GatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGatewayByIdResponse, error) {
	rsp, err := c.UpdateGatewayByIdWithBody(ctx, gatewayId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGatewayByIdResponse(rsp)
}

func (c *ClientWithResponses) UpdateGatewayByIdWithResponse(ctx context.Context, gatewayId GatewayId, body UpdateGatewayByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGatewayByIdResponse, error) {
	rsp, err := c.UpdateGatewayById(ctx, gatewayId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGatewayByIdResponse(rsp)
}

// CreateOrderWithBodyWithResponse request with arbitrary body returning *CreateOrderResponse
func (c *ClientWithResponses) CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

// GetOrdersOrderIdWithResponse request returning *GetOrdersOrderIdResponse
func (c *ClientWithResponses) GetOrdersOrderIdWithResponse(ctx context.Context, orderId OrderId, reqEditors ...RequestEditorFn) (*GetOrdersOrderIdResponse, error) {
	rsp, err := c.GetOrdersOrderId(ctx, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersOrderIdResponse(rsp)
}

// GetRulesWithResponse request returning *GetRulesResponse
func (c *ClientWithResponses) GetRulesWithResponse(ctx context.Context, params *GetRulesParams, reqEditors ...RequestEditorFn) (*GetRulesResponse, error) {
	rsp, err := c.GetRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRulesResponse(rsp)
}

// CreateRuleWithBodyWithResponse request with arbitrary body returning *CreateRuleResponse
func (c *ClientWithResponses) CreateRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRuleResponse, error) {
	rsp, err := c.CreateRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateRuleWithResponse(ctx context.Context, body CreateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRuleResponse, error) {
	rsp, err := c.CreateRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRuleResponse(rsp)
}

// DeleteRuleWithResponse request returning *DeleteRuleResponse
func (c *ClientWithResponses) DeleteRuleWithResponse(ctx context.Context, ruleId RuleId, reqEditors ...RequestEditorFn) (*DeleteRuleResponse, error) {
	rsp, err := c.DeleteRule(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRuleResponse(rsp)
}

// GetRuleByIdWithResponse request returning *GetRuleByIdResponse
func (c *ClientWithResponses) GetRuleByIdWithResponse(ctx context.Context, ruleId RuleId, reqEditors ...RequestEditorFn) (*GetRuleByIdResponse, error) {
	rsp, err := c.GetRuleById(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRuleByIdResponse(rsp)
}

// UpdateRuleByIdWithBodyWithResponse request with arbitrary body returning *UpdateRuleByIdResponse
func (c *ClientWithResponses) UpdateRuleByIdWithBodyWithResponse(ctx context.Context, ruleId RuleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRuleByIdResponse, error) {
	rsp, err := c.UpdateRuleByIdWithBody(ctx, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRuleByIdResponse(rsp)
}

func (c *ClientWithResponses) UpdateRuleByIdWithResponse(ctx context.Context, ruleId RuleId, body UpdateRuleByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRuleByIdResponse, error) {
	rsp, err := c.UpdateRuleById(ctx, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRuleByIdResponse(rsp)
}

// GetTransfersWithResponse request returning *GetTransfersResponse
func (c *ClientWithResponses) GetTransfersWithResponse(ctx context.Context, params *GetTransfersParams, reqEditors ...RequestEditorFn) (*GetTransfersResponse, error) {
	rsp, err := c.GetTransfers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransfersResponse(rsp)
}

// CreateTransferWithBodyWithResponse request with arbitrary body returning *CreateTransferResponse
func (c *ClientWithResponses) CreateTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTransferResponse, error) {
	rsp, err := c.CreateTransferWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTransferResponse(rsp)
}

func (c *ClientWithResponses) CreateTransferWithResponse(ctx context.Context, body CreateTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTransferResponse, error) {
	rsp, err := c.CreateTransfer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTransferResponse(rsp)
}

// GetTransferByIdWithResponse request returning *GetTransferByIdResponse
func (c *ClientWithResponses) GetTransferByIdWithResponse(ctx context.Context, transferId TransferId, reqEditors ...RequestEditorFn) (*GetTransferByIdResponse, error) {
	rsp, err := c.GetTransferById(ctx, transferId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransferByIdResponse(rsp)
}

// FinalizeTransferWithBodyWithResponse request with arbitrary body returning *FinalizeTransferResponse
func (c *ClientWithResponses) FinalizeTransferWithBodyWithResponse(ctx context.Context, transferId TransferId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinalizeTransferResponse, error) {
	rsp, err := c.FinalizeTransferWithBody(ctx, transferId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinalizeTransferResponse(rsp)
}

func (c *ClientWithResponses) FinalizeTransferWithResponse(ctx context.Context, transferId TransferId, body FinalizeTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*FinalizeTransferResponse, error) {
	rsp, err := c.FinalizeTransfer(ctx, transferId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinalizeTransferResponse(rsp)
}

// ReverseTransferByIdWithBodyWithResponse request with arbitrary body returning *ReverseTransferByIdResponse
func (c *ClientWithResponses) ReverseTransferByIdWithBodyWithResponse(ctx context.Context, transferId TransferId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReverseTransferByIdResponse, error) {
	rsp, err := c.ReverseTransferByIdWithBody(ctx, transferId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReverseTransferByIdResponse(rsp)
}

func (c *ClientWithResponses) ReverseTransferByIdWithResponse(ctx context.Context, transferId TransferId, body ReverseTransferByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReverseTransferByIdResponse, error) {
	rsp, err := c.ReverseTransferById(ctx, transferId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReverseTransferByIdResponse(rsp)
}

// CreateVerificationWithBodyWithResponse request with arbitrary body returning *CreateVerificationResponse
func (c *ClientWithResponses) CreateVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationResponse, error) {
	rsp, err := c.CreateVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationResponse(rsp)
}

func (c *ClientWithResponses) CreateVerificationWithResponse(ctx context.Context, body CreateVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationResponse, error) {
	rsp, err := c.CreateVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationResponse(rsp)
}

// ParseCreateThreeDSAuthenticationResponse parses an HTTP response from a CreateThreeDSAuthenticationWithResponse call
func ParseCreateThreeDSAuthenticationResponse(rsp *http.Response) (*CreateThreeDSAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateThreeDSAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThreeDSAuthenticationData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreeDSAuthenticationChallengeResponse parses an HTTP response from a ThreeDSAuthenticationChallengeWithResponse call
func ParseThreeDSAuthenticationChallengeResponse(rsp *http.Response) (*ThreeDSAuthenticationChallengeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreeDSAuthenticationChallengeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThreeDSAuthenticationData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreeDSAuthenticationDeviceFingerprintResponse parses an HTTP response from a ThreeDSAuthenticationDeviceFingerprintWithResponse call
func ParseThreeDSAuthenticationDeviceFingerprintResponse(rsp *http.Response) (*ThreeDSAuthenticationDeviceFingerprintResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreeDSAuthenticationDeviceFingerprintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThreeDSAuthenticationData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseThreeDSAuthenticationNotificationsResponse parses an HTTP response from a ThreeDSAuthenticationNotificationsWithResponse call
func ParseThreeDSAuthenticationNotificationsResponse(rsp *http.Response) (*ThreeDSAuthenticationNotificationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThreeDSAuthenticationNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateThreeDSProviderResponse parses an HTTP response from a CreateThreeDSProviderWithResponse call
func ParseCreateThreeDSProviderResponse(rsp *http.Response) (*CreateThreeDSProviderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateThreeDSProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThreeDSProviderData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ThreeDSProviderApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFinancialInstrumentsResponse parses an HTTP response from a GetFinancialInstrumentsWithResponse call
func ParseGetFinancialInstrumentsResponse(rsp *http.Response) (*GetFinancialInstrumentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFinancialInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FinancialInstrumentListData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest FinancialInstrumentApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateFinancialInstrumentResponse parses an HTTP response from a CreateFinancialInstrumentWithResponse call
func ParseCreateFinancialInstrumentResponse(rsp *http.Response) (*CreateFinancialInstrumentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFinancialInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FinancialInstrument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest FinancialInstrumentApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFinancialInstrumentByIdResponse parses an HTTP response from a DeleteFinancialInstrumentByIdWithResponse call
func ParseDeleteFinancialInstrumentByIdResponse(rsp *http.Response) (*DeleteFinancialInstrumentByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFinancialInstrumentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFinancialInstrumentByIdResponse parses an HTTP response from a GetFinancialInstrumentByIdWithResponse call
func ParseGetFinancialInstrumentByIdResponse(rsp *http.Response) (*GetFinancialInstrumentByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFinancialInstrumentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FinancialInstrument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGatewaysResponse parses an HTTP response from a GetGatewaysWithResponse call
func ParseGetGatewaysResponse(rsp *http.Response) (*GetGatewaysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GatewayListData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GatewaysApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGatewayResponse parses an HTTP response from a CreateGatewayWithResponse call
func ParseCreateGatewayResponse(rsp *http.Response) (*CreateGatewayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GatewayData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GatewaysApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteGatewayResponse parses an HTTP response from a DeleteGatewayWithResponse call
func ParseDeleteGatewayResponse(rsp *http.Response) (*DeleteGatewayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GatewaysApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGatewayByIdResponse parses an HTTP response from a GetGatewayByIdWithResponse call
func ParseGetGatewayByIdResponse(rsp *http.Response) (*GetGatewayByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GatewayData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateGatewayByIdResponse parses an HTTP response from a UpdateGatewayByIdWithResponse call
func ParseUpdateGatewayByIdResponse(rsp *http.Response) (*UpdateGatewayByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGatewayByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GatewayData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrderResponse parses an HTTP response from a CreateOrderWithResponse call
func ParseCreateOrderResponse(rsp *http.Response) (*CreateOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrderData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest OrderApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrdersOrderIdResponse parses an HTTP response from a GetOrdersOrderIdWithResponse call
func ParseGetOrdersOrderIdResponse(rsp *http.Response) (*GetOrdersOrderIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrdersOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrderData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest OrderApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRulesResponse parses an HTTP response from a GetRulesWithResponse call
func ParseGetRulesResponse(rsp *http.Response) (*GetRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleListData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RulesApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateRuleResponse parses an HTTP response from a CreateRuleWithResponse call
func ParseCreateRuleResponse(rsp *http.Response) (*CreateRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RulesApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteRuleResponse parses an HTTP response from a DeleteRuleWithResponse call
func ParseDeleteRuleResponse(rsp *http.Response) (*DeleteRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RulesApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRuleByIdResponse parses an HTTP response from a GetRuleByIdWithResponse call
func ParseGetRuleByIdResponse(rsp *http.Response) (*GetRuleByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuleByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateRuleByIdResponse parses an HTTP response from a UpdateRuleByIdWithResponse call
func ParseUpdateRuleByIdResponse(rsp *http.Response) (*UpdateRuleByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRuleByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTransfersResponse parses an HTTP response from a GetTransfersWithResponse call
func ParseGetTransfersResponse(rsp *http.Response) (*GetTransfersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransfersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransferListData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TransfersApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTransferResponse parses an HTTP response from a CreateTransferWithResponse call
func ParseCreateTransferResponse(rsp *http.Response) (*CreateTransferResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransferData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TransfersApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTransferByIdResponse parses an HTTP response from a GetTransferByIdWithResponse call
func ParseGetTransferByIdResponse(rsp *http.Response) (*GetTransferByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransferByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransferData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TransfersApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFinalizeTransferResponse parses an HTTP response from a FinalizeTransferWithResponse call
func ParseFinalizeTransferResponse(rsp *http.Response) (*FinalizeTransferResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FinalizeTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransferData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TransferData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TransfersApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReverseTransferByIdResponse parses an HTTP response from a ReverseTransferByIdWithResponse call
func ParseReverseTransferByIdResponse(rsp *http.Response) (*ReverseTransferByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReverseTransferByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransferData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TransfersApiErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateVerificationResponse parses an HTTP response from a CreateVerificationWithResponse call
func ParseCreateVerificationResponse(rsp *http.Response) (*CreateVerificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VerificationData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Start a 3DS authentication session
	// (POST /3ds_authentications)
	CreateThreeDSAuthentication(w http.ResponseWriter, r *http.Request)
	// Finish the challenge step for 3DS authentication flow
	// (POST /3ds_authentications/{3ds_authentication_id}/challenges)
	ThreeDSAuthenticationChallenge(w http.ResponseWriter, r *http.Request, n3dsAuthenticationId N3dsAuthenticationId)
	// Finish the device fingerprint step for 3DS authentication flow
	// (POST /3ds_authentications/{3ds_authentication_id}/fingerprints)
	ThreeDSAuthenticationDeviceFingerprint(w http.ResponseWriter, r *http.Request, n3dsAuthenticationId N3dsAuthenticationId)
	// Notify message for 3DS authentication flow
	// (POST /3ds_authentications/{3ds_authentication_id}/notifications)
	ThreeDSAuthenticationNotifications(w http.ResponseWriter, r *http.Request, n3dsAuthenticationId N3dsAuthenticationId)
	// Create a 3DS provider
	// (POST /3ds_providers)
	CreateThreeDSProvider(w http.ResponseWriter, r *http.Request)
	// List financial instruments
	// (GET /financial_instruments)
	GetFinancialInstruments(w http.ResponseWriter, r *http.Request, params GetFinancialInstrumentsParams)
	// Create a financial instrument
	// (POST /financial_instruments)
	CreateFinancialInstrument(w http.ResponseWriter, r *http.Request)
	// Delete the Financial Instrument
	// (DELETE /financial_instruments/{financial_instrument_id})
	DeleteFinancialInstrumentById(w http.ResponseWriter, r *http.Request, financialInstrumentId FinancialInstrumentId)
	// Retrieve the Financial Instrument
	// (GET /financial_instruments/{financial_instrument_id})
	GetFinancialInstrumentById(w http.ResponseWriter, r *http.Request, financialInstrumentId FinancialInstrumentId)
	// List gateways
	// (GET /gateways)
	GetGateways(w http.ResponseWriter, r *http.Request, params GetGatewaysParams)
	// Create a gateway
	// (POST /gateways)
	CreateGateway(w http.ResponseWriter, r *http.Request)
	// Delete the gateway
	// (DELETE /gateways/{gateway_id})
	DeleteGateway(w http.ResponseWriter, r *http.Request, gatewayId GatewayId)
	// Retrieve the gateway
	// (GET /gateways/{gateway_id})
	GetGatewayById(w http.ResponseWriter, r *http.Request, gatewayId GatewayId)
	// Update a gateway
	// (PUT /gateways/{gateway_id})
	UpdateGatewayById(w http.ResponseWriter, r *http.Request, gatewayId GatewayId)
	// Place an order
	// (POST /orders)
	CreateOrder(w http.ResponseWriter, r *http.Request)
	// Retrieve the order
	// (GET /orders/{order_id})
	GetOrdersOrderId(w http.ResponseWriter, r *http.Request, orderId OrderId)
	// List rules
	// (GET /rules)
	GetRules(w http.ResponseWriter, r *http.Request, params GetRulesParams)
	// Crate a rule
	// (POST /rules)
	CreateRule(w http.ResponseWriter, r *http.Request)
	// Delete the rule
	// (DELETE /rules/{rule_id})
	DeleteRule(w http.ResponseWriter, r *http.Request, ruleId RuleId)
	// Retrieve the rule
	// (GET /rules/{rule_id})
	GetRuleById(w http.ResponseWriter, r *http.Request, ruleId RuleId)
	// Update the rule
	// (PUT /rules/{rule_id})
	UpdateRuleById(w http.ResponseWriter, r *http.Request, ruleId RuleId)
	// List transfers
	// (GET /transfers)
	GetTransfers(w http.ResponseWriter, r *http.Request, params GetTransfersParams)
	// Create a transfer
	// (POST /transfers)
	CreateTransfer(w http.ResponseWriter, r *http.Request)
	// Retrieve the transfer
	// (GET /transfers/{transfer_id})
	GetTransferById(w http.ResponseWriter, r *http.Request, transferId TransferId)
	// Update the transfer
	// (PUT /transfers/{transfer_id})
	FinalizeTransfer(w http.ResponseWriter, r *http.Request, transferId TransferId)
	// Reverse the transfer
	// (POST /transfers/{transfer_id}/reversals)
	ReverseTransferById(w http.ResponseWriter, r *http.Request, transferId TransferId)
	// Verify the card
	// (POST /verifications)
	CreateVerification(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateThreeDSAuthentication operation middleware
func (siw *ServerInterfaceWrapper) CreateThreeDSAuthentication(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"transfers:write", "transfers:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThreeDSAuthentication(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ThreeDSAuthenticationChallenge operation middleware
func (siw *ServerInterfaceWrapper) ThreeDSAuthenticationChallenge(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "3ds_authentication_id" -------------
	var n3dsAuthenticationId N3dsAuthenticationId

	err = runtime.BindStyledParameter("simple", false, "3ds_authentication_id", chi.URLParam(r, "3ds_authentication_id"), &n3dsAuthenticationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "3ds_authentication_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"transfers:write", "transfers:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ThreeDSAuthenticationChallenge(w, r, n3dsAuthenticationId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ThreeDSAuthenticationDeviceFingerprint operation middleware
func (siw *ServerInterfaceWrapper) ThreeDSAuthenticationDeviceFingerprint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "3ds_authentication_id" -------------
	var n3dsAuthenticationId N3dsAuthenticationId

	err = runtime.BindStyledParameter("simple", false, "3ds_authentication_id", chi.URLParam(r, "3ds_authentication_id"), &n3dsAuthenticationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "3ds_authentication_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"transfers:write", "transfers:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ThreeDSAuthenticationDeviceFingerprint(w, r, n3dsAuthenticationId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ThreeDSAuthenticationNotifications operation middleware
func (siw *ServerInterfaceWrapper) ThreeDSAuthenticationNotifications(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "3ds_authentication_id" -------------
	var n3dsAuthenticationId N3dsAuthenticationId

	err = runtime.BindStyledParameter("simple", false, "3ds_authentication_id", chi.URLParam(r, "3ds_authentication_id"), &n3dsAuthenticationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "3ds_authentication_id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ThreeDSAuthenticationNotifications(w, r, n3dsAuthenticationId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateThreeDSProvider operation middleware
func (siw *ServerInterfaceWrapper) CreateThreeDSProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"3ds:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThreeDSProvider(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetFinancialInstruments operation middleware
func (siw *ServerInterfaceWrapper) GetFinancialInstruments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"financial-instruments:read", "financial-instruments:admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFinancialInstrumentsParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := r.URL.Query().Get("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFinancialInstruments(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateFinancialInstrument operation middleware
func (siw *ServerInterfaceWrapper) CreateFinancialInstrument(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"financial-instruments:write", "financial-instruments:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFinancialInstrument(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteFinancialInstrumentById operation middleware
func (siw *ServerInterfaceWrapper) DeleteFinancialInstrumentById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "financial_instrument_id" -------------
	var financialInstrumentId FinancialInstrumentId

	err = runtime.BindStyledParameter("simple", false, "financial_instrument_id", chi.URLParam(r, "financial_instrument_id"), &financialInstrumentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "financial_instrument_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"financial-instruments:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFinancialInstrumentById(w, r, financialInstrumentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetFinancialInstrumentById operation middleware
func (siw *ServerInterfaceWrapper) GetFinancialInstrumentById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "financial_instrument_id" -------------
	var financialInstrumentId FinancialInstrumentId

	err = runtime.BindStyledParameter("simple", false, "financial_instrument_id", chi.URLParam(r, "financial_instrument_id"), &financialInstrumentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "financial_instrument_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"financial-instruments:admin", "financial-instruments:read"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFinancialInstrumentById(w, r, financialInstrumentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGateways operation middleware
func (siw *ServerInterfaceWrapper) GetGateways(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"gateways:admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGatewaysParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := r.URL.Query().Get("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGateways(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateGateway operation middleware
func (siw *ServerInterfaceWrapper) CreateGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"gateways:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGateway(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteGateway operation middleware
func (siw *ServerInterfaceWrapper) DeleteGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gateway_id" -------------
	var gatewayId GatewayId

	err = runtime.BindStyledParameter("simple", false, "gateway_id", chi.URLParam(r, "gateway_id"), &gatewayId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gateway_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"gateways:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGateway(w, r, gatewayId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGatewayById operation middleware
func (siw *ServerInterfaceWrapper) GetGatewayById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gateway_id" -------------
	var gatewayId GatewayId

	err = runtime.BindStyledParameter("simple", false, "gateway_id", chi.URLParam(r, "gateway_id"), &gatewayId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gateway_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"gateways:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGatewayById(w, r, gatewayId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateGatewayById operation middleware
func (siw *ServerInterfaceWrapper) UpdateGatewayById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "gateway_id" -------------
	var gatewayId GatewayId

	err = runtime.BindStyledParameter("simple", false, "gateway_id", chi.URLParam(r, "gateway_id"), &gatewayId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gateway_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"gateways:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGatewayById(w, r, gatewayId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"orders:write", "orders:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) GetOrdersOrderId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId OrderId

	err = runtime.BindStyledParameter("simple", false, "order_id", chi.URLParam(r, "order_id"), &orderId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"orders:read", "orders:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrdersOrderId(w, r, orderId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRules operation middleware
func (siw *ServerInterfaceWrapper) GetRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"rules:admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRulesParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := r.URL.Query().Get("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRules(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateRule operation middleware
func (siw *ServerInterfaceWrapper) CreateRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"rules:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRule(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "rule_id" -------------
	var ruleId RuleId

	err = runtime.BindStyledParameter("simple", false, "rule_id", chi.URLParam(r, "rule_id"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rule_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"rules:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRuleById operation middleware
func (siw *ServerInterfaceWrapper) GetRuleById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "rule_id" -------------
	var ruleId RuleId

	err = runtime.BindStyledParameter("simple", false, "rule_id", chi.URLParam(r, "rule_id"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rule_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"rules:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRuleById(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateRuleById operation middleware
func (siw *ServerInterfaceWrapper) UpdateRuleById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "rule_id" -------------
	var ruleId RuleId

	err = runtime.BindStyledParameter("simple", false, "rule_id", chi.URLParam(r, "rule_id"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rule_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"rules:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRuleById(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTransfers operation middleware
func (siw *ServerInterfaceWrapper) GetTransfers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"transfers:read", "transfers:admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransfersParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := r.URL.Query().Get("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTransfers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTransfer operation middleware
func (siw *ServerInterfaceWrapper) CreateTransfer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"transfers:write", "transfers:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTransfer(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTransferById operation middleware
func (siw *ServerInterfaceWrapper) GetTransferById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "transfer_id" -------------
	var transferId TransferId

	err = runtime.BindStyledParameter("simple", false, "transfer_id", chi.URLParam(r, "transfer_id"), &transferId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transfer_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"transfers:read", "transfers:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTransferById(w, r, transferId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FinalizeTransfer operation middleware
func (siw *ServerInterfaceWrapper) FinalizeTransfer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "transfer_id" -------------
	var transferId TransferId

	err = runtime.BindStyledParameter("simple", false, "transfer_id", chi.URLParam(r, "transfer_id"), &transferId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transfer_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"transfers:write", "transfers:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FinalizeTransfer(w, r, transferId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ReverseTransferById operation middleware
func (siw *ServerInterfaceWrapper) ReverseTransferById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "transfer_id" -------------
	var transferId TransferId

	err = runtime.BindStyledParameter("simple", false, "transfer_id", chi.URLParam(r, "transfer_id"), &transferId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transfer_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"transfers:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReverseTransferById(w, r, transferId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateVerification operation middleware
func (siw *ServerInterfaceWrapper) CreateVerification(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"transfers:write", "transfers:admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateVerification(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/3ds_authentications", wrapper.CreateThreeDSAuthentication)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/3ds_authentications/{3ds_authentication_id}/challenges", wrapper.ThreeDSAuthenticationChallenge)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/3ds_authentications/{3ds_authentication_id}/fingerprints", wrapper.ThreeDSAuthenticationDeviceFingerprint)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/3ds_authentications/{3ds_authentication_id}/notifications", wrapper.ThreeDSAuthenticationNotifications)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/3ds_providers", wrapper.CreateThreeDSProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/financial_instruments", wrapper.GetFinancialInstruments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/financial_instruments", wrapper.CreateFinancialInstrument)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/financial_instruments/{financial_instrument_id}", wrapper.DeleteFinancialInstrumentById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/financial_instruments/{financial_instrument_id}", wrapper.GetFinancialInstrumentById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways", wrapper.GetGateways)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/gateways", wrapper.CreateGateway)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/gateways/{gateway_id}", wrapper.DeleteGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways/{gateway_id}", wrapper.GetGatewayById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/gateways/{gateway_id}", wrapper.UpdateGatewayById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/orders", wrapper.CreateOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/orders/{order_id}", wrapper.GetOrdersOrderId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rules", wrapper.GetRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/rules", wrapper.CreateRule)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/rules/{rule_id}", wrapper.DeleteRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rules/{rule_id}", wrapper.GetRuleById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/rules/{rule_id}", wrapper.UpdateRuleById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/transfers", wrapper.GetTransfers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/transfers", wrapper.CreateTransfer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/transfers/{transfer_id}", wrapper.GetTransferById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/transfers/{transfer_id}", wrapper.FinalizeTransfer)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/transfers/{transfer_id}/reversals", wrapper.ReverseTransferById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/verifications", wrapper.CreateVerification)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
