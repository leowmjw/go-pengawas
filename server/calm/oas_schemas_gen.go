// Code generated by ogen, DO NOT EDIT.

package calm

// Ref: #/components/schemas/ApiErrorsResponse
type ApiErrorsResponse struct {
	Errors []Error "json:\"errors\""
	// A unique identifier of the failed request.
	TraceID OptString "json:\"trace_id\""
}

// ApiErrorsResponseStatusCode wraps ApiErrorsResponse with StatusCode.
type ApiErrorsResponseStatusCode struct {
	StatusCode int
	Response   ApiErrorsResponse
}

func (*ApiErrorsResponseStatusCode) enrollCardRes() {}

// Customer's billing.
// Ref: #/components/schemas/BillingAddress
type BillingAddress struct {
	Address1 OptString "json:\"address1\""
	Address2 OptString "json:\"address2\""
	City     OptString "json:\"city\""
	Company  OptString "json:\"company\""
	// Country code in ISO 3166-1 alpha-3.
	Country OptString "json:\"country\""
	Name    OptString "json:\"name\""
	// Telephone number in E.164.
	Phone      OptString "json:\"phone\""
	PostalCode OptString "json:\"postal_code\""
	// Principal subdivision in ISO 3166-2.
	Region OptString "json:\"region\""
}

// Payment card object.
// Ref: #/components/schemas/Card
type Card struct {
	BillingAddress OptBillingAddress "json:\"billing_address\""
	// CALM capabilities to enable. If blank all products are enrolled.
	Capabilities []CardCapabilitiesItem "json:\"capabilities\""
	// Card's expiration month.
	ExpMonth int "json:\"exp_month\""
	// Card's expiration year.
	ExpYear int "json:\"exp_year\""
	// Card owner's full name.
	Name string "json:\"name\""
	// Customer's card number.
	Number string "json:\"number\""
}

type CardCapabilitiesItem string

const (
	CardCapabilitiesItemACCOUNTUPDATER CardCapabilitiesItem = "ACCOUNT_UPDATER"
)

// Ref: #/components/schemas/CardData
type CardData struct {
	Data CardObject "json:\"data\""
}

// CardDataHeaders wraps CardData with response headers.
type CardDataHeaders struct {
	Location OptString
	Response CardData
}

func (*CardDataHeaders) enrollCardRes() {}

// An error object.
// Ref: #/components/schemas/CardEnrollApiError
type CardEnrollApiError struct {
	// Explanation of what exactly went wrong.
	Detail OptString "json:\"detail\""
}

// Ref: #/components/schemas/CardEnrollApiErrorsResponse
type CardEnrollApiErrorsResponse struct {
	Errors []CardEnrollApiError "json:\"errors\""
	// A unique identifier of the failed request.
	TraceID OptString "json:\"trace_id\""
}

func (*CardEnrollApiErrorsResponse) getCardRes() {}

// Payment card object.
// Ref: #/components/schemas/CardObject
type CardObject struct {
	BillingAddress OptBillingAddress "json:\"billing_address\""
	// CALM capabilities to enable. If blank all products are enrolled.
	Capabilities []CardObjectCapabilitiesItem "json:\"capabilities\""
	// Card's expiration month.
	ExpMonth int "json:\"exp_month\""
	// Card's expiration year.
	ExpYear int "json:\"exp_year\""
	// Card owner's full name.
	Name string "json:\"name\""
	// Customer's card number.
	Number string "json:\"number\""
}

func (*CardObject) getCardRes() {}

type CardObjectCapabilitiesItem string

const (
	CardObjectCapabilitiesItemACCOUNTUPDATER CardObjectCapabilitiesItem = "ACCOUNT_UPDATER"
)

type EnrollCardApplicationJSONBadRequest CardEnrollApiErrorsResponse

func (*EnrollCardApplicationJSONBadRequest) enrollCardRes() {}

type EnrollCardApplicationJSONUnprocessableEntity CardEnrollApiErrorsResponse

func (*EnrollCardApplicationJSONUnprocessableEntity) enrollCardRes() {}

// An error object.
// Ref: #/components/schemas/Error
type Error struct {
	// Explanation of what exactly went wrong.
	Detail OptString "json:\"detail\""
}

// NewOptBillingAddress returns new OptBillingAddress with value set to v.
func NewOptBillingAddress(v BillingAddress) OptBillingAddress {
	return OptBillingAddress{
		Value: v,
		Set:   true,
	}
}

// OptBillingAddress is optional BillingAddress.
type OptBillingAddress struct {
	Value BillingAddress
	Set   bool
}

// IsSet returns true if OptBillingAddress was set.
func (o OptBillingAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillingAddress) Reset() {
	var v BillingAddress
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillingAddress) SetTo(v BillingAddress) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillingAddress) Get() (v BillingAddress, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillingAddress) Or(d BillingAddress) BillingAddress {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCard returns new OptCard with value set to v.
func NewOptCard(v Card) OptCard {
	return OptCard{
		Value: v,
		Set:   true,
	}
}

// OptCard is optional Card.
type OptCard struct {
	Value Card
	Set   bool
}

// IsSet returns true if OptCard was set.
func (o OptCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCard) Reset() {
	var v Card
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCard) SetTo(v Card) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCard) Get() (v Card, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCard) Or(d Card) Card {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
