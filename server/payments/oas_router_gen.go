// Code generated by ogen, DO NOT EDIT.

package payments

import (
	"net/http"
	"strings"
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'f': // Prefix: "financial_instruments/"
				if l := len("financial_instruments/"); len(elem) >= l && elem[0:l] == "financial_instruments/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "financial_instrument_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteFinancialInstrumentById
					s.handleDeleteFinancialInstrumentByIdRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'g': // Prefix: "gateways/"
				if l := len("gateways/"); len(elem) >= l && elem[0:l] == "gateways/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "gateway_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteGateway
					s.handleDeleteGatewayRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'r': // Prefix: "rules/"
				if l := len("rules/"); len(elem) >= l && elem[0:l] == "rules/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "rule_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteRule
					s.handleDeleteRuleRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'f': // Prefix: "financial_instruments"
				if l := len("financial_instruments"); len(elem) >= l && elem[0:l] == "financial_instruments" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleGetFinancialInstrumentsRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "financial_instrument_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetFinancialInstrumentById
						s.handleGetFinancialInstrumentByIdRequest([1]string{
							args[0],
						}, w, r)

						return
					}
				}
			case 'g': // Prefix: "gateways"
				if l := len("gateways"); len(elem) >= l && elem[0:l] == "gateways" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleGetGatewaysRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "gateway_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetGatewayById
						s.handleGetGatewayByIdRequest([1]string{
							args[0],
						}, w, r)

						return
					}
				}
			case 'o': // Prefix: "orders/"
				if l := len("orders/"); len(elem) >= l && elem[0:l] == "orders/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "order_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: OrdersOrderIDGet
					s.handleOrdersOrderIDGetRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'r': // Prefix: "rules"
				if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleGetRulesRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "rule_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetRuleById
						s.handleGetRuleByIdRequest([1]string{
							args[0],
						}, w, r)

						return
					}
				}
			case 't': // Prefix: "transfers"
				if l := len("transfers"); len(elem) >= l && elem[0:l] == "transfers" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleGetTransfersRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "transfer_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetTransferById
						s.handleGetTransferByIdRequest([1]string{
							args[0],
						}, w, r)

						return
					}
				}
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '3': // Prefix: "3ds_"
				if l := len("3ds_"); len(elem) >= l && elem[0:l] == "3ds_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "authentications"
					if l := len("authentications"); len(elem) >= l && elem[0:l] == "authentications" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleCreateThreeDSAuthenticationRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "3ds_authentication_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "challenges"
								if l := len("challenges"); len(elem) >= l && elem[0:l] == "challenges" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: R3dsAuthentications3dsAuthenticationIDChallengesPost
									s.handleR3dsAuthentications3dsAuthenticationIDChallengesPostRequest([1]string{
										args[0],
									}, w, r)

									return
								}
							case 'f': // Prefix: "fingerprints"
								if l := len("fingerprints"); len(elem) >= l && elem[0:l] == "fingerprints" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: R3dsAuthentications3dsAuthenticationIDFingerprintsPost
									s.handleR3dsAuthentications3dsAuthenticationIDFingerprintsPostRequest([1]string{
										args[0],
									}, w, r)

									return
								}
							}
						}
					}
				case 'p': // Prefix: "providers"
					if l := len("providers"); len(elem) >= l && elem[0:l] == "providers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: CreateThreeDSProvider
						s.handleCreateThreeDSProviderRequest([0]string{}, w, r)

						return
					}
				}
			case 'f': // Prefix: "financial_instruments"
				if l := len("financial_instruments"); len(elem) >= l && elem[0:l] == "financial_instruments" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateFinancialInstrument
					s.handleCreateFinancialInstrumentRequest([0]string{}, w, r)

					return
				}
			case 'g': // Prefix: "gateways"
				if l := len("gateways"); len(elem) >= l && elem[0:l] == "gateways" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateGateway
					s.handleCreateGatewayRequest([0]string{}, w, r)

					return
				}
			case 'o': // Prefix: "orders"
				if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateOrder
					s.handleCreateOrderRequest([0]string{}, w, r)

					return
				}
			case 'r': // Prefix: "rules"
				if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateRule
					s.handleCreateRuleRequest([0]string{}, w, r)

					return
				}
			case 't': // Prefix: "transfers"
				if l := len("transfers"); len(elem) >= l && elem[0:l] == "transfers" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleCreateTransferRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "transfer_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/reversals"
						if l := len("/reversals"); len(elem) >= l && elem[0:l] == "/reversals" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: ReverseTransferById
							s.handleReverseTransferByIdRequest([1]string{
								args[0],
							}, w, r)

							return
						}
					}
				}
			case 'v': // Prefix: "verifications"
				if l := len("verifications"); len(elem) >= l && elem[0:l] == "verifications" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateVerification
					s.handleCreateVerificationRequest([0]string{}, w, r)

					return
				}
			}
		}
	case "PUT":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'g': // Prefix: "gateways/"
				if l := len("gateways/"); len(elem) >= l && elem[0:l] == "gateways/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "gateway_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateGatewayById
					s.handleUpdateGatewayByIdRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'r': // Prefix: "rules/"
				if l := len("rules/"); len(elem) >= l && elem[0:l] == "rules/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "rule_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateRuleById
					s.handleUpdateRuleByIdRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 't': // Prefix: "transfers/"
				if l := len("transfers/"); len(elem) >= l && elem[0:l] == "transfers/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "transfer_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: FinalizeTransfer
					s.handleFinalizeTransferRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name  string
	count int
	args  [1]string
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.name
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [1]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'f': // Prefix: "financial_instruments/"
				if l := len("financial_instruments/"); len(elem) >= l && elem[0:l] == "financial_instruments/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "financial_instrument_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteFinancialInstrumentById
					r.name = "DeleteFinancialInstrumentById"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'g': // Prefix: "gateways/"
				if l := len("gateways/"); len(elem) >= l && elem[0:l] == "gateways/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "gateway_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteGateway
					r.name = "DeleteGateway"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'r': // Prefix: "rules/"
				if l := len("rules/"); len(elem) >= l && elem[0:l] == "rules/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "rule_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteRule
					r.name = "DeleteRule"
					r.args = args
					r.count = 1
					return r, true
				}
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'f': // Prefix: "financial_instruments"
				if l := len("financial_instruments"); len(elem) >= l && elem[0:l] == "financial_instruments" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "GetFinancialInstruments"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "financial_instrument_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetFinancialInstrumentById
						r.name = "GetFinancialInstrumentById"
						r.args = args
						r.count = 1
						return r, true
					}
				}
			case 'g': // Prefix: "gateways"
				if l := len("gateways"); len(elem) >= l && elem[0:l] == "gateways" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "GetGateways"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "gateway_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetGatewayById
						r.name = "GetGatewayById"
						r.args = args
						r.count = 1
						return r, true
					}
				}
			case 'o': // Prefix: "orders/"
				if l := len("orders/"); len(elem) >= l && elem[0:l] == "orders/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "order_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: OrdersOrderIDGet
					r.name = "OrdersOrderIDGet"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'r': // Prefix: "rules"
				if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "GetRules"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "rule_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetRuleById
						r.name = "GetRuleById"
						r.args = args
						r.count = 1
						return r, true
					}
				}
			case 't': // Prefix: "transfers"
				if l := len("transfers"); len(elem) >= l && elem[0:l] == "transfers" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "GetTransfers"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "transfer_id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetTransferById
						r.name = "GetTransferById"
						r.args = args
						r.count = 1
						return r, true
					}
				}
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '3': // Prefix: "3ds_"
				if l := len("3ds_"); len(elem) >= l && elem[0:l] == "3ds_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "authentications"
					if l := len("authentications"); len(elem) >= l && elem[0:l] == "authentications" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "CreateThreeDSAuthentication"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "3ds_authentication_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "challenges"
								if l := len("challenges"); len(elem) >= l && elem[0:l] == "challenges" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: R3dsAuthentications3dsAuthenticationIDChallengesPost
									r.name = "R3dsAuthentications3dsAuthenticationIDChallengesPost"
									r.args = args
									r.count = 1
									return r, true
								}
							case 'f': // Prefix: "fingerprints"
								if l := len("fingerprints"); len(elem) >= l && elem[0:l] == "fingerprints" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: R3dsAuthentications3dsAuthenticationIDFingerprintsPost
									r.name = "R3dsAuthentications3dsAuthenticationIDFingerprintsPost"
									r.args = args
									r.count = 1
									return r, true
								}
							}
						}
					}
				case 'p': // Prefix: "providers"
					if l := len("providers"); len(elem) >= l && elem[0:l] == "providers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: CreateThreeDSProvider
						r.name = "CreateThreeDSProvider"
						r.args = args
						r.count = 0
						return r, true
					}
				}
			case 'f': // Prefix: "financial_instruments"
				if l := len("financial_instruments"); len(elem) >= l && elem[0:l] == "financial_instruments" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateFinancialInstrument
					r.name = "CreateFinancialInstrument"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'g': // Prefix: "gateways"
				if l := len("gateways"); len(elem) >= l && elem[0:l] == "gateways" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateGateway
					r.name = "CreateGateway"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'o': // Prefix: "orders"
				if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateOrder
					r.name = "CreateOrder"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'r': // Prefix: "rules"
				if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateRule
					r.name = "CreateRule"
					r.args = args
					r.count = 0
					return r, true
				}
			case 't': // Prefix: "transfers"
				if l := len("transfers"); len(elem) >= l && elem[0:l] == "transfers" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "CreateTransfer"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "transfer_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/reversals"
						if l := len("/reversals"); len(elem) >= l && elem[0:l] == "/reversals" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: ReverseTransferById
							r.name = "ReverseTransferById"
							r.args = args
							r.count = 1
							return r, true
						}
					}
				}
			case 'v': // Prefix: "verifications"
				if l := len("verifications"); len(elem) >= l && elem[0:l] == "verifications" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateVerification
					r.name = "CreateVerification"
					r.args = args
					r.count = 0
					return r, true
				}
			}
		}
	case "PUT":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'g': // Prefix: "gateways/"
				if l := len("gateways/"); len(elem) >= l && elem[0:l] == "gateways/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "gateway_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateGatewayById
					r.name = "UpdateGatewayById"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'r': // Prefix: "rules/"
				if l := len("rules/"); len(elem) >= l && elem[0:l] == "rules/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "rule_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateRuleById
					r.name = "UpdateRuleById"
					r.args = args
					r.count = 1
					return r, true
				}
			case 't': // Prefix: "transfers/"
				if l := len("transfers/"); len(elem) >= l && elem[0:l] == "transfers/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "transfer_id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: FinalizeTransfer
					r.name = "FinalizeTransfer"
					r.args = args
					r.count = 1
					return r, true
				}
			}
		}
	}
	return r, false
}
