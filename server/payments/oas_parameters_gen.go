// Code generated by ogen, DO NOT EDIT.

package payments

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

type DeleteFinancialInstrumentByIdParams struct {
	// Id of a financial instrument.
	FinancialInstrumentID string
}

func decodeDeleteFinancialInstrumentByIdParams(args [1]string, r *http.Request) (params DeleteFinancialInstrumentByIdParams, _ error) {
	// Decode path: financial_instrument_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "financial_instrument_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FinancialInstrumentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: financial_instrument_id: not specified")
		}
	}
	return params, nil
}

type DeleteGatewayParams struct {
	// Id of a gateway.
	GatewayID string
}

func decodeDeleteGatewayParams(args [1]string, r *http.Request) (params DeleteGatewayParams, _ error) {
	// Decode path: gateway_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gateway_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GatewayID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gateway_id: not specified")
		}
	}
	return params, nil
}

type DeleteRuleParams struct {
	// Id of a rule.
	RuleID string
}

func decodeDeleteRuleParams(args [1]string, r *http.Request) (params DeleteRuleParams, _ error) {
	// Decode path: rule_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: rule_id: not specified")
		}
	}
	return params, nil
}

type FinalizeTransferParams struct {
	// Id of a transfer record.
	TransferID string
}

func decodeFinalizeTransferParams(args [1]string, r *http.Request) (params FinalizeTransferParams, _ error) {
	// Decode path: transfer_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "transfer_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TransferID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: transfer_id: not specified")
		}
	}
	return params, nil
}

type GetFinancialInstrumentByIdParams struct {
	// Id of a financial instrument.
	FinancialInstrumentID string
}

func decodeGetFinancialInstrumentByIdParams(args [1]string, r *http.Request) (params GetFinancialInstrumentByIdParams, _ error) {
	// Decode path: financial_instrument_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "financial_instrument_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FinancialInstrumentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: financial_instrument_id: not specified")
		}
	}
	return params, nil
}

type GetFinancialInstrumentsParams struct {
	// Zero-based page number.
	Page OptInt
	// Amount of items per page.
	Limit OptInt
}

func decodeGetFinancialInstrumentsParams(args [0]string, r *http.Request) (params GetFinancialInstrumentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
			if err := func() error {
				if params.Page.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Page.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: page: invalid")
			}
		}
	}
	// Set default value for query: limit.
	{
		val := int(50)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
			if err := func() error {
				if params.Limit.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Limit.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: invalid")
			}
		}
	}
	return params, nil
}

type GetGatewayByIdParams struct {
	// Id of a gateway.
	GatewayID string
}

func decodeGetGatewayByIdParams(args [1]string, r *http.Request) (params GetGatewayByIdParams, _ error) {
	// Decode path: gateway_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gateway_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GatewayID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gateway_id: not specified")
		}
	}
	return params, nil
}

type GetGatewaysParams struct {
	// Zero-based page number.
	Page OptInt
	// Amount of items per page.
	Limit OptInt
}

func decodeGetGatewaysParams(args [0]string, r *http.Request) (params GetGatewaysParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
			if err := func() error {
				if params.Page.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Page.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: page: invalid")
			}
		}
	}
	// Set default value for query: limit.
	{
		val := int(50)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
			if err := func() error {
				if params.Limit.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Limit.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: invalid")
			}
		}
	}
	return params, nil
}

type GetRuleByIdParams struct {
	// Id of a rule.
	RuleID string
}

func decodeGetRuleByIdParams(args [1]string, r *http.Request) (params GetRuleByIdParams, _ error) {
	// Decode path: rule_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: rule_id: not specified")
		}
	}
	return params, nil
}

type GetRulesParams struct {
	// Zero-based page number.
	Page OptInt
	// Amount of items per page.
	Limit OptInt
}

func decodeGetRulesParams(args [0]string, r *http.Request) (params GetRulesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
			if err := func() error {
				if params.Page.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Page.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: page: invalid")
			}
		}
	}
	// Set default value for query: limit.
	{
		val := int(50)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
			if err := func() error {
				if params.Limit.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Limit.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: invalid")
			}
		}
	}
	return params, nil
}

type GetTransferByIdParams struct {
	// Id of a transfer record.
	TransferID string
}

func decodeGetTransferByIdParams(args [1]string, r *http.Request) (params GetTransferByIdParams, _ error) {
	// Decode path: transfer_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "transfer_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TransferID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: transfer_id: not specified")
		}
	}
	return params, nil
}

type GetTransfersParams struct {
	// Zero-based page number.
	Page OptInt
	// Amount of items per page.
	Limit OptInt
}

func decodeGetTransfersParams(args [0]string, r *http.Request) (params GetTransfersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
			if err := func() error {
				if params.Page.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Page.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: page: invalid")
			}
		}
	}
	// Set default value for query: limit.
	{
		val := int(50)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
			if err := func() error {
				if params.Limit.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Limit.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: invalid")
			}
		}
	}
	return params, nil
}

type OrdersOrderIDGetParams struct {
	// Id of an order.
	OrderID string
}

func decodeOrdersOrderIDGetParams(args [1]string, r *http.Request) (params OrdersOrderIDGetParams, _ error) {
	// Decode path: order_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "order_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrderID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: order_id: not specified")
		}
	}
	return params, nil
}

type R3dsAuthentications3dsAuthenticationIDChallengesPostParams struct {
	// Id of a 3DS authentication.
	R3dsAuthenticationID string
}

func decodeR3dsAuthentications3dsAuthenticationIDChallengesPostParams(args [1]string, r *http.Request) (params R3dsAuthentications3dsAuthenticationIDChallengesPostParams, _ error) {
	// Decode path: 3ds_authentication_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "3ds_authentication_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.R3dsAuthenticationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: 3ds_authentication_id: not specified")
		}
	}
	return params, nil
}

type R3dsAuthentications3dsAuthenticationIDFingerprintsPostParams struct {
	// Id of a 3DS authentication.
	R3dsAuthenticationID string
}

func decodeR3dsAuthentications3dsAuthenticationIDFingerprintsPostParams(args [1]string, r *http.Request) (params R3dsAuthentications3dsAuthenticationIDFingerprintsPostParams, _ error) {
	// Decode path: 3ds_authentication_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "3ds_authentication_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.R3dsAuthenticationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: 3ds_authentication_id: not specified")
		}
	}
	return params, nil
}

type ReverseTransferByIdParams struct {
	// Id of a transfer record.
	TransferID string
}

func decodeReverseTransferByIdParams(args [1]string, r *http.Request) (params ReverseTransferByIdParams, _ error) {
	// Decode path: transfer_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "transfer_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TransferID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: transfer_id: not specified")
		}
	}
	return params, nil
}

type UpdateGatewayByIdParams struct {
	// Id of a gateway.
	GatewayID string
}

func decodeUpdateGatewayByIdParams(args [1]string, r *http.Request) (params UpdateGatewayByIdParams, _ error) {
	// Decode path: gateway_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gateway_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GatewayID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gateway_id: not specified")
		}
	}
	return params, nil
}

type UpdateRuleByIdParams struct {
	// Id of a rule.
	RuleID string
}

func decodeUpdateRuleByIdParams(args [1]string, r *http.Request) (params UpdateRuleByIdParams, _ error) {
	// Decode path: rule_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rule_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: rule_id: not specified")
		}
	}
	return params, nil
}
