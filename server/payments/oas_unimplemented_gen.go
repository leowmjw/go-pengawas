// Code generated by ogen, DO NOT EDIT.

package payments

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

var _ Handler = UnimplementedHandler{}

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

// CreateFinancialInstrument implements CreateFinancialInstrument operation.
//
// Create a financial instrument for later use for sending or receiving money.
//
// POST /financial_instruments
func (UnimplementedHandler) CreateFinancialInstrument(ctx context.Context, req OptPaymentCardCreate) (r CreateFinancialInstrumentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateGateway implements CreateGateway operation.
//
// Create a gateway with PSP's credentials to point transfers to based on certain criteria.
//
// POST /gateways
func (UnimplementedHandler) CreateGateway(ctx context.Context, req OptGatewayCreate) (r CreateGatewayRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateOrder implements CreateOrder operation.
//
// Place an order and return session id for it.
//
// POST /orders
func (UnimplementedHandler) CreateOrder(ctx context.Context, req OptOrderCreate) (r CreateOrderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateRule implements CreateRule operation.
//
// Create a rule by which the API will determine to which gateway to point the transfers to based on
// whether the rule conditions are met.
//
// POST /rules
func (UnimplementedHandler) CreateRule(ctx context.Context, req OptRuleCreate) (r CreateRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateThreeDSAuthentication implements CreateThreeDSAuthentication operation.
//
// Create a 3DS authentication.
// Mainly to be invoked by VGS checkout.js, not meant to be called by user directly.
//
// POST /3ds_authentications
func (UnimplementedHandler) CreateThreeDSAuthentication(ctx context.Context, req OptThreeDSAuthenticationCreate) (r CreateThreeDSAuthenticationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateThreeDSProvider implements CreateThreeDSProvider operation.
//
// Create a 3DS provider with the credentials and configuration.
// Currently only one 3DS provider creation is allowed. Please contact VGS support if you need to
// replace the old 3DS provider.
//
// POST /3ds_providers
func (UnimplementedHandler) CreateThreeDSProvider(ctx context.Context, req OptThreeDSProviderCreate) (r CreateThreeDSProviderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateTransfer implements CreateTransfer operation.
//
// Creates a transfer record in one of the ways:
// 1. Capture the funds instantly
// 2. Create an authorization to be captured manually later.
// The authorization places the funds on hold with the customer's bank. This can be useful in
// situations where you need to make a sale, but won't be able to ship merchandise for several days.
// You can authorize the transfer to ensure funds availability, then capture the transfer to obtain
// the funds upon shipment.
// 3. Creates a transfer from order information.
//
// POST /transfers
func (UnimplementedHandler) CreateTransfer(ctx context.Context, req *TransferCreate) (r CreateTransferRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateVerification implements CreateVerification operation.
//
// This request verifies that the customer's card is valid without actually charging an amount on the
// card. For example, you may want to verify a credit card before adding it to a customer profile for
// future billing transfers.
// The exact verification method varies from psp to psp, but usually this is either a $0 charge, or a
// $1 authorization with immediate cancellation.
//
// POST /verifications
func (UnimplementedHandler) CreateVerification(ctx context.Context, req *Verification) (r CreateVerificationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteFinancialInstrumentById implements DeleteFinancialInstrumentById operation.
//
// Delete a particular financial instrument by id.
//
// DELETE /financial_instruments/{financial_instrument_id}
func (UnimplementedHandler) DeleteFinancialInstrumentById(ctx context.Context, params DeleteFinancialInstrumentByIdParams) (r DeleteFinancialInstrumentByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteGateway implements DeleteGateway operation.
//
// DELETE /gateways/{gateway_id}
func (UnimplementedHandler) DeleteGateway(ctx context.Context, params DeleteGatewayParams) (r DeleteGatewayRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteRule implements DeleteRule operation.
//
// DELETE /rules/{rule_id}
func (UnimplementedHandler) DeleteRule(ctx context.Context, params DeleteRuleParams) (r DeleteRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// FinalizeTransfer implements FinalizeTransfer operation.
//
// Finalize the transfer by moving its state from `pending` to `successful` (captured) or `canceled`
// via the `action` parameter.
// Only transfers with `debit` type and `pending` state is allowed.
// When `capture` is passed in the `action` parameter, the funds, previously held with the customer's
// bank,
// will be transferred from the customer to the gateway's account owner or merchant.
// It will also update the transfer's `state` from `pending` to `successful` if the capture is
// successful and
// return the same transfer with `200` status. The `amount_captured` will be updated accordingly.
// When `cancel` is passed in the `action` parameter, the funds, previously held with the customer's
// bank,
// will be released. Some cards may not support a hard release and the funds will be made available
// after
// a period of seven days from the original authorization.
// It will create a new transfer with `reversal` type, return it with `201` status.
// The `amount_reversed` of original transfer will be updated accordingly.
//
// PUT /transfers/{transfer_id}
func (UnimplementedHandler) FinalizeTransfer(ctx context.Context, req OptTransferUpdate, params FinalizeTransferParams) (r FinalizeTransferRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFinancialInstrumentById implements GetFinancialInstrumentById operation.
//
// Get a particular financial instrument by id.
//
// GET /financial_instruments/{financial_instrument_id}
func (UnimplementedHandler) GetFinancialInstrumentById(ctx context.Context, params GetFinancialInstrumentByIdParams) (r GetFinancialInstrumentByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFinancialInstruments implements GetFinancialInstruments operation.
//
// List financial instrument records filtered by the query condition if provided.
//
// GET /financial_instruments
func (UnimplementedHandler) GetFinancialInstruments(ctx context.Context, params GetFinancialInstrumentsParams) (r GetFinancialInstrumentsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetGatewayById implements GetGatewayById operation.
//
// Get a particular gateway by id.
//
// GET /gateways/{gateway_id}
func (UnimplementedHandler) GetGatewayById(ctx context.Context, params GetGatewayByIdParams) (r GetGatewayByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetGateways implements GetGateways operation.
//
// List gateway records filtered by the query condition if provided.
//
// GET /gateways
func (UnimplementedHandler) GetGateways(ctx context.Context, params GetGatewaysParams) (r GetGatewaysRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetRuleById implements GetRuleById operation.
//
// Get a particular rule by id.
//
// GET /rules/{rule_id}
func (UnimplementedHandler) GetRuleById(ctx context.Context, params GetRuleByIdParams) (r GetRuleByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetRules implements GetRules operation.
//
// List rule records filtered by the query condition if provided.
//
// GET /rules
func (UnimplementedHandler) GetRules(ctx context.Context, params GetRulesParams) (r GetRulesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTransferById implements GetTransferById operation.
//
// Get a particular transfer by id.
//
// GET /transfers/{transfer_id}
func (UnimplementedHandler) GetTransferById(ctx context.Context, params GetTransferByIdParams) (r GetTransferByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTransfers implements GetTransfers operation.
//
// List transfer records filtered by the query condition if provided.
//
// GET /transfers
func (UnimplementedHandler) GetTransfers(ctx context.Context, params GetTransfersParams) (r GetTransfersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// OrdersOrderIDGet implements  operation.
//
// Get a particular order by id.
//
// GET /orders/{order_id}
func (UnimplementedHandler) OrdersOrderIDGet(ctx context.Context, params OrdersOrderIDGetParams) (r OrdersOrderIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// R3dsAuthentications3dsAuthenticationIDChallengesPost implements  operation.
//
// Finish the challenge step for the 3DS authentication session.
// Mainly to be invoked by VGS checkout.js, not meant to be called by user directly.
//
// POST /3ds_authentications/{3ds_authentication_id}/challenges
func (UnimplementedHandler) R3dsAuthentications3dsAuthenticationIDChallengesPost(ctx context.Context, req *R3dsAuthentications3dsAuthenticationIDChallengesPostReq, params R3dsAuthentications3dsAuthenticationIDChallengesPostParams) (r R3dsAuthentications3dsAuthenticationIDChallengesPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// R3dsAuthentications3dsAuthenticationIDFingerprintsPost implements  operation.
//
// Finish the device fingerprint step for the 3DS authentication session.
// Mainly to be invoked by VGS checkout.js, not meant to be called by user directly.
//
// POST /3ds_authentications/{3ds_authentication_id}/fingerprints
func (UnimplementedHandler) R3dsAuthentications3dsAuthenticationIDFingerprintsPost(ctx context.Context, req *R3dsAuthentications3dsAuthenticationIDFingerprintsPostReq, params R3dsAuthentications3dsAuthenticationIDFingerprintsPostParams) (r R3dsAuthentications3dsAuthenticationIDFingerprintsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReverseTransferById implements ReverseTransferById operation.
//
// Reverse a specific transfer by id.
//
// POST /transfers/{transfer_id}/reversals
func (UnimplementedHandler) ReverseTransferById(ctx context.Context, req OptReversal, params ReverseTransferByIdParams) (r ReverseTransferByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateGatewayById implements UpdateGatewayById operation.
//
// Update a particular gateway by id.
//
// PUT /gateways/{gateway_id}
func (UnimplementedHandler) UpdateGatewayById(ctx context.Context, req OptGatewayUpdate, params UpdateGatewayByIdParams) (r UpdateGatewayByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateRuleById implements UpdateRuleById operation.
//
// Update a particular rule by id.
//
// PUT /rules/{rule_id}
func (UnimplementedHandler) UpdateRuleById(ctx context.Context, req OptRuleUpdate, params UpdateRuleByIdParams) (r UpdateRuleByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}
