// Code generated by ogen, DO NOT EDIT.

package payments

import (
	"bytes"
	"io"

	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/trace"
)

func encodeCreateFinancialInstrumentRequestJSON(
	req OptPaymentCardCreate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeCreateGatewayRequestJSON(
	req OptGatewayCreate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeCreateOrderRequestJSON(
	req OptOrderCreate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeCreateRuleRequestJSON(
	req OptRuleCreate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeCreateThreeDSAuthenticationRequestJSON(
	req OptThreeDSAuthenticationCreate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeCreateThreeDSProviderRequestJSON(
	req OptThreeDSProviderCreate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeCreateTransferRequestJSON(
	req *TransferCreate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req != nil {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeCreateVerificationRequestJSON(
	req *Verification,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req != nil {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeFinalizeTransferRequestJSON(
	req OptTransferUpdate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeR3dsAuthentications3dsAuthenticationIDChallengesPostRequestJSON(
	req *R3dsAuthentications3dsAuthenticationIDChallengesPostReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req != nil {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeR3dsAuthentications3dsAuthenticationIDFingerprintsPostRequestJSON(
	req *R3dsAuthentications3dsAuthenticationIDFingerprintsPostReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req != nil {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReverseTransferByIdRequestJSON(
	req OptReversal,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeUpdateGatewayByIdRequestJSON(
	req OptGatewayUpdate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeUpdateRuleByIdRequestJSON(
	req OptRuleUpdate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
