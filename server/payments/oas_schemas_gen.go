// Code generated by ogen, DO NOT EDIT.

package payments

import (
	"time"

	"github.com/go-faster/jx"
)

// Address Verification Service result if available. The combination of `code` and `message` could be
// one of
// - A : Street address matches, but postal code does not match.
// - B : Street address matches, but postal code not verified.
// - C : Street address and postal code do not match.
// - D : Street address and postal code match.
// - E : AVS data is invalid or AVS is not allowed for this card type.
// - F : Card member's name does not match, but billing postal code matches.
// - G : Non-U.S. issuing bank does not support AVS.
// - H : Card member's name does not match. Street address and postal code match.
// - I : Address not verified.
// - J : Card member's name, billing address, and postal code match. Shipping information verified
// and chargeback protection guaranteed through the Fraud Protection Program.
// - K : Card member's name matches but billing address and billing postal code do not match.
// - L : Card member's name and billing postal code match, but billing address does not match.
// - M : Street address and postal code match.
// - N : Street address and postal code do not match. For American Express: Card member's name,
// street address and postal code do not match.
// - O : Card member's name and billing address match, but billing postal code does not match.
// - P : Postal code matches, but street address not verified.
// - Q : Card member's name, billing address, and postal code match. Shipping information verified
// but chargeback protection not guaranteed.
// - R : System unavailable.
// - S : U.S.-issuing bank does not support AVS.
// - T : Card member's name does not match, but street address matches.
// - U : Address information unavailable.
// - V : Card member's name, billing address, and billing postal code match.
// - W : Street address does not match, but 9-digit postal code matches.
// - X : Street address and 9-digit postal code match.
// - Y : Street address and 5-digit postal code match.
// - Z : Street address does not match, but 5-digit postal code matches.
// Please notice, some PSP may return different `code` and `message` values not listed above.
// Ref: #/components/schemas/AVSResult
type AVSResult struct {
	// Code of AVS result.
	Code OptNilString "json:\"code\""
	// Message of AVS result.
	Message OptNilString "json:\"message\""
	// Postal code match of AVS result.
	PostalMatch OptNilString "json:\"postal_match\""
	// Street match of AVS result.
	StreetMatch OptNilString "json:\"street_match\""
}

type Amount int

// Ref: #/components/schemas/ApiError
type ApiError struct {
	Errors []GeneralError "json:\"errors\""
	// A unique identifier of the failed request.
	TraceID OptString "json:\"trace_id\""
}

// ApiErrorStatusCode wraps ApiError with StatusCode.
type ApiErrorStatusCode struct {
	StatusCode int
	Response   ApiError
}

func (*ApiErrorStatusCode) createThreeDSAuthenticationRes()                            {}
func (*ApiErrorStatusCode) createVerificationRes()                                     {}
func (*ApiErrorStatusCode) deleteFinancialInstrumentByIdRes()                          {}
func (*ApiErrorStatusCode) getFinancialInstrumentByIdRes()                             {}
func (*ApiErrorStatusCode) getGatewayByIdRes()                                         {}
func (*ApiErrorStatusCode) getRuleByIdRes()                                            {}
func (*ApiErrorStatusCode) r3dsAuthentications3dsAuthenticationIDChallengesPostRes()   {}
func (*ApiErrorStatusCode) r3dsAuthentications3dsAuthenticationIDFingerprintsPostRes() {}
func (*ApiErrorStatusCode) updateGatewayByIdRes()                                      {}
func (*ApiErrorStatusCode) updateRuleByIdRes()                                         {}

// The information of browser collected for 3DS authentication.
// Ref: #/components/schemas/BrowserInfo
type BrowserInfo struct {
	// Color depth of screen.
	ColorDepth string "json:\"color_depth\""
	// Is Java enabled or not for the browser.
	JavaEnabled bool "json:\"java_enabled\""
	// The language of the browser.
	Language string "json:\"language\""
	// Height of screen.
	ScreenHeight string "json:\"screen_height\""
	// Width of screen.
	ScreenWidth string "json:\"screen_width\""
	// Color depth of screen.
	Timezone string "json:\"timezone\""
	// User-Agent of browser.
	UserAgent string "json:\"user_agent\""
}

// CreateGatewayConflict is response for CreateGateway operation.
type CreateGatewayConflict struct{}

func (*CreateGatewayConflict) createGatewayRes() {}

// CreateThreeDSProviderConflict is response for CreateThreeDSProvider operation.
type CreateThreeDSProviderConflict struct{}

func (*CreateThreeDSProviderConflict) createThreeDSProviderRes() {}

// DeleteFinancialInstrumentByIdNoContent is response for DeleteFinancialInstrumentById operation.
type DeleteFinancialInstrumentByIdNoContent struct{}

func (*DeleteFinancialInstrumentByIdNoContent) deleteFinancialInstrumentByIdRes() {}

// DeleteFinancialInstrumentByIdNotFound is response for DeleteFinancialInstrumentById operation.
type DeleteFinancialInstrumentByIdNotFound struct{}

func (*DeleteFinancialInstrumentByIdNotFound) deleteFinancialInstrumentByIdRes() {}

// DeleteGatewayConflict is response for DeleteGateway operation.
type DeleteGatewayConflict struct{}

func (*DeleteGatewayConflict) deleteGatewayRes() {}

// DeleteGatewayNoContent is response for DeleteGateway operation.
type DeleteGatewayNoContent struct{}

func (*DeleteGatewayNoContent) deleteGatewayRes() {}

// DeleteGatewayNotFound is response for DeleteGateway operation.
type DeleteGatewayNotFound struct{}

func (*DeleteGatewayNotFound) deleteGatewayRes() {}

// DeleteRuleNoContent is response for DeleteRule operation.
type DeleteRuleNoContent struct{}

func (*DeleteRuleNoContent) deleteRuleRes() {}

// DeleteRuleNotFound is response for DeleteRule operation.
type DeleteRuleNotFound struct{}

func (*DeleteRuleNotFound) deleteRuleRes() {}

type FinalizeTransferApplicationJSONCreated TransferData

func (*FinalizeTransferApplicationJSONCreated) finalizeTransferRes() {}

type FinalizeTransferApplicationJSONOK TransferData

func (*FinalizeTransferApplicationJSONOK) finalizeTransferRes() {}

// FinalizeTransferConflict is response for FinalizeTransfer operation.
type FinalizeTransferConflict struct{}

func (*FinalizeTransferConflict) finalizeTransferRes() {}

// FinalizeTransferNotFound is response for FinalizeTransfer operation.
type FinalizeTransferNotFound struct{}

func (*FinalizeTransferNotFound) finalizeTransferRes() {}

// Ref: #/components/schemas/FinancialInstrument
type FinancialInstrument struct {
	Data PaymentCardObject "json:\"data\""
}

func (*FinancialInstrument) createFinancialInstrumentRes()  {}
func (*FinancialInstrument) getFinancialInstrumentByIdRes() {}

// Ref: #/components/schemas/FinancialInstrumentApiErrors
type FinancialInstrumentApiErrors struct {
	Errors []FinancialInstrumentError "json:\"errors\""
	// A unique identifier of the failed request.
	TraceID OptString "json:\"trace_id\""
}

// FinancialInstrumentApiErrorsStatusCode wraps FinancialInstrumentApiErrors with StatusCode.
type FinancialInstrumentApiErrorsStatusCode struct {
	StatusCode int
	Response   FinancialInstrumentApiErrors
}

func (*FinancialInstrumentApiErrorsStatusCode) createFinancialInstrumentRes() {}
func (*FinancialInstrumentApiErrorsStatusCode) getFinancialInstrumentsRes()   {}

type FinancialInstrumentError jx.Raw

// Ref: #/components/schemas/FinancialInstrumentListData
type FinancialInstrumentListData struct {
	Data  []FinancialInstrument            "json:\"data\""
	Links FinancialInstrumentListDataLinks "json:\"links\""
	Meta  FinancialInstrumentListDataMeta  "json:\"meta\""
}

func (*FinancialInstrumentListData) getFinancialInstrumentsRes() {}

type FinancialInstrumentListDataLinks struct {
	// The first page of data.
	First string "json:\"first\""
	// The last page of data.
	Last string "json:\"last\""
	// The next page of data.
	Next OptString "json:\"next\""
	// The previous page of data.
	Prev OptString "json:\"prev\""
	// The current page of data.
	Self string "json:\"self\""
}

type FinancialInstrumentListDataMeta struct {
	// Total number of financial instruments.
	TotalElements OptInt "json:\"total_elements\""
	// Total number of pages.
	TotalPages OptInt "json:\"total_pages\""
}

type FinancialInstrumentSorting []FinancialInstrumentSortingSpec

type FinancialInstrumentSortingSpec jx.Raw

// An id of an existing merchant gateway record within payment orchestration.
// Ref: #/components/schemas/Gateway
type Gateway struct {
	// Any specific keys passed through to the gateway configuration. Refer to docs.
	Config GatewayConfig "json:\"config\""
	// Creation time, in UTC.
	CreatedAt time.Time "json:\"created_at\""
	// ISO 4217 currency code. Defaults to USD.
	DefaultCurrency string "json:\"default_currency\""
	// Is this gateway the default gateway or not.
	// A default gateway is needed and will be used when a transfer without matching any routing rule
	// created.
	// There could be only one default gateway at the same time.
	// When a new gateway created as the default gateway, the old default gateway will no longer be the
	// default gateway anymore.
	DefaultGateway OptBool "json:\"default_gateway\""
	// Unique identifier for this gateway.
	// Used to refer to gateway in rules.
	ID   string         "json:\"id\""
	Type GatewayPSPType "json:\"type\""
	// Last time psp token was updated, in UTC.
	UpdatedAt time.Time "json:\"updated_at\""
}

// Any specific keys passed through to the gateway configuration. Refer to docs.
type GatewayConfig struct{}

// Ref: #/components/schemas/GatewayCreate
type GatewayCreate struct {
	// Any specific keys passed through to the gateway configuration. Refer to docs.
	Config *GatewayCreateConfig "json:\"config\""
	// ISO 4217 currency code. Defaults to USD.
	DefaultCurrency OptString "json:\"default_currency\""
	// Is this gateway the default gateway or not.
	// A default gateway is needed and will be used when a transfer without matching any routing rule
	// created.
	// There could be only one default gateway at the same time.
	// When a new gateway created as the default gateway, the old default gateway will no longer be the
	// default gateway anymore.
	DefaultGateway OptBool "json:\"default_gateway\""
	// Unique identifier for this gateway.
	// Used to refer to gateway in rules.
	ID   string         "json:\"id\""
	Type GatewayPSPType "json:\"type\""
}

// Any specific keys passed through to the gateway configuration. Refer to docs.
type GatewayCreateConfig struct{}

// Ref: #/components/schemas/GatewayData
type GatewayData struct {
	Data Gateway "json:\"data\""
}

func (*GatewayData) createGatewayRes()     {}
func (*GatewayData) getGatewayByIdRes()    {}
func (*GatewayData) updateGatewayByIdRes() {}

type GatewayFilter []GatewayJSONOperator

type GatewayJSONOperator jx.Raw

// Ref: #/components/schemas/GatewayListData
type GatewayListData struct {
	Data  []Gateway            "json:\"data\""
	Links GatewayListDataLinks "json:\"links\""
	Meta  GatewayListDataMeta  "json:\"meta\""
}

func (*GatewayListData) getGatewaysRes() {}

type GatewayListDataLinks struct {
	// The first page of data.
	First string "json:\"first\""
	// The last page of data.
	Last string "json:\"last\""
	// The next page of data.
	Next OptString "json:\"next\""
	// The previous page of data.
	Prev OptString "json:\"prev\""
	// The current page of data.
	Self string "json:\"self\""
}

type GatewayListDataMeta struct {
	// Total number of gateways.
	TotalElements OptInt "json:\"total_elements\""
	// Total number of pages.
	TotalPages OptInt "json:\"total_pages\""
}

// Gateway-specific options object, that nevertheless has some standard keys - 'currency',
// 'billing_address' and 'shipping_address'.
// Beyond the standard keys, optional additional information can be included, like 'order_id',
// 'invoice', 'email', or any other custom keys specified by the caller.
// Ref: #/components/schemas/GatewayOptions
type GatewayOptions struct {
	// Payment's currency. If empty, default merchant account's currency will be applied.
	Currency        OptString "json:\"currency\""
	ShippingAddress jx.Raw    "json:\"shipping_address\""
	AdditionalProps GatewayOptionsAdditional
}

type GatewayOptionsAdditional map[string]GatewayOptionsAdditionalItem

func (s *GatewayOptionsAdditional) init() GatewayOptionsAdditional {
	m := *s
	if m == nil {
		m = map[string]GatewayOptionsAdditionalItem{}
		*s = m
	}
	return m
}

type GatewayOptionsAdditionalItem struct{}

type GatewayPSPType string

type GatewaySorting []GatewaySortingSpec

type GatewaySortingSpec jx.Raw

// Ref: #/components/schemas/GatewayUpdate
type GatewayUpdate struct {
	// Any specific keys passed through to the gateway configuration. Refer to docs.
	Config *GatewayUpdateConfig "json:\"config\""
	// ISO 4217 currency code. Defaults to USD.
	DefaultCurrency OptString "json:\"default_currency\""
	// Is this gateway the default gateway or not.
	// A default gateway is needed and will be used when a transfer without matching any routing rule
	// created.
	// There could be only one default gateway at the same time.
	// When a gateway set as the default gateway, the old default gateway will no longer be the default
	// gateway anymore.
	DefaultGateway OptBool           "json:\"default_gateway\""
	Type           OptGatewayPSPType "json:\"type\""
}

// Any specific keys passed through to the gateway configuration. Refer to docs.
type GatewayUpdateConfig struct{}

// Ref: #/components/schemas/GatewaysApiErrors
type GatewaysApiErrors struct {
	Errors [][]jx.Raw "json:\"errors\""
	// A unique identifier of the failed request.
	TraceID OptString "json:\"trace_id\""
}

// GatewaysApiErrorsStatusCode wraps GatewaysApiErrors with StatusCode.
type GatewaysApiErrorsStatusCode struct {
	StatusCode int
	Response   GatewaysApiErrors
}

func (*GatewaysApiErrorsStatusCode) createGatewayRes() {}
func (*GatewaysApiErrorsStatusCode) deleteGatewayRes() {}
func (*GatewaysApiErrorsStatusCode) getGatewaysRes()   {}

// Ref: #/components/schemas/GeneralError
type GeneralError struct{}

// GetFinancialInstrumentByIdNotFound is response for GetFinancialInstrumentById operation.
type GetFinancialInstrumentByIdNotFound struct{}

func (*GetFinancialInstrumentByIdNotFound) getFinancialInstrumentByIdRes() {}

// GetGatewayByIdNotFound is response for GetGatewayById operation.
type GetGatewayByIdNotFound struct{}

func (*GetGatewayByIdNotFound) getGatewayByIdRes() {}

// GetRuleByIdNotFound is response for GetRuleById operation.
type GetRuleByIdNotFound struct{}

func (*GetRuleByIdNotFound) getRuleByIdRes() {}

// GetTransferByIdNotFound is response for GetTransferById operation.
type GetTransferByIdNotFound struct{}

func (*GetTransferByIdNotFound) getTransferByIdRes() {}

// NewNilStoredFinancialInstrument returns new NilStoredFinancialInstrument with value set to v.
func NewNilStoredFinancialInstrument(v StoredFinancialInstrument) NilStoredFinancialInstrument {
	return NilStoredFinancialInstrument{
		Value: v,
	}
}

// NilStoredFinancialInstrument is nullable StoredFinancialInstrument.
type NilStoredFinancialInstrument struct {
	Value StoredFinancialInstrument
	Null  bool
}

// SetTo sets value to v.
func (o *NilStoredFinancialInstrument) SetTo(v StoredFinancialInstrument) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStoredFinancialInstrument) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilStoredFinancialInstrument) Get() (v StoredFinancialInstrument, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStoredFinancialInstrument) Or(d StoredFinancialInstrument) StoredFinancialInstrument {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAmount returns new OptAmount with value set to v.
func NewOptAmount(v Amount) OptAmount {
	return OptAmount{
		Value: v,
		Set:   true,
	}
}

// OptAmount is optional Amount.
type OptAmount struct {
	Value Amount
	Set   bool
}

// IsSet returns true if OptAmount was set.
func (o OptAmount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAmount) Reset() {
	var v Amount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAmount) SetTo(v Amount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAmount) Get() (v Amount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAmount) Or(d Amount) Amount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatewayCreate returns new OptGatewayCreate with value set to v.
func NewOptGatewayCreate(v GatewayCreate) OptGatewayCreate {
	return OptGatewayCreate{
		Value: v,
		Set:   true,
	}
}

// OptGatewayCreate is optional GatewayCreate.
type OptGatewayCreate struct {
	Value GatewayCreate
	Set   bool
}

// IsSet returns true if OptGatewayCreate was set.
func (o OptGatewayCreate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatewayCreate) Reset() {
	var v GatewayCreate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatewayCreate) SetTo(v GatewayCreate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatewayCreate) Get() (v GatewayCreate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatewayCreate) Or(d GatewayCreate) GatewayCreate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatewayOptions returns new OptGatewayOptions with value set to v.
func NewOptGatewayOptions(v GatewayOptions) OptGatewayOptions {
	return OptGatewayOptions{
		Value: v,
		Set:   true,
	}
}

// OptGatewayOptions is optional GatewayOptions.
type OptGatewayOptions struct {
	Value GatewayOptions
	Set   bool
}

// IsSet returns true if OptGatewayOptions was set.
func (o OptGatewayOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatewayOptions) Reset() {
	var v GatewayOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatewayOptions) SetTo(v GatewayOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatewayOptions) Get() (v GatewayOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatewayOptions) Or(d GatewayOptions) GatewayOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatewayPSPType returns new OptGatewayPSPType with value set to v.
func NewOptGatewayPSPType(v GatewayPSPType) OptGatewayPSPType {
	return OptGatewayPSPType{
		Value: v,
		Set:   true,
	}
}

// OptGatewayPSPType is optional GatewayPSPType.
type OptGatewayPSPType struct {
	Value GatewayPSPType
	Set   bool
}

// IsSet returns true if OptGatewayPSPType was set.
func (o OptGatewayPSPType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatewayPSPType) Reset() {
	var v GatewayPSPType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatewayPSPType) SetTo(v GatewayPSPType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatewayPSPType) Get() (v GatewayPSPType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatewayPSPType) Or(d GatewayPSPType) GatewayPSPType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatewayUpdate returns new OptGatewayUpdate with value set to v.
func NewOptGatewayUpdate(v GatewayUpdate) OptGatewayUpdate {
	return OptGatewayUpdate{
		Value: v,
		Set:   true,
	}
}

// OptGatewayUpdate is optional GatewayUpdate.
type OptGatewayUpdate struct {
	Value GatewayUpdate
	Set   bool
}

// IsSet returns true if OptGatewayUpdate was set.
func (o OptGatewayUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatewayUpdate) Reset() {
	var v GatewayUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatewayUpdate) SetTo(v GatewayUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatewayUpdate) Get() (v GatewayUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatewayUpdate) Or(d GatewayUpdate) GatewayUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAVSResult returns new OptNilAVSResult with value set to v.
func NewOptNilAVSResult(v AVSResult) OptNilAVSResult {
	return OptNilAVSResult{
		Value: v,
		Set:   true,
	}
}

// OptNilAVSResult is optional nullable AVSResult.
type OptNilAVSResult struct {
	Value AVSResult
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAVSResult was set.
func (o OptNilAVSResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAVSResult) Reset() {
	var v AVSResult
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAVSResult) SetTo(v AVSResult) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAVSResult) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAVSResult) Get() (v AVSResult, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAVSResult) Or(d AVSResult) AVSResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilThreeDSAuthenticationChallenge returns new OptNilThreeDSAuthenticationChallenge with value set to v.
func NewOptNilThreeDSAuthenticationChallenge(v ThreeDSAuthenticationChallenge) OptNilThreeDSAuthenticationChallenge {
	return OptNilThreeDSAuthenticationChallenge{
		Value: v,
		Set:   true,
	}
}

// OptNilThreeDSAuthenticationChallenge is optional nullable ThreeDSAuthenticationChallenge.
type OptNilThreeDSAuthenticationChallenge struct {
	Value ThreeDSAuthenticationChallenge
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilThreeDSAuthenticationChallenge was set.
func (o OptNilThreeDSAuthenticationChallenge) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilThreeDSAuthenticationChallenge) Reset() {
	var v ThreeDSAuthenticationChallenge
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilThreeDSAuthenticationChallenge) SetTo(v ThreeDSAuthenticationChallenge) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilThreeDSAuthenticationChallenge) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilThreeDSAuthenticationChallenge) Get() (v ThreeDSAuthenticationChallenge, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilThreeDSAuthenticationChallenge) Or(d ThreeDSAuthenticationChallenge) ThreeDSAuthenticationChallenge {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilThreeDSAuthenticationDeviceFingerprint returns new OptNilThreeDSAuthenticationDeviceFingerprint with value set to v.
func NewOptNilThreeDSAuthenticationDeviceFingerprint(v ThreeDSAuthenticationDeviceFingerprint) OptNilThreeDSAuthenticationDeviceFingerprint {
	return OptNilThreeDSAuthenticationDeviceFingerprint{
		Value: v,
		Set:   true,
	}
}

// OptNilThreeDSAuthenticationDeviceFingerprint is optional nullable ThreeDSAuthenticationDeviceFingerprint.
type OptNilThreeDSAuthenticationDeviceFingerprint struct {
	Value ThreeDSAuthenticationDeviceFingerprint
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilThreeDSAuthenticationDeviceFingerprint was set.
func (o OptNilThreeDSAuthenticationDeviceFingerprint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilThreeDSAuthenticationDeviceFingerprint) Reset() {
	var v ThreeDSAuthenticationDeviceFingerprint
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilThreeDSAuthenticationDeviceFingerprint) SetTo(v ThreeDSAuthenticationDeviceFingerprint) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilThreeDSAuthenticationDeviceFingerprint) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilThreeDSAuthenticationDeviceFingerprint) Get() (v ThreeDSAuthenticationDeviceFingerprint, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilThreeDSAuthenticationDeviceFingerprint) Or(d ThreeDSAuthenticationDeviceFingerprint) ThreeDSAuthenticationDeviceFingerprint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderCreate returns new OptOrderCreate with value set to v.
func NewOptOrderCreate(v OrderCreate) OptOrderCreate {
	return OptOrderCreate{
		Value: v,
		Set:   true,
	}
}

// OptOrderCreate is optional OrderCreate.
type OptOrderCreate struct {
	Value OrderCreate
	Set   bool
}

// IsSet returns true if OptOrderCreate was set.
func (o OptOrderCreate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderCreate) Reset() {
	var v OrderCreate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderCreate) SetTo(v OrderCreate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderCreate) Get() (v OrderCreate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderCreate) Or(d OrderCreate) OrderCreate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCardCreate returns new OptPaymentCardCreate with value set to v.
func NewOptPaymentCardCreate(v PaymentCardCreate) OptPaymentCardCreate {
	return OptPaymentCardCreate{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCardCreate is optional PaymentCardCreate.
type OptPaymentCardCreate struct {
	Value PaymentCardCreate
	Set   bool
}

// IsSet returns true if OptPaymentCardCreate was set.
func (o OptPaymentCardCreate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCardCreate) Reset() {
	var v PaymentCardCreate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCardCreate) SetTo(v PaymentCardCreate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCardCreate) Get() (v PaymentCardCreate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCardCreate) Or(d PaymentCardCreate) PaymentCardCreate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReversal returns new OptReversal with value set to v.
func NewOptReversal(v Reversal) OptReversal {
	return OptReversal{
		Value: v,
		Set:   true,
	}
}

// OptReversal is optional Reversal.
type OptReversal struct {
	Value Reversal
	Set   bool
}

// IsSet returns true if OptReversal was set.
func (o OptReversal) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReversal) Reset() {
	var v Reversal
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReversal) SetTo(v Reversal) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReversal) Get() (v Reversal, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReversal) Or(d Reversal) Reversal {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleCreate returns new OptRuleCreate with value set to v.
func NewOptRuleCreate(v RuleCreate) OptRuleCreate {
	return OptRuleCreate{
		Value: v,
		Set:   true,
	}
}

// OptRuleCreate is optional RuleCreate.
type OptRuleCreate struct {
	Value RuleCreate
	Set   bool
}

// IsSet returns true if OptRuleCreate was set.
func (o OptRuleCreate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleCreate) Reset() {
	var v RuleCreate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleCreate) SetTo(v RuleCreate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleCreate) Get() (v RuleCreate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleCreate) Or(d RuleCreate) RuleCreate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleUpdate returns new OptRuleUpdate with value set to v.
func NewOptRuleUpdate(v RuleUpdate) OptRuleUpdate {
	return OptRuleUpdate{
		Value: v,
		Set:   true,
	}
}

// OptRuleUpdate is optional RuleUpdate.
type OptRuleUpdate struct {
	Value RuleUpdate
	Set   bool
}

// IsSet returns true if OptRuleUpdate was set.
func (o OptRuleUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleUpdate) Reset() {
	var v RuleUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleUpdate) SetTo(v RuleUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleUpdate) Get() (v RuleUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleUpdate) Or(d RuleUpdate) RuleUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleUpdateAction returns new OptRuleUpdateAction with value set to v.
func NewOptRuleUpdateAction(v RuleUpdateAction) OptRuleUpdateAction {
	return OptRuleUpdateAction{
		Value: v,
		Set:   true,
	}
}

// OptRuleUpdateAction is optional RuleUpdateAction.
type OptRuleUpdateAction struct {
	Value RuleUpdateAction
	Set   bool
}

// IsSet returns true if OptRuleUpdateAction was set.
func (o OptRuleUpdateAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleUpdateAction) Reset() {
	var v RuleUpdateAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleUpdateAction) SetTo(v RuleUpdateAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleUpdateAction) Get() (v RuleUpdateAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleUpdateAction) Or(d RuleUpdateAction) RuleUpdateAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreeDSAuthenticationCreate returns new OptThreeDSAuthenticationCreate with value set to v.
func NewOptThreeDSAuthenticationCreate(v ThreeDSAuthenticationCreate) OptThreeDSAuthenticationCreate {
	return OptThreeDSAuthenticationCreate{
		Value: v,
		Set:   true,
	}
}

// OptThreeDSAuthenticationCreate is optional ThreeDSAuthenticationCreate.
type OptThreeDSAuthenticationCreate struct {
	Value ThreeDSAuthenticationCreate
	Set   bool
}

// IsSet returns true if OptThreeDSAuthenticationCreate was set.
func (o OptThreeDSAuthenticationCreate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreeDSAuthenticationCreate) Reset() {
	var v ThreeDSAuthenticationCreate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreeDSAuthenticationCreate) SetTo(v ThreeDSAuthenticationCreate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreeDSAuthenticationCreate) Get() (v ThreeDSAuthenticationCreate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreeDSAuthenticationCreate) Or(d ThreeDSAuthenticationCreate) ThreeDSAuthenticationCreate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreeDSProviderCreate returns new OptThreeDSProviderCreate with value set to v.
func NewOptThreeDSProviderCreate(v ThreeDSProviderCreate) OptThreeDSProviderCreate {
	return OptThreeDSProviderCreate{
		Value: v,
		Set:   true,
	}
}

// OptThreeDSProviderCreate is optional ThreeDSProviderCreate.
type OptThreeDSProviderCreate struct {
	Value ThreeDSProviderCreate
	Set   bool
}

// IsSet returns true if OptThreeDSProviderCreate was set.
func (o OptThreeDSProviderCreate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreeDSProviderCreate) Reset() {
	var v ThreeDSProviderCreate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreeDSProviderCreate) SetTo(v ThreeDSProviderCreate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreeDSProviderCreate) Get() (v ThreeDSProviderCreate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreeDSProviderCreate) Or(d ThreeDSProviderCreate) ThreeDSProviderCreate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferUpdate returns new OptTransferUpdate with value set to v.
func NewOptTransferUpdate(v TransferUpdate) OptTransferUpdate {
	return OptTransferUpdate{
		Value: v,
		Set:   true,
	}
}

// OptTransferUpdate is optional TransferUpdate.
type OptTransferUpdate struct {
	Value TransferUpdate
	Set   bool
}

// IsSet returns true if OptTransferUpdate was set.
func (o OptTransferUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferUpdate) Reset() {
	var v TransferUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferUpdate) SetTo(v TransferUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferUpdate) Get() (v TransferUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferUpdate) Or(d TransferUpdate) TransferUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Order
type Order struct{}

// Ref: #/components/schemas/OrderApiErrors
type OrderApiErrors struct {
	Errors [][]jx.Raw "json:\"errors\""
	// A unique identifier of the failed request.
	TraceID OptString "json:\"trace_id\""
}

// OrderApiErrorsStatusCode wraps OrderApiErrors with StatusCode.
type OrderApiErrorsStatusCode struct {
	StatusCode int
	Response   OrderApiErrors
}

func (*OrderApiErrorsStatusCode) createOrderRes()      {}
func (*OrderApiErrorsStatusCode) ordersOrderIDGetRes() {}

// Ref: #/components/schemas/OrderCreate
type OrderCreate struct {
	// The final amount which will be used for transfer.
	Amount float64 "json:\"amount\""
	// Redirect URL if a user cancels the payment.
	CancelURL OptString "json:\"cancel_url\""
	// ISO 4217 currency code. Defaults to USD.
	Currency string "json:\"currency\""
	// Redirect URL if payment failed for any reasons.
	ErrorURL OptString "json:\"error_url\""
	// Possible ways, which end-user can use to make a payment.
	FinancialInstrumentTypes []string               "json:\"financial_instrument_types\""
	Items                    []OrderCreateItemsItem "json:\"items\""
	// Discount for an amount of order in %.
	PercentOff OptFloat64 "json:\"percent_off\""
	// Redirect URL if payment completed successfully.
	SuccessURL OptString "json:\"success_url\""
}

type OrderCreateItemsItem struct {
	// Product picture.
	Image OptNilString "json:\"image\""
	// Product title.
	Name string "json:\"name\""
	// Discount for an order item in %.
	PercentOff OptFloat64 "json:\"percent_off\""
	// Price in cents.
	Price float64 "json:\"price\""
	// Count of product items.
	Quantity int "json:\"quantity\""
}

// Ref: #/components/schemas/OrderData
type OrderData struct {
	Data Order "json:\"data\""
}

func (*OrderData) createOrderRes()      {}
func (*OrderData) ordersOrderIDGetRes() {}

// Payment card.
// Ref: #/components/schemas/PaymentCardCreate
type PaymentCardCreate struct {
	Card PaymentCardDetailsCreate "json:\"card\""
}

type PaymentCardDetails jx.Raw

// Payment card object details.
// Ref: #/components/schemas/PaymentCardDetailsCreate
type PaymentCardDetailsCreate struct {
	BillingAddress jx.Raw "json:\"billing_address\""
	// Card's verification value. This value is needed for a singular transfer or authorization, and
	// expires after an hour due to PCI requirements.
	Cvc string "json:\"cvc\""
	// Card's expiration month.
	ExpMonth int "json:\"exp_month\""
	// Card's expiration year.
	ExpYear int "json:\"exp_year\""
	// Card owner's full name.
	Name string "json:\"name\""
	// Customer's card number.
	Number string "json:\"number\""
}

// Payment card object.
// Ref: #/components/schemas/PaymentCardObject
type PaymentCardObject struct {
	Card PaymentCardDetails "json:\"card\""
	// Creation time, in UTC.
	CreatedAt time.Time                    "json:\"created_at\""
	ID        NilStoredFinancialInstrument "json:\"id\""
	// Last time payment card was updated, in UTC.
	UpdatedAt time.Time "json:\"updated_at\""
}

// Arbitrary JSON payload passed from the 3DS provider via post message notification page to VGS
// checkout.js.
type R3dsAuthentications3dsAuthenticationIDChallengesPostReq struct{}

// Arbitrary JSON payload passed from the 3DS provider via post message notification page to VGS
// checkout.js.
type R3dsAuthentications3dsAuthenticationIDFingerprintsPostReq struct{}

// Ref: #/components/schemas/Reversal
type Reversal struct {
	Amount         OptAmount         "json:\"amount\""
	GatewayOptions OptGatewayOptions "json:\"gateway_options\""
}

// ReverseTransferByIdNotFound is response for ReverseTransferById operation.
type ReverseTransferByIdNotFound struct{}

func (*ReverseTransferByIdNotFound) reverseTransferByIdRes() {}

// A transfer routing rule.
// If none are present then we choose the first gateway.
// Ref: #/components/schemas/Rule
type Rule struct {
	Action RuleAction "json:\"action\""
	// Creation time, in UTC.
	CreatedAt   time.Time "json:\"created_at\""
	Criteria    string    "json:\"criteria\""
	Description NilString "json:\"description\""
	// Unique reference identifier for this rule.
	ID string "json:\"id\""
	// Order of execution of rule.
	Ordinal int "json:\"ordinal\""
	// ID of gateway to route transfer to.
	RouteToGateway OptNilString "json:\"route_to_gateway\""
	// Last time rule was updated, in UTC.
	UpdatedAt time.Time "json:\"updated_at\""
}

type RuleAction string

const (
	RuleActionBlock RuleAction = "block"
	RuleActionRetry RuleAction = "retry"
	RuleActionRoute RuleAction = "route"
)

// Ref: #/components/schemas/RuleCreate
type RuleCreate struct {
	Action RuleCreateAction "json:\"action\""
	// Https://github.com/google/cel-spec
	// Common Expression Language compatible rule
	// Rules can fire by using transfer attributes ( including financial instrument attributes) and
	// environment attributes as criteria.
	// Transfer attributes
	// - `transfer.amount` The amount of transfer
	// - `transfer.currency` ISO 4217 currency code of the transfer
	// - `transfer.type` Type of transfer, could be one of `credit`, `debit`, `reversal` or `verification`
	// - `transfer.source` The ID of source financial instruments
	// - `transfer.destination.bin` # Not implemented
	// - `transfer.destination.card_type` # Not implemented
	// Card attributes
	// - `card.brand` The brand of credit card, could be one of `Visa`, `MasterCard`, `AmericanExpress`,
	// `Discover`, `JCB`, `DinersClub`, `UnionPay` or `Unknown`
	// Environment attributes
	// - `env.utc_hour` Current UTC time hour value, could be used for time-based routing rule
	// - `env.utc_minute` Current UTC time minute value, could be used for time-based routing rule
	// - `env.ip_address_requests_last_hour` # Not implemented
	// - `env.source_requests_last_hour` # Not implemented
	// - `env.username` The username value provided in auth token
	// - `env.user_id` The user id value provided in auth token
	// - `env.client_id` The client id value provided in auth token
	// Sub-merchant routing can be established via `username` or `user_id`.
	Criteria    string       "json:\"criteria\""
	Description OptNilString "json:\"description\""
	// Order of execution of rule.
	Ordinal int "json:\"ordinal\""
	// ID of gateway to route transfer to when action is set to `route` or `retry`.
	RouteToGateway OptNilString "json:\"route_to_gateway\""
}

type RuleCreateAction string

const (
	RuleCreateActionBlock RuleCreateAction = "block"
	RuleCreateActionRetry RuleCreateAction = "retry"
	RuleCreateActionRoute RuleCreateAction = "route"
)

// Ref: #/components/schemas/RuleData
type RuleData struct {
	Data Rule "json:\"data\""
}

func (*RuleData) createRuleRes()     {}
func (*RuleData) getRuleByIdRes()    {}
func (*RuleData) updateRuleByIdRes() {}

type RuleFilter []RuleFilteringOperator

type RuleFilteringOperator jx.Raw

// Ref: #/components/schemas/RuleListData
type RuleListData struct {
	Data  []Rule            "json:\"data\""
	Links RuleListDataLinks "json:\"links\""
	Meta  RuleListDataMeta  "json:\"meta\""
}

func (*RuleListData) getRulesRes() {}

type RuleListDataLinks struct {
	// The first page of data.
	First string "json:\"first\""
	// The last page of data.
	Last string "json:\"last\""
	// The next page of data.
	Next OptString "json:\"next\""
	// The previous page of data.
	Prev OptString "json:\"prev\""
	// The current page of data.
	Self string "json:\"self\""
}

type RuleListDataMeta struct {
	// Total number of rules.
	TotalElements OptInt "json:\"total_elements\""
	// Total number of pages.
	TotalPages OptInt "json:\"total_pages\""
}

type RuleSorting []RuleSortingSpec

type RuleSortingSpec jx.Raw

// Ref: #/components/schemas/RuleUpdate
type RuleUpdate struct {
	Action OptRuleUpdateAction "json:\"action\""
	// Https://github.com/google/cel-spec
	// Common Expression Language compatible rule
	// Rules can fire by using transfer attributes ( including financial instrument attributes) and
	// environment attributes as criteria.
	// Transfer attributes
	// - `transfer.amount` The amount of transfer
	// - `transfer.currency` ISO 4217 currency code of the transfer
	// - `transfer.type` Type of transfer, could be one of `credit`, `debit`, `reversal` or `verification`
	// - `transfer.source` The ID of source financial instruments
	// - `transfer.destination.bin` # Not implemented
	// - `transfer.destination.card_type` # Not implemented
	// Card attributes
	// - `card.brand` The brand of credit card, could be one of `Visa`, `MasterCard`, `AmericanExpress`,
	// `Discover`, `JCB`, `DinersClub`, `UnionPay` or `Unknown`
	// Environment attributes
	// - `env.utc_hour` Current UTC time hour value, could be used for time-based routing rule
	// - `env.utc_minute` Current UTC time minute value, could be used for time-based routing rule
	// - `env.ip_address_requests_last_hour` # Not implemented
	// - `env.source_requests_last_hour` # Not implemented
	// - `env.username` The username value provided in auth token
	// - `env.user_id` The user id value provided in auth token
	// - `env.client_id` The client id value provided in auth token
	// Sub-merchant routing can be established via `username` or `user_id`.
	Criteria    OptString    "json:\"criteria\""
	Description OptNilString "json:\"description\""
	// Order of execution of rule.
	Ordinal OptInt "json:\"ordinal\""
	// ID of gateway to route transfer to when action is set to `route` or `retry`.
	RouteToGateway OptNilString "json:\"route_to_gateway\""
}

type RuleUpdateAction string

const (
	RuleUpdateActionBlock RuleUpdateAction = "block"
	RuleUpdateActionRetry RuleUpdateAction = "retry"
	RuleUpdateActionRoute RuleUpdateAction = "route"
)

// Ref: #/components/schemas/RulesApiErrors
type RulesApiErrors struct {
	Errors [][]jx.Raw "json:\"errors\""
	// A unique identifier of the failed request.
	TraceID OptString "json:\"trace_id\""
}

// RulesApiErrorsStatusCode wraps RulesApiErrors with StatusCode.
type RulesApiErrorsStatusCode struct {
	StatusCode int
	Response   RulesApiErrors
}

func (*RulesApiErrorsStatusCode) createRuleRes() {}
func (*RulesApiErrorsStatusCode) deleteRuleRes() {}
func (*RulesApiErrorsStatusCode) getRulesRes()   {}

type StoredFinancialInstrument string

// A ThreeDSAuthentication represents the record for a 3DS authentication session.
// Ref: #/components/schemas/ThreeDSAuthentication
type ThreeDSAuthentication struct {
	Amount Amount "json:\"amount\""
	// The card financial instrument to be 3DS authenticated.
	Card      string                               "json:\"card\""
	Challenge OptNilThreeDSAuthenticationChallenge "json:\"challenge\""
	// Creation time, in UTC.
	CreatedAt time.Time "json:\"created_at\""
	// ISO 4217 currency code for this 3DS authentication.
	Currency          string                                       "json:\"currency\""
	DeviceFingerprint OptNilThreeDSAuthenticationDeviceFingerprint "json:\"device_fingerprint\""
	// Unique reference identifier for this 3DS authentication.
	ID string "json:\"id\""
	// `device_fingerprint` means the 3DS authentication is created and needs device fingerprint.
	// `challenge` means the 3DS provider requires the user to be challenged for approving this
	// transaction.
	// `successful` means the 3DS authentication is successful, and is ready to be passed to transfer for
	// making a purchase.
	// `failed` occurs when the authentication failed.
	State ThreeDSAuthenticationState "json:\"state\""
	// Last time authentication was updated, in UTC.
	UpdatedAt time.Time "json:\"updated_at\""
}

type ThreeDSAuthenticationChallenge struct {
	// The form parameter payload for sending as a POST request to the given URL in an iframe.
	Params ThreeDSAuthenticationChallengeParams "json:\"params\""
	// The iframe URL for challenge.
	URL string "json:\"url\""
	// Should the VGS checkout.js waits for postMessage from iframe after the page is loaded or not.
	WaitForMessage bool "json:\"wait_for_message\""
}

// The form parameter payload for sending as a POST request to the given URL in an iframe.
type ThreeDSAuthenticationChallengeParams struct{}

// Ref: #/components/schemas/ThreeDSAuthenticationCreate
type ThreeDSAuthenticationCreate struct {
	Amount      Amount      "json:\"amount\""
	BrowserInfo BrowserInfo "json:\"browser_info\""
	// The ID financial instrument for the credit card to be authenticated.
	Card string "json:\"card\""
	// ISO 4217 currency code for this authentication.
	Currency string "json:\"currency\""
	// The URL of the web page which initiated the 3DS authentication and limited to receive messages
	// from the notifications endpoint via Javascript postMessage calls.
	Origin string "json:\"origin\""
}

// Ref: #/components/schemas/ThreeDSAuthenticationData
type ThreeDSAuthenticationData struct {
	Data ThreeDSAuthentication "json:\"data\""
}

func (*ThreeDSAuthenticationData) createThreeDSAuthenticationRes()                            {}
func (*ThreeDSAuthenticationData) r3dsAuthentications3dsAuthenticationIDChallengesPostRes()   {}
func (*ThreeDSAuthenticationData) r3dsAuthentications3dsAuthenticationIDFingerprintsPostRes() {}

type ThreeDSAuthenticationDeviceFingerprint struct {
	// The form parameter payload for sending as a POST request to the given URL in an iframe.
	Params ThreeDSAuthenticationDeviceFingerprintParams "json:\"params\""
	// The iframe URL for device fingerprint.
	URL string "json:\"url\""
	// Should the VGS checkout.js waits for postMessage from iframe after the page is loaded or not.
	WaitForMessage OptBool "json:\"wait_for_message\""
}

// The form parameter payload for sending as a POST request to the given URL in an iframe.
type ThreeDSAuthenticationDeviceFingerprintParams struct{}

// `device_fingerprint` means the 3DS authentication is created and needs device fingerprint.
// `challenge` means the 3DS provider requires the user to be challenged for approving this
// transaction.
// `successful` means the 3DS authentication is successful, and is ready to be passed to transfer for
// making a purchase.
// `failed` occurs when the authentication failed.
type ThreeDSAuthenticationState string

const (
	ThreeDSAuthenticationStateDeviceFingerprint ThreeDSAuthenticationState = "device_fingerprint"
	ThreeDSAuthenticationStateChallenge         ThreeDSAuthenticationState = "challenge"
	ThreeDSAuthenticationStateSuccessful        ThreeDSAuthenticationState = "successful"
	ThreeDSAuthenticationStateFailed            ThreeDSAuthenticationState = "failed"
)

// A 3DS service provider with its credentials and configurations.
// Ref: #/components/schemas/ThreeDSProvider
type ThreeDSProvider struct {
	// Any specific keys passed through to the 3DS provider configuration. Refer to docs.
	Config ThreeDSProviderConfig "json:\"config\""
	// Creation time, in UTC.
	CreatedAt time.Time "json:\"created_at\""
	// Unique reference identifier for this 3DS provider.
	ID string "json:\"id\""
	// The type of 3DS provider.
	// Please notice that not all 3DS provider listed in the enum are supported at this moment.
	// Contact VGS customer support to find out the list of supported 3DS providers.
	Type ThreeDSProviderType "json:\"type\""
	// Last time 3DS provider was updated, in UTC.
	UpdatedAt time.Time "json:\"updated_at\""
}

// Ref: #/components/schemas/ThreeDSProviderApiErrors
type ThreeDSProviderApiErrors struct {
	Errors [][]jx.Raw "json:\"errors\""
	// A unique identifier of the failed request.
	TraceID OptString "json:\"trace_id\""
}

// ThreeDSProviderApiErrorsStatusCode wraps ThreeDSProviderApiErrors with StatusCode.
type ThreeDSProviderApiErrorsStatusCode struct {
	StatusCode int
	Response   ThreeDSProviderApiErrors
}

func (*ThreeDSProviderApiErrorsStatusCode) createThreeDSProviderRes() {}

// Any specific keys passed through to the 3DS provider configuration. Refer to docs.
type ThreeDSProviderConfig struct{}

// Ref: #/components/schemas/ThreeDSProviderCreate
type ThreeDSProviderCreate struct {
	// Any specific keys passed through to the provider configuration. Refer to docs.
	Config ThreeDSProviderCreateConfig "json:\"config\""
	Type   jx.Raw                      "json:\"type\""
}

// Any specific keys passed through to the provider configuration. Refer to docs.
type ThreeDSProviderCreateConfig struct{}

// Ref: #/components/schemas/ThreeDSProviderData
type ThreeDSProviderData struct {
	Data ThreeDSProvider "json:\"data\""
}

func (*ThreeDSProviderData) createThreeDSProviderRes() {}

// The type of 3DS provider.
// Please notice that not all 3DS provider listed in the enum are supported at this moment.
// Contact VGS customer support to find out the list of supported 3DS providers.
type ThreeDSProviderType string

const (
	ThreeDSProviderTypeAdyen    ThreeDSProviderType = "adyen"
	ThreeDSProviderTypePaay     ThreeDSProviderType = "paay"
	ThreeDSProviderType3dsecure ThreeDSProviderType = "3dsecure"
)

// A Transfer represents any flow of funds either to or from a Financial Instrument.
// A Transfer can be
// - a debit from a payment card
// - a credit to a bank account
// - a reversal of another transfer.
// Each type is represented by the `type` field.
// Ref: #/components/schemas/Transfer
type Transfer struct {
	Amount Amount "json:\"amount\""
	// Total amount of funds captured in cents (e.g. 100 cents means $1.00).
	AmountCaptured OptInt "json:\"amount_captured\""
	// Total amount of funds reversed in cents (e.g. 100 cents means $1.00).
	AmountReversed OptInt            "json:\"amount_reversed\""
	AvsResult      OptNilAVSResult   "json:\"avs_result\""
	Captures       []TransferCapture "json:\"captures\""
	// Creation time, in UTC.
	CreatedAt time.Time "json:\"created_at\""
	// ISO 4217 currency code for this transaction. If not supplied based on default of gateway.
	Currency OptNilString "json:\"currency\""
	// Destination for funds.
	// Populated for reversals.
	Destination OptNilString "json:\"destination\""
	// The total amount that will be debited in cents (e.g. 100 cents to debit $1.00)
	// This amount cannot be greater than the `amount`.
	Fee             OptInt                  "json:\"fee\""
	Gateway         Gateway                 "json:\"gateway\""
	GatewayResponse TransferGatewayResponse "json:\"gateway_response\""
	// Unique reference identifier for this transfer.
	ID string "json:\"id\""
	// If the transfer type is `reversal`, this will be the transfer id it's reversing.
	ReversedTransfer OptNilString "json:\"reversed_transfer\""
	// Where funds are drawn from.
	// Not populated for reversals.
	Source NilString "json:\"source\""
	// 'pending' means transfer needs to be finalized by performing a 'capture' action on it.
	// 'canceled' means the 'authorized' request was nullified, and the funds were released from hold.
	// 'successful' means transfer is in it's final state, and the funds were transferred from customer's
	// account to the destination.
	// 'failed' occurs when the authorization failed to be created.
	State TransferState "json:\"state\""
	// - `debit` is created after capturing an Authorization.
	// - `reversal` represents a refund or chargeback where funds are reversed from a previous transfer.
	// - `credit` is when funds are transferred to the Financial Instrument represented by the
	// `destination` field.
	Type TransferType "json:\"type\""
	// Last time transfer was updated, in UTC.
	UpdatedAt time.Time "json:\"updated_at\""
}

// A Transfer capture represents an attempt to capture previously held fund.
// Ref: #/components/schemas/TransferCapture
type TransferCapture struct {
	Amount jx.Raw "json:\"amount\""
	// Creation time, in UTC.
	CreatedAt       time.Time               "json:\"created_at\""
	GatewayResponse TransferGatewayResponse "json:\"gateway_response\""
}

type TransferCreate jx.Raw

// Ref: #/components/schemas/TransferData
type TransferData struct {
	Data Transfer "json:\"data\""
}

func (*TransferData) createTransferRes()      {}
func (*TransferData) getTransferByIdRes()     {}
func (*TransferData) reverseTransferByIdRes() {}

type TransferFilter []TransferFilteringOperator

type TransferFilteringOperator jx.Raw

// Gateway-specific response data, taken directly from the PSP's reply.
// Ref: #/components/schemas/TransferGatewayResponse
type TransferGatewayResponse struct {
	// Error type from the PSP's API in case something went wrong.
	ErrorCode OptString "json:\"error_code\""
	// Unique reference identifier for this record in PSP's system.
	ID string "json:\"id\""
	// Response message from the PSP's API.
	Message string "json:\"message\""
	// Full response object from the Gateway's API.
	RawResponse string "json:\"raw_response\""
	// Codified value allowing programmatic interpretation of PSP response.
	// - `error` - Occurs when gateway returns a 5xx.
	// - `timeout` - Network error connecting to gateway.
	State TransferGatewayResponseState "json:\"state\""
}

// Codified value allowing programmatic interpretation of PSP response.
// - `error` - Occurs when gateway returns a 5xx.
// - `timeout` - Network error connecting to gateway.
type TransferGatewayResponseState string

const (
	TransferGatewayResponseStateSuccessful TransferGatewayResponseState = "successful"
	TransferGatewayResponseStateFailed     TransferGatewayResponseState = "failed"
	TransferGatewayResponseStateError      TransferGatewayResponseState = "error"
	TransferGatewayResponseStateTimeout    TransferGatewayResponseState = "timeout"
)

// Ref: #/components/schemas/TransferListData
type TransferListData struct {
	Data  []Transfer            "json:\"data\""
	Links TransferListDataLinks "json:\"links\""
	Meta  TransferListDataMeta  "json:\"meta\""
}

func (*TransferListData) getTransfersRes() {}

type TransferListDataLinks struct {
	// The first page of data.
	First string "json:\"first\""
	// The last page of data.
	Last string "json:\"last\""
	// The next page of data.
	Next OptString "json:\"next\""
	// The previous page of data.
	Prev OptString "json:\"prev\""
	// The current page of data.
	Self string "json:\"self\""
}

type TransferListDataMeta struct {
	// Total number of transfers.
	TotalElements OptInt "json:\"total_elements\""
	// Total number of pages.
	TotalPages OptInt "json:\"total_pages\""
}

type TransferSorting []TransferSortingSpec

type TransferSortingSpec jx.Raw

// 'pending' means transfer needs to be finalized by performing a 'capture' action on it.
// 'canceled' means the 'authorized' request was nullified, and the funds were released from hold.
// 'successful' means transfer is in it's final state, and the funds were transferred from customer's
// account to the destination.
// 'failed' occurs when the authorization failed to be created.
type TransferState string

const (
	TransferStatePending    TransferState = "pending"
	TransferStateSuccessful TransferState = "successful"
	TransferStateCanceled   TransferState = "canceled"
	TransferStateFailed     TransferState = "failed"
)

// - `debit` is created after capturing an Authorization.
// - `reversal` represents a refund or chargeback where funds are reversed from a previous transfer.
// - `credit` is when funds are transferred to the Financial Instrument represented by the
// `destination` field.
type TransferType string

const (
	TransferTypeCredit   TransferType = "credit"
	TransferTypeDebit    TransferType = "debit"
	TransferTypeReversal TransferType = "reversal"
)

// Ref: #/components/schemas/TransferUpdate
type TransferUpdate struct {
	// - `capture` - means move transfer to it's final state, and transfer the funds from customer's bank
	// account to the merchant.
	// - `cancel` - means nullify the transfer, releasing funds previously reserved with customer's bank.
	Action         TransferUpdateAction "json:\"action\""
	Amount         OptAmount            "json:\"amount\""
	GatewayOptions OptGatewayOptions    "json:\"gateway_options\""
}

// - `capture` - means move transfer to it's final state, and transfer the funds from customer's bank
// account to the merchant.
// - `cancel` - means nullify the transfer, releasing funds previously reserved with customer's bank.
type TransferUpdateAction string

const (
	TransferUpdateActionCapture TransferUpdateAction = "capture"
	TransferUpdateActionCancel  TransferUpdateAction = "cancel"
)

// Ref: #/components/schemas/TransfersApiErrors
type TransfersApiErrors struct {
	Errors [][]jx.Raw "json:\"errors\""
	// A unique identifier of the failed request.
	TraceID OptString "json:\"trace_id\""
}

// TransfersApiErrorsStatusCode wraps TransfersApiErrors with StatusCode.
type TransfersApiErrorsStatusCode struct {
	StatusCode int
	Response   TransfersApiErrors
}

func (*TransfersApiErrorsStatusCode) createTransferRes()      {}
func (*TransfersApiErrorsStatusCode) finalizeTransferRes()    {}
func (*TransfersApiErrorsStatusCode) getTransferByIdRes()     {}
func (*TransfersApiErrorsStatusCode) getTransfersRes()        {}
func (*TransfersApiErrorsStatusCode) reverseTransferByIdRes() {}

// UpdateGatewayByIdNotFound is response for UpdateGatewayById operation.
type UpdateGatewayByIdNotFound struct{}

func (*UpdateGatewayByIdNotFound) updateGatewayByIdRes() {}

// UpdateRuleByIdNotFound is response for UpdateRuleById operation.
type UpdateRuleByIdNotFound struct{}

func (*UpdateRuleByIdNotFound) updateRuleByIdRes() {}

type Verification jx.Raw

// Ref: #/components/schemas/VerificationData
type VerificationData struct {
	Data VerificationTransfer "json:\"data\""
}

func (*VerificationData) createVerificationRes() {}

// A Verification transfer represents an artificial transfer used to validate financial instruments.
// Typically a zero dollar auth is used for this purpose.
// Ref: #/components/schemas/VerificationTransfer
type VerificationTransfer struct {
	// Amount used to verify a financial instrument.
	Amount    int             "json:\"amount\""
	AvsResult OptNilAVSResult "json:\"avs_result\""
	// Creation time, in UTC.
	CreatedAt time.Time "json:\"created_at\""
	// ISO 4217 currency code for this transaction. If not supplied based on default of gateway.
	Currency OptNilString "json:\"currency\""
	// Destination for funds.
	// Populated for reversals.
	Destination OptNilString "json:\"destination\""
	// The total amount that will be debited in cents (e.g. 100 cents to debit $1.00)
	// This amount cannot be greater than the `amount`.
	Fee             OptInt                  "json:\"fee\""
	Gateway         Gateway                 "json:\"gateway\""
	GatewayResponse TransferGatewayResponse "json:\"gateway_response\""
	// Unique reference identifier for this verification.
	ID string "json:\"id\""
	// Where funds are drawn from.
	Source NilString "json:\"source\""
	// 'successful' means that financial instrument was successfully verified
	// 'failed' occurs when the verification fails.
	State VerificationTransferState "json:\"state\""
	Type  VerificationTransferType  "json:\"type\""
	// Last time transfer was updated, in UTC.
	UpdatedAt time.Time "json:\"updated_at\""
}

// 'successful' means that financial instrument was successfully verified
// 'failed' occurs when the verification fails.
type VerificationTransferState string

const (
	VerificationTransferStateSuccessful VerificationTransferState = "successful"
	VerificationTransferStateFailed     VerificationTransferState = "failed"
)

type VerificationTransferType string

const (
	VerificationTransferTypeVerification VerificationTransferType = "verification"
)
