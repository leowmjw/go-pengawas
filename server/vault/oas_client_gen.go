// Code generated by ogen, DO NOT EDIT.

package vault

import (
	"context"
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric/instrument/syncint64"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	sec       SecuritySource
	cfg       config
	requests  syncint64.Counter
	errors    syncint64.Counter
	duration  syncint64.Histogram
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, sec SecuritySource, opts ...Option) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	c := &Client{
		cfg:       newConfig(opts...),
		sec:       sec,
		serverURL: u,
	}
	if c.requests, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientRequestCount); err != nil {
		return nil, err
	}
	if c.errors, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientErrorsCount); err != nil {
		return nil, err
	}
	if c.duration, err = c.cfg.Meter.SyncInt64().Histogram(otelogen.ClientDuration); err != nil {
		return nil, err
	}
	return c, nil
}

// CreateAliases invokes createAliases operation.
//
// Stores multiple values at once & returns their aliases.
// Alternatively, this endpoint may be used to associate additional (i.e.
// secondary) aliases with the same underlying data as the reference
// alias specified in the request body.
// **NOTE:** You cannot reference the same alias more than once in a
// single request.
//
// POST /aliases
func (c *Client) CreateAliases(ctx context.Context, request OptCreateAliasesRequest) (res CreateAliasesCreated, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := request.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("createAliases"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "CreateAliases",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeCreateAliasesRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/aliases"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	if err := c.securityBasicAuth(ctx, "CreateAliases", r); err != nil {
		return res, errors.Wrap(err, "security")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateAliasesResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAlias invokes deleteAlias operation.
//
// Removes a single alias.
//
// DELETE /aliases/{alias}
func (c *Client) DeleteAlias(ctx context.Context, params DeleteAliasParams) (res DeleteAliasNoContent, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("deleteAlias"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteAlias",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/aliases/"
	{
		// Encode "alias" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "alias",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Alias))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}

	r := ht.NewRequest(ctx, "DELETE", u, nil)
	defer ht.PutRequest(r)

	if err := c.securityBasicAuth(ctx, "DeleteAlias", r); err != nil {
		return res, errors.Wrap(err, "security")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAliasResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RevealAlias invokes revealAlias operation.
//
// Retrieves a stored value along with its aliases.
// **NOTE:** This endpoint may expose sensitive data. Therefore, it is
// disabled by default. To enable it, please contact your VGS account
// manager or drop us a line at
// [support@verygoodsecurity.com](mailto:support@verygoodsecurity.com).
//
// GET /aliases/{alias}
func (c *Client) RevealAlias(ctx context.Context, params RevealAliasParams) (res RevealedData, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("revealAlias"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "RevealAlias",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/aliases/"
	{
		// Encode "alias" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "alias",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Alias))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	if err := c.securityBasicAuth(ctx, "RevealAlias", r); err != nil {
		return res, errors.Wrap(err, "security")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRevealAliasResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RevealMultipleAliases invokes revealMultipleAliases operation.
//
// Given a list of aliases, retrieves all associated values stored in the
// vault.
// **NOTE:** This endpoint may expose sensitive data. Therefore, it is
// disabled by default. To enable it, please contact your VGS account
// manager or drop us a line at
// [support@verygoodsecurity.com](mailto:support@verygoodsecurity.com).
//
// GET /aliases
func (c *Client) RevealMultipleAliases(ctx context.Context, params RevealMultipleAliasesParams) (res RevealMultipleAliasesOK, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("revealMultipleAliases"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "RevealMultipleAliases",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/aliases"
	q := uri.NewQueryEncoder()
	{
		// Encode "q" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Q))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	if err := c.securityBasicAuth(ctx, "RevealMultipleAliases", r); err != nil {
		return res, errors.Wrap(err, "security")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRevealMultipleAliasesResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateAlias invokes updateAlias operation.
//
// Apply new classifiers to the value that the specified alias is
// associated with.
//
// PUT /aliases/{alias}
func (c *Client) UpdateAlias(ctx context.Context, request OptUpdateAliasRequest, params UpdateAliasParams) (res UpdateAliasNoContent, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := request.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("updateAlias"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "UpdateAlias",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeUpdateAliasRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/aliases/"
	{
		// Encode "alias" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "alias",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Alias))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "PUT", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	if err := c.securityBasicAuth(ctx, "UpdateAlias", r); err != nil {
		return res, errors.Wrap(err, "security")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateAliasResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
