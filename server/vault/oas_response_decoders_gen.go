// Code generated by ogen, DO NOT EDIT.

package vault

import (
	"io"
	"mime"
	"net/http"
	"path"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/validate"
)

func decodeCreateAliasesResponse(resp *http.Response, span trace.Span) (res CreateAliasesCreated, err error) {
	switch resp.StatusCode {
	case 201:
		match := func(pattern, value string) bool {
			ok, _ := path.Match(pattern, value)
			return ok
		}
		_ = match
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf := getBuf()
			defer putBuf(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			d := jx.GetDecoder()
			defer jx.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response CreateAliasesCreated
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		defRes, err := func() (res ApiErrorsResponseStatusCode, err error) {
			match := func(pattern, value string) bool {
				ok, _ := path.Match(pattern, value)
				return ok
			}
			_ = match
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf := getBuf()
				defer putBuf(buf)
				if _, err := io.Copy(buf, resp.Body); err != nil {
					return res, err
				}

				d := jx.GetDecoder()
				defer jx.PutDecoder(d)
				d.ResetBytes(buf.Bytes())

				var response ApiErrorsResponse
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, err
				}
				return ApiErrorsResponseStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	}
}
func decodeDeleteAliasResponse(resp *http.Response, span trace.Span) (res DeleteAliasNoContent, err error) {
	switch resp.StatusCode {
	case 204:
		return DeleteAliasNoContent{}, nil
	default:
		defRes, err := func() (res ApiErrorsResponseStatusCode, err error) {
			match := func(pattern, value string) bool {
				ok, _ := path.Match(pattern, value)
				return ok
			}
			_ = match
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf := getBuf()
				defer putBuf(buf)
				if _, err := io.Copy(buf, resp.Body); err != nil {
					return res, err
				}

				d := jx.GetDecoder()
				defer jx.PutDecoder(d)
				d.ResetBytes(buf.Bytes())

				var response ApiErrorsResponse
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, err
				}
				return ApiErrorsResponseStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	}
}
func decodeRevealAliasResponse(resp *http.Response, span trace.Span) (res RevealedData, err error) {
	switch resp.StatusCode {
	case 200:
		match := func(pattern, value string) bool {
			ok, _ := path.Match(pattern, value)
			return ok
		}
		_ = match
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf := getBuf()
			defer putBuf(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			d := jx.GetDecoder()
			defer jx.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response RevealedData
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		defRes, err := func() (res ApiErrorsResponseStatusCode, err error) {
			match := func(pattern, value string) bool {
				ok, _ := path.Match(pattern, value)
				return ok
			}
			_ = match
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf := getBuf()
				defer putBuf(buf)
				if _, err := io.Copy(buf, resp.Body); err != nil {
					return res, err
				}

				d := jx.GetDecoder()
				defer jx.PutDecoder(d)
				d.ResetBytes(buf.Bytes())

				var response ApiErrorsResponse
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, err
				}
				return ApiErrorsResponseStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	}
}
func decodeRevealMultipleAliasesResponse(resp *http.Response, span trace.Span) (res RevealMultipleAliasesOK, err error) {
	switch resp.StatusCode {
	case 200:
		match := func(pattern, value string) bool {
			ok, _ := path.Match(pattern, value)
			return ok
		}
		_ = match
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf := getBuf()
			defer putBuf(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			d := jx.GetDecoder()
			defer jx.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response RevealMultipleAliasesOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		defRes, err := func() (res ApiErrorsResponseStatusCode, err error) {
			match := func(pattern, value string) bool {
				ok, _ := path.Match(pattern, value)
				return ok
			}
			_ = match
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf := getBuf()
				defer putBuf(buf)
				if _, err := io.Copy(buf, resp.Body); err != nil {
					return res, err
				}

				d := jx.GetDecoder()
				defer jx.PutDecoder(d)
				d.ResetBytes(buf.Bytes())

				var response ApiErrorsResponse
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, err
				}
				return ApiErrorsResponseStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	}
}
func decodeUpdateAliasResponse(resp *http.Response, span trace.Span) (res UpdateAliasNoContent, err error) {
	switch resp.StatusCode {
	case 204:
		return UpdateAliasNoContent{}, nil
	default:
		defRes, err := func() (res ApiErrorsResponseStatusCode, err error) {
			match := func(pattern, value string) bool {
				ok, _ := path.Match(pattern, value)
				return ok
			}
			_ = match
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf := getBuf()
				defer putBuf(buf)
				if _, err := io.Copy(buf, resp.Body); err != nil {
					return res, err
				}

				d := jx.GetDecoder()
				defer jx.PutDecoder(d)
				d.ResetBytes(buf.Bytes())

				var response ApiErrorsResponse
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, err
				}
				return ApiErrorsResponseStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	}
}
