// Code generated by ogen, DO NOT EDIT.

package vault

import (
	"fmt"
	"time"
)

func (s *ApiErrorsResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Alias
type Alias struct {
	// Opaque string used to substitute the raw value.
	Alias  OptString      "json:\"alias\""
	Format OptAliasFormat "json:\"format\""
}

// Format of the generated alias string.
// See [Alias Formats](#section/Introduction/Alias-Formats) for details.
// Ref: #/components/schemas/AliasFormat
type AliasFormat string

const (
	AliasFormatFPEACCNUMTFOUR             AliasFormat = "FPE_ACC_NUM_T_FOUR"
	AliasFormatFPEALPHANUMERICACCNUMTFOUR AliasFormat = "FPE_ALPHANUMERIC_ACC_NUM_T_FOUR"
	AliasFormatFPESIXTFOUR                AliasFormat = "FPE_SIX_T_FOUR"
	AliasFormatFPESSNTFOUR                AliasFormat = "FPE_SSN_T_FOUR"
	AliasFormatFPETFOUR                   AliasFormat = "FPE_T_FOUR"
	AliasFormatNUMLENGTHPRESERVING        AliasFormat = "NUM_LENGTH_PRESERVING"
	AliasFormatPFPT                       AliasFormat = "PFPT"
	AliasFormatRAWUUID                    AliasFormat = "RAW_UUID"
	AliasFormatUUID                       AliasFormat = "UUID"
)

// Ref: #/components/schemas/ApiError
type ApiError struct {
	// Explanation of what exactly went wrong.
	Detail OptString "json:\"detail\""
	// Request URL.
	Href OptString "json:\"href\""
	// HTTP status code.
	Status OptInt "json:\"status\""
	// High-level reason of why the request failed.
	Title OptString "json:\"title\""
}

type ApiErrorsResponse struct {
	// List of errors that occurred while processing the request.
	Errors []ApiError "json:\"errors\""
}

// ApiErrorsResponseStatusCode wraps ApiErrorsResponse with StatusCode.
type ApiErrorsResponseStatusCode struct {
	StatusCode int
	Response   ApiErrorsResponse
}

type BasicAuth struct {
	Username string
	Password string
}

type CreateAliasesCreated struct {
	// List of stored values along with their aliases.
	Data []RevealedData "json:\"data\""
}

// Ref: #/components/schemas/CreateAliasesRequest
type CreateAliasesRequest struct {
	Data []CreateAliasesRequestDataItem "json:\"data\""
}

// CreateAliasesRequestDataItem represents sum type.
type CreateAliasesRequestDataItem struct {
	Type                          CreateAliasesRequestDataItemType // switch on this field
	CreateAliasesRequestDataItem0 CreateAliasesRequestDataItem0
	CreateAliasesRequestDataItem1 CreateAliasesRequestDataItem1
}

// CreateAliasesRequestDataItemType is oneOf type of CreateAliasesRequestDataItem.
type CreateAliasesRequestDataItemType string

// Possible values for CreateAliasesRequestDataItemType.
const (
	CreateAliasesRequestDataItem0CreateAliasesRequestDataItem CreateAliasesRequestDataItemType = "CreateAliasesRequestDataItem0"
	CreateAliasesRequestDataItem1CreateAliasesRequestDataItem CreateAliasesRequestDataItemType = "CreateAliasesRequestDataItem1"
)

// IsCreateAliasesRequestDataItem0 reports whether CreateAliasesRequestDataItem is CreateAliasesRequestDataItem0.
func (s CreateAliasesRequestDataItem) IsCreateAliasesRequestDataItem0() bool {
	return s.Type == CreateAliasesRequestDataItem0CreateAliasesRequestDataItem
}

// IsCreateAliasesRequestDataItem1 reports whether CreateAliasesRequestDataItem is CreateAliasesRequestDataItem1.
func (s CreateAliasesRequestDataItem) IsCreateAliasesRequestDataItem1() bool {
	return s.Type == CreateAliasesRequestDataItem1CreateAliasesRequestDataItem
}

// SetCreateAliasesRequestDataItem0 sets CreateAliasesRequestDataItem to CreateAliasesRequestDataItem0.
func (s *CreateAliasesRequestDataItem) SetCreateAliasesRequestDataItem0(v CreateAliasesRequestDataItem0) {
	s.Type = CreateAliasesRequestDataItem0CreateAliasesRequestDataItem
	s.CreateAliasesRequestDataItem0 = v
}

// GetCreateAliasesRequestDataItem0 returns CreateAliasesRequestDataItem0 and true boolean if CreateAliasesRequestDataItem is CreateAliasesRequestDataItem0.
func (s CreateAliasesRequestDataItem) GetCreateAliasesRequestDataItem0() (v CreateAliasesRequestDataItem0, ok bool) {
	if !s.IsCreateAliasesRequestDataItem0() {
		return v, false
	}
	return s.CreateAliasesRequestDataItem0, true
}

// NewCreateAliasesRequestDataItem0CreateAliasesRequestDataItem returns new CreateAliasesRequestDataItem from CreateAliasesRequestDataItem0.
func NewCreateAliasesRequestDataItem0CreateAliasesRequestDataItem(v CreateAliasesRequestDataItem0) CreateAliasesRequestDataItem {
	var s CreateAliasesRequestDataItem
	s.SetCreateAliasesRequestDataItem0(v)
	return s
}

// SetCreateAliasesRequestDataItem1 sets CreateAliasesRequestDataItem to CreateAliasesRequestDataItem1.
func (s *CreateAliasesRequestDataItem) SetCreateAliasesRequestDataItem1(v CreateAliasesRequestDataItem1) {
	s.Type = CreateAliasesRequestDataItem1CreateAliasesRequestDataItem
	s.CreateAliasesRequestDataItem1 = v
}

// GetCreateAliasesRequestDataItem1 returns CreateAliasesRequestDataItem1 and true boolean if CreateAliasesRequestDataItem is CreateAliasesRequestDataItem1.
func (s CreateAliasesRequestDataItem) GetCreateAliasesRequestDataItem1() (v CreateAliasesRequestDataItem1, ok bool) {
	if !s.IsCreateAliasesRequestDataItem1() {
		return v, false
	}
	return s.CreateAliasesRequestDataItem1, true
}

// NewCreateAliasesRequestDataItem1CreateAliasesRequestDataItem returns new CreateAliasesRequestDataItem from CreateAliasesRequestDataItem1.
func NewCreateAliasesRequestDataItem1CreateAliasesRequestDataItem(v CreateAliasesRequestDataItem1) CreateAliasesRequestDataItem {
	var s CreateAliasesRequestDataItem
	s.SetCreateAliasesRequestDataItem1(v)
	return s
}

type CreateAliasesRequestDataItem0 struct {
	// List of tags to classify the value with.
	Classifiers []string    "json:\"classifiers\""
	Format      AliasFormat "json:\"format\""
	// Storage medium to use.
	// VOLATILE results in data being persisted into an in-memory data store for one hour which is
	// required for PCI compliant storage of card security code data.
	Storage OptCreateAliasesRequestDataItem0Storage "json:\"storage\""
	// Raw value to encrypt & store in the vault.
	Value string "json:\"value\""
}

// Storage medium to use.
// VOLATILE results in data being persisted into an in-memory data store for one hour which is
// required for PCI compliant storage of card security code data.
type CreateAliasesRequestDataItem0Storage string

const (
	CreateAliasesRequestDataItem0StoragePERSISTENT CreateAliasesRequestDataItem0Storage = "PERSISTENT"
	CreateAliasesRequestDataItem0StorageVOLATILE   CreateAliasesRequestDataItem0Storage = "VOLATILE"
)

type CreateAliasesRequestDataItem1 struct {
	// Existing alias to use as a reference.
	Alias  string      "json:\"alias\""
	Format AliasFormat "json:\"format\""
}

// DeleteAliasNoContent is response for DeleteAlias operation.
type DeleteAliasNoContent struct{}

// NewOptAliasFormat returns new OptAliasFormat with value set to v.
func NewOptAliasFormat(v AliasFormat) OptAliasFormat {
	return OptAliasFormat{
		Value: v,
		Set:   true,
	}
}

// OptAliasFormat is optional AliasFormat.
type OptAliasFormat struct {
	Value AliasFormat
	Set   bool
}

// IsSet returns true if OptAliasFormat was set.
func (o OptAliasFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAliasFormat) Reset() {
	var v AliasFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAliasFormat) SetTo(v AliasFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAliasFormat) Get() (v AliasFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAliasFormat) Or(d AliasFormat) AliasFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateAliasesRequest returns new OptCreateAliasesRequest with value set to v.
func NewOptCreateAliasesRequest(v CreateAliasesRequest) OptCreateAliasesRequest {
	return OptCreateAliasesRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateAliasesRequest is optional CreateAliasesRequest.
type OptCreateAliasesRequest struct {
	Value CreateAliasesRequest
	Set   bool
}

// IsSet returns true if OptCreateAliasesRequest was set.
func (o OptCreateAliasesRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateAliasesRequest) Reset() {
	var v CreateAliasesRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateAliasesRequest) SetTo(v CreateAliasesRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateAliasesRequest) Get() (v CreateAliasesRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateAliasesRequest) Or(d CreateAliasesRequest) CreateAliasesRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateAliasesRequestDataItem0Storage returns new OptCreateAliasesRequestDataItem0Storage with value set to v.
func NewOptCreateAliasesRequestDataItem0Storage(v CreateAliasesRequestDataItem0Storage) OptCreateAliasesRequestDataItem0Storage {
	return OptCreateAliasesRequestDataItem0Storage{
		Value: v,
		Set:   true,
	}
}

// OptCreateAliasesRequestDataItem0Storage is optional CreateAliasesRequestDataItem0Storage.
type OptCreateAliasesRequestDataItem0Storage struct {
	Value CreateAliasesRequestDataItem0Storage
	Set   bool
}

// IsSet returns true if OptCreateAliasesRequestDataItem0Storage was set.
func (o OptCreateAliasesRequestDataItem0Storage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateAliasesRequestDataItem0Storage) Reset() {
	var v CreateAliasesRequestDataItem0Storage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateAliasesRequestDataItem0Storage) SetTo(v CreateAliasesRequestDataItem0Storage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateAliasesRequestDataItem0Storage) Get() (v CreateAliasesRequestDataItem0Storage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateAliasesRequestDataItem0Storage) Or(d CreateAliasesRequestDataItem0Storage) CreateAliasesRequestDataItem0Storage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRevealedDataStorage returns new OptRevealedDataStorage with value set to v.
func NewOptRevealedDataStorage(v RevealedDataStorage) OptRevealedDataStorage {
	return OptRevealedDataStorage{
		Value: v,
		Set:   true,
	}
}

// OptRevealedDataStorage is optional RevealedDataStorage.
type OptRevealedDataStorage struct {
	Value RevealedDataStorage
	Set   bool
}

// IsSet returns true if OptRevealedDataStorage was set.
func (o OptRevealedDataStorage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRevealedDataStorage) Reset() {
	var v RevealedDataStorage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRevealedDataStorage) SetTo(v RevealedDataStorage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRevealedDataStorage) Get() (v RevealedDataStorage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRevealedDataStorage) Or(d RevealedDataStorage) RevealedDataStorage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAliasRequest returns new OptUpdateAliasRequest with value set to v.
func NewOptUpdateAliasRequest(v UpdateAliasRequest) OptUpdateAliasRequest {
	return OptUpdateAliasRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAliasRequest is optional UpdateAliasRequest.
type OptUpdateAliasRequest struct {
	Value UpdateAliasRequest
	Set   bool
}

// IsSet returns true if OptUpdateAliasRequest was set.
func (o OptUpdateAliasRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAliasRequest) Reset() {
	var v UpdateAliasRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAliasRequest) SetTo(v UpdateAliasRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAliasRequest) Get() (v UpdateAliasRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAliasRequest) Or(d UpdateAliasRequest) UpdateAliasRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type RevealMultipleAliasesOK struct {
	Data []RevealedData "json:\"data\""
}

// Ref: #/components/schemas/RevealedData
type RevealedData struct {
	// List of aliases associated with the value.
	Aliases []Alias "json:\"aliases\""
	// List of tags the value is classified with.
	Classifiers []string "json:\"classifiers\""
	// Creation time, in UTC.
	CreatedAt OptDateTime "json:\"created_at\""
	// Storage medium to use.
	// VOLATILE results in data being persisted into an in-memory data store for one hour which is
	// required for PCI compliant storage of card security code data.
	Storage OptRevealedDataStorage "json:\"storage\""
	// Decrypted value stored in the vault.
	Value OptString "json:\"value\""
}

// Storage medium to use.
// VOLATILE results in data being persisted into an in-memory data store for one hour which is
// required for PCI compliant storage of card security code data.
type RevealedDataStorage string

const (
	RevealedDataStoragePERSISTENT RevealedDataStorage = "PERSISTENT"
	RevealedDataStorageVOLATILE   RevealedDataStorage = "VOLATILE"
)

// UpdateAliasNoContent is response for UpdateAlias operation.
type UpdateAliasNoContent struct{}

// Ref: #/components/schemas/UpdateAliasRequest
type UpdateAliasRequest struct {
	Data UpdateAliasRequestData "json:\"data\""
}

type UpdateAliasRequestData struct {
	// List of tags to classify the value with.
	Classifiers []string "json:\"classifiers\""
}
