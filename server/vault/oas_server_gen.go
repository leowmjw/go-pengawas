// Code generated by ogen, DO NOT EDIT.

package vault

import (
	"context"

	"go.opentelemetry.io/otel/metric/instrument/syncint64"

	"github.com/ogen-go/ogen/otelogen"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateAliases implements createAliases operation.
	//
	// Stores multiple values at once & returns their aliases.
	// Alternatively, this endpoint may be used to associate additional (i.e.
	// secondary) aliases with the same underlying data as the reference
	// alias specified in the request body.
	// **NOTE:** You cannot reference the same alias more than once in a
	// single request.
	//
	// POST /aliases
	CreateAliases(ctx context.Context, req OptCreateAliasesRequest) (CreateAliasesCreated, error)
	// DeleteAlias implements deleteAlias operation.
	//
	// Removes a single alias.
	//
	// DELETE /aliases/{alias}
	DeleteAlias(ctx context.Context, params DeleteAliasParams) (DeleteAliasNoContent, error)
	// RevealAlias implements revealAlias operation.
	//
	// Retrieves a stored value along with its aliases.
	// **NOTE:** This endpoint may expose sensitive data. Therefore, it is
	// disabled by default. To enable it, please contact your VGS account
	// manager or drop us a line at
	// [support@verygoodsecurity.com](mailto:support@verygoodsecurity.com).
	//
	// GET /aliases/{alias}
	RevealAlias(ctx context.Context, params RevealAliasParams) (RevealedData, error)
	// RevealMultipleAliases implements revealMultipleAliases operation.
	//
	// Given a list of aliases, retrieves all associated values stored in the
	// vault.
	// **NOTE:** This endpoint may expose sensitive data. Therefore, it is
	// disabled by default. To enable it, please contact your VGS account
	// manager or drop us a line at
	// [support@verygoodsecurity.com](mailto:support@verygoodsecurity.com).
	//
	// GET /aliases
	RevealMultipleAliases(ctx context.Context, params RevealMultipleAliasesParams) (RevealMultipleAliasesOK, error)
	// UpdateAlias implements updateAlias operation.
	//
	// Apply new classifiers to the value that the specified alias is
	// associated with.
	//
	// PUT /aliases/{alias}
	UpdateAlias(ctx context.Context, req OptUpdateAliasRequest, params UpdateAliasParams) (UpdateAliasNoContent, error)
	// NewError creates ApiErrorsResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) ApiErrorsResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	cfg config

	requests syncint64.Counter
	errors   syncint64.Counter
	duration syncint64.Histogram
}

func NewServer(h Handler, sec SecurityHandler, opts ...Option) (*Server, error) {
	s := &Server{
		h:   h,
		sec: sec,
		cfg: newConfig(opts...),
	}
	var err error
	if s.requests, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerRequestCount); err != nil {
		return nil, err
	}
	if s.errors, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerErrorsCount); err != nil {
		return nil, err
	}
	if s.duration, err = s.cfg.Meter.SyncInt64().Histogram(otelogen.ServerDuration); err != nil {
		return nil, err
	}
	return s, nil
}
