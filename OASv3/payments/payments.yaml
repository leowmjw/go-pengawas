openapi: 3.0.2
info:
  version: 1.0.0
  title: VGS Payment Orchestration API
  description: |
    Integrates with 180+ payment gateways globally.
  contact:
    name: VGS Dev
    email: dev@verygoodsecurity.com
tags:
  - name: transfers
    description: |
      Payments done through a particular gateway.
    x-displayName: Transfers
  - name: verifications
    description: |
      Verification of a payment method through a particular gateway.
    x-displayName: verifications
  - name: financial instruments
    description: |
      A Financial Instrument resource represents a payment card, bank account or other financial instrument such as a wallet which can represent a source, or destination of funds.
    x-displayName: financial instruments
  - name: orders
    description: |
      Order information for creating a session on Checkout Hosted Page.
    x-displayName: orders
  - name: gateways
    description: |
      Payment gateway resource used for making a transfer.
    x-displayName: gateways
  - name: rules
    description: |
      Rule for determining gateway, retry or block a transfer.
    x-displayName: rules
  - name: 3ds
    description: |
      3DS provider and authentication.
    x-displayName: 3DS
servers:
  - url: https://payments.sandbox.verygoodsecurity.app
    description: Sandbox
  - url: https://payments.live.verygoodsecurity.app
    description: Live
externalDocs:
  description: "Find out more"
  url: "https://www.verygoodsecurity.com/docs/payment-optimization/orchestration"
paths:
  /3ds_authentications:
    post:
      description: |
        Create a 3DS authentication.
        
        Mainly to be invoked by VGS checkout.js, not meant to be called by user directly.
      operationId: CreateThreeDSAuthentication
      summary: Start a 3DS authentication session
      tags:
        - 3ds
      requestBody:
        $ref: '#/components/requestBodies/ThreeDSAuthenticationRequest'
      responses:
        '200':
          $ref: '#/components/responses/ThreeDSAuthenticationDataResponse'
        default:
          $ref: '#/components/responses/ApiErrorsResponse'

  /3ds_authentications/{3ds_authentication_id}/notifications:
    parameters:
      - $ref: '#/components/parameters/3ds_authentication_id'
    post:
      description: |
        The redirect URL for sending a 3DS result notification message to iframe parent window.

        Mainly to be invoked by VGS checkout.js, not meant to be called by user directly.
      operationId: ThreeDSAuthenticationNotifications
      summary: Notify message for 3DS authentication flow
      tags:
        - 3ds
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        '200':
          description: An HTML page that post the given form payload message to the parent window from inside the iframe.
          content:
            text/html:
              schema:
                type: string
                format: binary
        default:
          $ref: '#/components/responses/ApiErrorsResponse'

  /3ds_authentications/{3ds_authentication_id}/fingerprints:
    parameters:
      - $ref: '#/components/parameters/3ds_authentication_id'
    post:
      description: |
        Finish the device fingerprint step for the 3DS authentication session.

        Mainly to be invoked by VGS checkout.js, not meant to be called by user directly.
#      operationId: ThreeDSAuthenticationDeviceFingerprint
      summary: Finish the device fingerprint step for 3DS authentication flow
      tags:
        - 3ds
      requestBody:
        $ref: '#/components/requestBodies/ThreeDSAuthenticationArbitraryJSONRequest'
      responses:
        '200':
          $ref: '#/components/responses/ThreeDSAuthenticationDataResponse'
        default:
          $ref: '#/components/responses/ApiErrorsResponse'

  /3ds_authentications/{3ds_authentication_id}/challenges:
    parameters:
      - $ref: '#/components/parameters/3ds_authentication_id'
    post:
      description: |
        Finish the challenge step for the 3DS authentication session.

        Mainly to be invoked by VGS checkout.js, not meant to be called by user directly.
#      operationId: ThreeDSAuthenticationChallenge
      summary: Finish the challenge step for 3DS authentication flow
      tags:
        - 3ds
      requestBody:
        $ref: '#/components/requestBodies/ThreeDSAuthenticationArbitraryJSONRequest'
      responses:
        '200':
          $ref: '#/components/responses/ThreeDSAuthenticationDataResponse'
        default:
          $ref: '#/components/responses/ApiErrorsResponse'

  /3ds_providers:
    post:
      description: |
        Create a 3DS provider with the credentials and configuration.

        Currently only one 3DS provider creation is allowed. Please contact VGS support if you need to replace the old 3DS provider.
      operationId: CreateThreeDSProvider
      summary: Create a 3DS provider
      tags:
        - 3ds
      requestBody:
        $ref: '#/components/requestBodies/ThreeDSProviderRequest'
      responses:
        '200':
          $ref: '#/components/responses/ThreeDSProviderDataResponse'
        '409':
          description: Cannot create 3DS provider, already exists.
        default:
          $ref: '#/components/responses/ThreeDSProviderApiErrorsResponse'

  /orders/{order_id}:
    get:
      description: |
        Get a particular order by id.
      summary: Retrieve the order
      parameters:
        - $ref: "#/components/parameters/order_id"
      tags:
        - orders
      responses:
        '200':
          $ref: '#/components/responses/OrderDataResponse'
        default:
          $ref: '#/components/responses/OrderApiErrorsResponse'
  /orders:
    post:
      summary: Place an order
      description: Place an order and return session id for it.
      operationId: CreateOrder
      tags: 
       - orders
      requestBody:
          $ref: '#/components/requestBodies/OrderCreateRequest'
      responses:
        '201':
          $ref: '#/components/responses/OrderDataResponse'
        default:
          $ref: '#/components/responses/OrderApiErrorsResponse'  
          
  /transfers:
    get:
      description: |
        List transfer records filtered by the query condition if provided
      operationId: GetTransfers
      summary: List transfers
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/limit"
      - $ref: "#/components/parameters/transfer_filter"
      - $ref: "#/components/parameters/transfer_sorting"
      tags:
        - transfers
      responses:
        '200':
          $ref: '#/components/responses/TransferListDataResponse'
        default:
          $ref: '#/components/responses/TransfersApiErrorsResponse'

    post:
      description: |
        Creates a transfer record in one of the ways:
        1. Capture the funds instantly
        2. Create an authorization to be captured manually later.
        The authorization places the funds on hold with the customer's bank. This can be useful in situations where you need to make a sale, but won't be able to ship merchandise for several days. You can authorize the transfer to ensure funds availability, then capture the transfer to obtain the funds upon shipment.
        3. Creates a transfer from order information
      operationId: CreateTransfer
      summary: Create a transfer
      tags:
        - transfers
      requestBody:
        $ref: '#/components/requestBodies/TransferCreateRequest'
      responses:
        '200':
          $ref: '#/components/responses/TransferDataResponse'
        default:
          $ref: '#/components/responses/TransfersApiErrorsResponse'

  '/transfers/{transfer_id}':
    parameters:
      - $ref: '#/components/parameters/transfer_id'
    get:
      description: Get a particular transfer by id.
      operationId: GetTransferById
      summary: Retrieve the transfer
      tags:
        - transfers
      responses:
        '200':
          $ref: '#/components/responses/TransferDataResponse'
        '404':
          description: Transfer not found.
        default:
          $ref: '#/components/responses/TransfersApiErrorsResponse'

    put:
      description: |
        Finalize the transfer by moving its state from `pending` to `successful` (captured) or `canceled` via the `action` parameter.
        Only transfers with `debit` type and `pending` state is allowed.

        When `capture` is passed in the `action` parameter, the funds, previously held with the customer's bank,
        will be transferred from the customer to the gateway's account owner or merchant.
        It will also update the transfer's `state` from `pending` to `successful` if the capture is successful and
        return the same transfer with `200` status. The `amount_captured` will be updated accordingly.

        When `cancel` is passed in the `action` parameter, the funds, previously held with the customer's bank,
        will be released. Some cards may not support a hard release and the funds will be made available after
        a period of seven days from the original authorization.
        It will create a new transfer with `reversal` type, return it with `201` status.
        The `amount_reversed` of original transfer will be updated accordingly.

      operationId: FinalizeTransfer
      summary: Update the transfer
      tags:
        - transfers
      requestBody:
        $ref: '#/components/requestBodies/TransferUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/TransferDataResponse'
        '201':
          $ref: '#/components/responses/TransferDataResponse'
        '404':
          description: Transfer not found.
        '409':
          description: Payment has already been captured or canceled.
        default:
          $ref: '#/components/responses/TransfersApiErrorsResponse'

  '/transfers/{transfer_id}/reversals':
    parameters:
      - $ref: '#/components/parameters/transfer_id'
    post:
      description: Reverse a specific transfer by id.
      operationId: ReverseTransferById
      summary: Reverse the transfer
      tags:
        - transfers
      requestBody:
        $ref: '#/components/requestBodies/ReversalRequest'
      responses:
        '200':
          $ref: '#/components/responses/TransferDataResponse'
        '404':
          description: Transfer not found.
        default:
          $ref: '#/components/responses/TransfersApiErrorsResponse'

  /verifications:
    post:
      description: |
        This request verifies that the customer's card is valid without actually charging an amount on the card. For example, you may want to verify a credit card before adding it to a customer profile for future billing transfers.

        The exact verification method varies from psp to psp, but usually this is either a $0 charge, or a $1 authorization with immediate cancellation.
      operationId: CreateVerification
      summary: Verify the card
      tags:
        - verifications
      requestBody:
        $ref: '#/components/requestBodies/VerificationRequest'
      responses:
        '200':
          $ref: '#/components/responses/VerificationTransferResponse'
        default:
          $ref: '#/components/responses/ApiErrorsResponse'

  /financial_instruments:
    get:
      description: |
        List financial instrument records filtered by the query condition if provided
      operationId: GetFinancialInstruments
      summary: List financial instruments
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/limit"
#      - $ref: "#/components/parameters/financial_instrument_filter"
      - $ref: "#/components/parameters/financial_instrument_sorting"
      tags:
        - financial instruments
      responses:
        '200':
          $ref: '#/components/responses/FinancialInstrumentListDataResponse'
        default:
          $ref: '#/components/responses/FinancialInstrumentApiErrorsResponse'

    post:
      description: |
        Create a financial instrument for later use for sending or receiving money.
      operationId: CreateFinancialInstrument
      summary: Create a financial instrument
      tags:
        - financial instruments
      requestBody:
        $ref: '#/components/requestBodies/FinancialInstrumentCreateRequest'
      responses:
        '201':
          $ref: '#/components/responses/FinancialInstrumentResponse'
        'default':
          $ref: '#/components/responses/FinancialInstrumentApiErrorsResponse'

  /financial_instruments/{financial_instrument_id}:
    parameters:
      - $ref: '#/components/parameters/financial_instrument_id'
    get:
      description: Get a particular financial instrument by id.
      operationId: GetFinancialInstrumentById
      summary: Retrieve the Financial Instrument
      tags:
        - financial instruments
      responses:
        '200':
          $ref: '#/components/responses/FinancialInstrumentResponse'
        '404':
          description: Not found.
        default:
          $ref: '#/components/responses/ApiErrorsResponse'
    delete:
      description: Delete a particular financial instrument by id.
      operationId: DeleteFinancialInstrumentById
      summary: Delete the Financial Instrument
      tags:
        - financial instruments
      responses:
        '204':
          description: No content
        '404':
          description: Not found.
        default:
          $ref: '#/components/responses/ApiErrorsResponse'

  /gateways:
    get:
      description: |
        List gateway records filtered by the query condition if provided
      operationId: GetGateways
      summary: List gateways
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/limit"
      - $ref: "#/components/parameters/gateway_filter"
      - $ref: "#/components/parameters/gateway_sorting"
      tags:
        - gateways
      responses:
        '200':
          $ref: '#/components/responses/GatewayListDataResponse'
        default:
          $ref: '#/components/responses/GatewaysApiErrorsResponse'

    post:
      description: |
        Create a gateway with PSP's credentials to point transfers to based on certain criteria.
      operationId: CreateGateway
      summary: Create a gateway
      tags:
        - gateways
      requestBody:
        $ref: '#/components/requestBodies/GatewayCreateRequest'
      responses:
        '200':
          $ref: '#/components/responses/GatewayDataResponse'
        '409':
          description: Cannot create gateway, duplicate gateway id.
        default:
          $ref: '#/components/responses/GatewaysApiErrorsResponse'

  /gateways/{gateway_id}:
    parameters:
      - $ref: '#/components/parameters/gateway_id'
    get:
      description: Get a particular gateway by id.
      operationId: GetGatewayById
      summary: Retrieve the gateway
      tags:
        - gateways
      responses:
        '200':
          $ref: '#/components/responses/GatewayDataResponse'
        '404':
          description: Not found.
        default:
          $ref: '#/components/responses/ApiErrorsResponse'

    put:
      description: Update a particular gateway by id.
      operationId: UpdateGatewayById
      summary: Update a gateway
      tags:
        - gateways
      requestBody:
        $ref: '#/components/requestBodies/GatewayUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/GatewayDataResponse'
        '404':
          description: Not found.
        default:
          $ref: '#/components/responses/ApiErrorsResponse'

    delete:
      operationId: DeleteGateway
      summary: Delete the gateway
      tags:
        - gateways
      responses:
        '204':
          description: No content
        '404':
          description: Not found.
        '409':
          description: Cannot delete gateway (likely used in rules).
        default:
          $ref: '#/components/responses/GatewaysApiErrorsResponse'

  /rules:
    get:
      description: |
        List rule records filtered by the query condition if provided
      operationId: GetRules
      summary: List rules
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/limit"
      - $ref: "#/components/parameters/rule_filter"
      - $ref: "#/components/parameters/rule_sorting"
      tags:
        - rules
      responses:
        '200':
          $ref: '#/components/responses/RuleListDataResponse'
        default:
          $ref: '#/components/responses/RulesApiErrorsResponse'

    post:
      description: |
        Create a rule by which the API will determine to which gateway to point the transfers to based on whether the rule conditions are met.
      operationId: CreateRule
      summary: Crate a rule
      tags:
        - rules
      requestBody:
        $ref: '#/components/requestBodies/RuleCreateRequest'
      responses:
        '200':
          $ref: '#/components/responses/RuleResponse'
        default:
          $ref: '#/components/responses/RulesApiErrorsResponse'

  /rules/{rule_id}:
    parameters:
      - $ref: '#/components/parameters/rule_id'
    get:
      description: Get a particular rule by id.
      operationId: GetRuleById
      summary: Retrieve the rule
      tags:
        - rules
      responses:
        '200':
          $ref: '#/components/responses/RuleResponse'
        '404':
          description: Not found.
        default:
          $ref: '#/components/responses/ApiErrorsResponse'
    put:
      description: Update a particular rule by id.
      operationId: UpdateRuleById
      summary: Update the rule
      tags:
        - rules
      requestBody:
        $ref: '#/components/requestBodies/RuleUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/RuleResponse'
        '404':
          description: Not found.
        default:
          $ref: '#/components/responses/ApiErrorsResponse'

    delete:
      operationId: DeleteRule
      summary: Delete the rule
      tags:
        - rules
      responses:
        '204':
          description: No content
        '404':
          description: Not found.
        default:
          $ref: '#/components/responses/RulesApiErrorsResponse'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.verygoodsecurity.com/auth/realms/vgs/protocol/openid-connect/auth
          tokenUrl: https://auth.verygoodsecurity.com/auth/realms/vgs/protocol/openid-connect/token
          scopes:
            "transfers:read": Read transfers and reversals for the account
            "transfers:admin": Manage all transfers and reversals across all sub-accounts
            "financial-instruments:read": Read financial instruments for the account
            "financial-instruments:admin": Manage all financial instruments across all sub-accounts
            "orders:admin": Manage all orders across all sub-accounts
            "orders:read": Read all orders for the account
            "gateways:admin": Manage all gateways configurations
            "rules:admin": Manage all rules configurations
            "3ds:admin": Manage 3DS providers

        clientCredentials:
          tokenUrl: https://auth.verygoodsecurity.com/auth/realms/vgs/protocol/openid-connect/token
          scopes:
            "transfers:write": Verify or create a transfer during the payment flow
            "transfers:read": Read transfers and reversals for the account
            "transfers:admin": Manage all transfers and reversals across all sub-accounts
            "financial-instruments:write": Create financial instruments during the payment flow
            "financial-instruments:read": Read financial instruments for the account
            "financial-instruments:admin": Manage all financial instruments across all sub-accounts
            "orders:write": Place an order
            "orders:read": Read all orders for the account
            "orders:admin": Manage all orders across all sub-accounts
            "gateways:admin": Manage all gateways configurations
            "rules:admin": Manage all rules configurations
            "3ds:admin": Manage 3DS providers

  schemas:
    Amount:
      type: integer
      description: |
        Amount intended to be collected by this payment. A positive integer representing how much to
        charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100,
        a zero-decimal currency).
      example: 100
      minimum: 1
      maximum: 99999999

    ApiError:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/GeneralError'
            description: List of errors that occurred while processing the request.
            minItems: 1
        trace_id:
          description: A unique identifier of the failed request.
          type: string
          example: ab28bdaad3d6e136e6eb9ce31cca9855

    AVSResult:
      description: |
        Address Verification Service result if available. The combination of `code` and `message` could be one of

        - A : Street address matches, but postal code does not match.
        - B : Street address matches, but postal code not verified.
        - C : Street address and postal code do not match.
        - D : Street address and postal code match.
        - E : AVS data is invalid or AVS is not allowed for this card type.
        - F : Card member's name does not match, but billing postal code matches.
        - G : Non-U.S. issuing bank does not support AVS.
        - H : Card member's name does not match. Street address and postal code match.
        - I : Address not verified.
        - J : Card member's name, billing address, and postal code match. Shipping information verified and chargeback protection guaranteed through the Fraud Protection Program.
        - K : Card member's name matches but billing address and billing postal code do not match.
        - L : Card member's name and billing postal code match, but billing address does not match.
        - M : Street address and postal code match.
        - N : Street address and postal code do not match. For American Express: Card member's name, street address and postal code do not match.
        - O : Card member's name and billing address match, but billing postal code does not match.
        - P : Postal code matches, but street address not verified.
        - Q : Card member's name, billing address, and postal code match. Shipping information verified but chargeback protection not guaranteed.
        - R : System unavailable.
        - S : U.S.-issuing bank does not support AVS.
        - T : Card member's name does not match, but street address matches.
        - U : Address information unavailable.
        - V : Card member's name, billing address, and billing postal code match.
        - W : Street address does not match, but 9-digit postal code matches.
        - X : Street address and 9-digit postal code match.
        - Y : Street address and 5-digit postal code match.
        - Z : Street address does not match, but 5-digit postal code matches.

        Please notice, some PSP may return different `code` and `message` values not listed above
      type: object
      nullable: true
      properties:
        code:
          description: "Code of AVS result"
          type: string
          nullable: true
          example: "Y"
        message:
          description: "Message of AVS result"
          type: string
          nullable: true
          example: "Street address and 5-digit postal code match."
        street_match:
          description: "Street match of AVS result"
          type: string
          nullable: true
          example: "Y"
        postal_match:
          description: "Postal code match of AVS result"
          type: string
          nullable: true
          example: "N"
  
    BrowserInfo:
      type: object
      description: The information of browser collected for 3DS authentication
      required:
        - java_enabled
        - language
        - color_depth
        - timezone
        - screen_width
        - screen_height
        - user_agent
      properties:
        java_enabled:
          type: boolean
          description: Is Java enabled or not for the browser
          example: false
        language:
          type: string
          description: The language of the browser
          example: en-US
        color_depth:
          type: string
          description: Color depth of screen
          example: "32"
        screen_width:
          type: string
          description: Width of screen
          example: "1280"
        screen_height:
          type: string
          description: Height of screen
          example: "720"
        timezone:
          type: string
          description: Color depth of screen
          example: "420"
        user_agent:
          type: string
          description: User-Agent of browser
          example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36"

    DateOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
          - '>'
          - '>='
          - '<'
          - '<='
        value: 
          type: string
          format: date-time
          description: Filtering time value, in UTC.
          example: "2021-05-15T12:30:45Z"

    Error:
      type: object
      description: An error object
      properties:
        detail:
          description: Explanation of what exactly went wrong.
          type: string
          example: Field "bar" is missing

    FinancialInstrument:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/PaymentCardObject'

    FinancialInstrumentApiErrors:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/FinancialInstrumentError'
            description: List of errors that occurred while processing the request.
            minItems: 1
        trace_id:
          description: A unique identifier of the failed request.
          type: string
          example: ab28bdaad3d6e136e6eb9ce31cca9855

    FinancialInstrumentBooleanOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - and
          - or
        values: 
          type: array
          items:
            type: object
            description: "A FinancialInstrumentFilteringOperator object (recursive)"
            minItems: 2

    FinancialInstrumentDateOperator:
      $ref: '#/components/schemas/DateOperator'

    FinancialInstrumentError:
      nullable: false

    FinancialInstrumentFilter:
      type: array
      items:
        description: List of financial instrument filtering operators.
        $ref: '#/components/schemas/FinancialInstrumentFilteringOperator'
        minItems: 1

    FinancialInstrumentFilteringOperator:
        $ref: '#/components/schemas/FinancialInstrumentNotOperator'

    FinancialInstrumentIdMemberOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - 'in'
          - 'not_in'
        values: 
          type: array
          items:
            type: string
            description: "ID of a financial instrument"
            example: "FN6imeVBVSrfyS62QiE2kFCv"

    FinancialInstrumentIdOperator:
      nullable: false

    FinancialInstrumentIdValueOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
        value: 
          type: string
          description: "ID of a financial instrument"
          example: "FN6imeVBVSrfyS62QiE2kFCv"

    FinancialInstrumentIntegerOperator:
      nullable: false

    FinancialInstrumentListData:
      type: object
      required:
        - data
        - meta
        - links
      additionalProperties: false
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FinancialInstrument'
        meta:
          type: object
          properties:
            total_elements:
              type: integer
              description: Total number of financial instruments.
              example: 42
            total_pages:
              type: integer
              description: Total number of pages.
              example: 4
        links:
          type: object
          required:
            - self
            - first
            - last
          properties:
            self:
              type: string
              description: The current page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/financial_instruments?page=5&limit=10"
            prev:
              type: string
              description: The previous page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/financial_instruments?page=4&limit=10"
            next:
              type: string
              description: The next page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/financial_instruments?page=6&limit=10"
            first:
              type: string
              description: The first page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/financial_instruments?page=0&limit=10"
            last:
              type: string
              description: The last page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/financial_instruments?page=37&size=10"

    FinancialInstrumentNotOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - not
        value: 
          type: object
          description: "A FinancialInstrumentFilteringOperator object (recursive)"

    FinancialInstrumentStringOperator:
      nullable: false

    FinancialInstrumentTypeMemberOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - 'in'
          - 'not_in'
        values: 
          type: array
          items:
            type: string
            enum:
            - card
            - psp_token

    FinancialInstrumentTypeOperator:
      nullable: false

    FinancialInstrumentTypeValueOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
        value: 
          type: string
          enum:
          - card
          - psp_token

    FinancialInstrumentSorting:
      type: array
      items:
        description: List of financial instrument sorting specs.
        $ref: '#/components/schemas/FinancialInstrumentSortingSpec'
        minItems: 1

    FinancialInstrumentSortingSpec:
      nullable: false

    Gateway:
      description: |
        An id of an existing merchant gateway record within payment orchestration.
      type: object
      required:
      - type
      - id
      - config
      - default_currency
      - created_at
      - updated_at
      additionalProperties: false
      properties:
        type:
          $ref: "#/components/schemas/GatewayPSPType"
        id:
          type: string
          description: |
            Unique identifier for this gateway.

            Used to refer to gateway in rules.
        default_currency:
          type: string
          description: |
            ISO 4217 currency code. Defaults to USD
          default: USD
        default_gateway:
          type: boolean
          description: |
            Is this gateway the default gateway or not.

            A default gateway is needed and will be used when a transfer without matching any routing rule created.
            There could be only one default gateway at the same time.
            When a new gateway created as the default gateway, the old default gateway will no longer be the default gateway anymore.
          default: false
        config:
          type: object
          description: |
            Any specific keys passed through to the gateway configuration. Refer to docs
        created_at:
          type: string
          format: date-time
          description: Creation time, in UTC.
          example: "2021-05-15T12:30:45Z"
        updated_at:
          type: string
          format: date-time
          description: Last time psp token was updated, in UTC.
          example: "2021-05-15T12:30:45Z"

    GatewayBooleanFieldOperator:
      nullable: false

    GatewayBooleanOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - and
          - or
        values: 
          type: array
          items:
            type: object
            description: "A GatewayFilteringOperator object (recursive)"
            minItems: 2

    GatewayCreate:
      type: object
      required:
      - type
      - id
      properties:
        type:
          $ref: "#/components/schemas/GatewayPSPType"
        id:
          type: string
          description: |
            Unique identifier for this gateway.

            Used to refer to gateway in rules.
        default_currency:
          type: string
          description: |
            ISO 4217 currency code. Defaults to USD
          default: USD
        default_gateway:
          type: boolean
          description: |
            Is this gateway the default gateway or not.

            A default gateway is needed and will be used when a transfer without matching any routing rule created.
            There could be only one default gateway at the same time.
            When a new gateway created as the default gateway, the old default gateway will no longer be the default gateway anymore.
          default: false
        config:
          type: object
          description: |
            Any specific keys passed through to the gateway configuration. Refer to docs

    GatewayData:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/Gateway'

    GatewayError:
      nullable: false

    GatewayFilter:
      type: array
      items:
        description: List of gateway filtering operators.
        $ref: '#/components/schemas/GatewayFilteringOperator'
        minItems: 1

    GatewayFilteringOperator:
      $ref: '#/components/schemas/GatewayJSONOperator'

    GatewayJSONOperator:
      nullable: false

    GatewayListData:
      type: object
      required:
        - data
        - meta
        - links
      additionalProperties: false
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Gateway'
        meta:
          type: object
          properties:
            total_elements:
              type: integer
              description: Total number of gateways.
              example: 42
            total_pages:
              type: integer
              description: Total number of pages.
              example: 4
        links:
          type: object
          required:
            - self
            - first
            - last
          properties:
            self:
              type: string
              description: The current page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/gateways?page=5&limit=10"
            prev:
              type: string
              description: The previous page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/gateways?page=4&limit=10"
            next:
              type: string
              description: The next page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/gateways?page=6&limit=10"
            first:
              type: string
              description: The first page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/gateways?page=0&limit=10"
            last:
              type: string
              description: The last page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/gateways?page=37&size=10"

    GatewayNotOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - not
        value: 
          type: object
          description: "A GatewayFilteringOperator object (recursive)"

    GatewayOptions:
      type: object
      description: |
        Gateway-specific options object, that nevertheless has some standard keys - 'currency', 'billing_address' and 'shipping_address'.

        Beyond the standard keys, optional additional information can be included, like 'order_id', 'invoice', 'email', or any other custom keys specified by the caller.
      additionalProperties:
        maxProperties: 20
      properties:
        currency:
          description: |
            Payment's currency. If empty, default merchant account's currency will be applied.
          type: string
        shipping_address:
          nullable: true
      example:
        currency: USD
        shipping_address:
          name: John Doe
          company: John Doe Company
          address1: 555 Unblock Us St
          address2: M13 9PL
          city: New York
          region: NY
          country: US
          postal_code: '12301'
          phone: '+14842634673'

    GatewayPSPType:
      type: string
      description: |
        The type of PSP to use. 
        Please refer to our documentation https://www.verygoodsecurity.com/docs/payment-optimization/orchestration/gateways/api-configurations 
        for PSP types supported and their corresponding configurations.

    GatewaysApiErrors:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            description: List of errors that occurred while processing the request.
            minItems: 1
        trace_id:
          description: A unique identifier of the failed request.
          type: string
          example: ab28bdaad3d6e136e6eb9ce31cca9855

    GatewaySorting:
      type: array
      items:
        description: List of gateway sorting specs.
        $ref: '#/components/schemas/GatewaySortingSpec'
        minItems: 1

    GatewaySortingSpec:
      nullable: false

    GatewayStringOperator:
      nullable: false

    GatewayTypeMemberOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - 'in'
          - 'not_in'
        values: 
          type: array
          items:
            $ref: '#/components/schemas/GatewayPSPType'

    GatewayTypeOperator:
      nullable: false

    GatewayTypeValueOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
        value: 
          $ref: '#/components/schemas/GatewayPSPType'

    GatewayUpdate:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: "#/components/schemas/GatewayPSPType"
        default_currency:
          type: string
          description: |
            ISO 4217 currency code. Defaults to USD
          default: USD
        default_gateway:
          type: boolean
          description: |
            Is this gateway the default gateway or not.

            A default gateway is needed and will be used when a transfer without matching any routing rule created.
            There could be only one default gateway at the same time.
            When a gateway set as the default gateway, the old default gateway will no longer be the default gateway anymore.
          default: false
        config:
          type: object
          description: |
            Any specific keys passed through to the gateway configuration. Refer to docs

    GeneralError:
      additionalProperties: false
      nullable: false

    IntegerOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
          - '>'
          - '>='
          - '<'
          - '<='
        value: 
          type: integer
 
    JSONValueOperator:
      type: object
      required:
        - op
        - path
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
          - 'like'
          - 'ilike'
          - '>'
          - '>='
          - '<'
          - '<='
          - 'is'
          - 'is_not'
        path:
          type: array
          items:
            type: string 
        value:
          type: string

    BooleanOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
        value: 
          type: boolean

    Order:
      additionalProperties: false
      nullable: false

    OrderApiErrors:
      type: object
      required:
        - errors
      additionalProperties: false
      properties:
        errors:
          type: array
          items:
            description: List of errors that occurred while processing the request.
            minItems: 1
        trace_id:
          description: A unique identifier of the failed request.
          type: string
          example: ab28bdaad3d6e136e6eb9ce31cca9855

    OrderCreate:
      type: object
      required:
        - amount
        - currency
        - financial_instrument_types
      properties:
        amount:
          type: number
          description: 'The final amount which will be used for transfer'
          example: 9999
        currency:
          type: string
          description: 'ISO 4217 currency code. Defaults to USD'
          default: USD
          example: USD
        percent_off:
          type: number
          description: 'Discount for an amount of order in %'
          minimum: 0
          maximum: 100
          example: 20
        financial_instrument_types:
          type: array
          description: |
            Possible ways, which end-user can use to make a payment
          items: 
            type: string
            example: ['card', 'apple-pay', 'google-pay', 'paypal']
        items:
          type: array
          items:
            type: object
            required:
              - name
              - price
              - quantity
            properties:
              name: 
                type: string
                description: 'Product title'
                example: 'Social Engineering: The Science of Human Hacking'
              image:
                type: string
                nullable: true
                description: 'Product picture'
                example: 'https://<domain.com>/image.jpg'
              price: 
                type: number
                description: 'Price in cents'
                minimum: 0
                example: 200
              quantity:
                type: integer
                description: 'Count of product items'
                minimum: 1
                example: 3
              percent_off:
                type: number
                description: 'Discount for an order item in %'
                minimum: 0
                maximum: 100
                example: 20
        success_url:
          type: string
          description: 'Redirect URL if payment completed successfully'
          example: 'https://<domain.com>/success.html'
        cancel_url:
          type: string
          description: 'Redirect URL if a user cancels the payment'
          example: 'https://<domain.com>/cancel.html'
        error_url:
          type: string
          description: 'Redirect URL if payment failed for any reasons'
          example: 'https://<domain.com>/error.html'

    OrderData:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/Order'
    
    OrderError:
      nullable: false

    PaymentCard:
      type: object
      description: Payment card.
      required:
      - card
      properties:
        card:
          $ref: '#/components/schemas/PaymentCardDetails'

    PaymentCardCreate:
      type: object
      description: Payment card.
      required:
      - card
      properties:
        card:
          $ref: '#/components/schemas/PaymentCardDetailsCreate'

    PaymentCardDetails:
      nullable: false

    PaymentCardDetailsCreate:
      type: object
      description: Payment card object details.
      required:
       - name
       - number
       - exp_month
       - exp_year
       - cvc
      properties:
        name:
          description: Card owner's full name.
          type: string
          example: John Doe
        number:
          description: Customer's card number.
          type: string
          example: 4111111111111111
        exp_month:
          description: Card's expiration month.
          type: integer
          example: 10
        exp_year:
          description: Card's expiration year.
          type: integer
          example: 2030
        cvc:
          description: |
            Card's verification value. This value is needed for a singular transfer or authorization, and expires after an hour due to PCI requirements.
          type: string
          example: "123"
        billing_address:
          nullable: true

    PaymentCardObject:
      type: object
      description: Payment card object.
      required:
      - id
      - created_at
      - updated_at
      - card
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/StoredFinancialInstrument'
        created_at:
          type: string
          format: date-time
          description: Creation time, in UTC.
          example: "2021-05-15T12:30:45Z"
        updated_at:
          type: string
          format: date-time
          description: Last time payment card was updated, in UTC.
          example: "2021-05-15T12:30:45Z"
        card:
          $ref: '#/components/schemas/PaymentCardDetails'

    PhysicalAddress:
      type: object
      description: Customer's billing or shipping address.
      properties:
        name:
          type: string
          nullable: true
          example: John Doe
        company:
          type: string
          nullable: true
          example: John Doe Company
        address1:
          type: string
          nullable: true
          example: 555 Unblock Us St
        address2:
          type: string
          nullable: true
          example: M13 9PL
        city:
          type: string
          nullable: true
          example: New York
        region:
          type: string
          nullable: true
          example: NY
          description: |
            Principal subdivision in ISO 3166-2
        country:
          type: string
          nullable: true
          example: US
          description: |
            Country code in ISO 3166-1 alpha-2
        postal_code:
          type: string
          nullable: true
          example: '12301'
        phone:
          type: string
          nullable: true
          example: '+14842634673'
          description: |
            Telephone number in E.164

    PSPToken:
      type: object
      description: PSP Token object.
      required:
      - psp_token
      properties:
        psp_token:
          $ref: '#/components/schemas/PSPTokenDetails'

    PSPTokenDetails:
      type: object
      description: PSP Token details.
      required:
        - value
        - psp
      properties:
        value:
          type: string
          example: card_asdf1234
        psp:
          type: string
          description: |
            PSP that PSP token belongs to.

    PSPTokenObject:
      type: object
      description: PSP Token response object.
      required:
      - id
      - created_at
      - updated_at
      - psp_token
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/StoredFinancialInstrument'
        created_at:
          type: string
          format: date-time
          description: Creation time, in UTC.
          example: "2021-05-15T12:30:45Z"
        updated_at:
          type: string
          format: date-time
          description: Last time psp token was updated, in UTC.
          example: "2021-05-15T12:30:45Z"
        psp_token:
          $ref: '#/components/schemas/PSPTokenDetails'

    Reversal:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        gateway_options:
          $ref: '#/components/schemas/GatewayOptions'

    Rule:
      type: object
      description: |
        A transfer routing rule.

        If none are present then we choose the first gateway.
      required:
      - id
      - criteria
      - action
      - description
      - ordinal
      - created_at
      - updated_at
      additionalProperties: false
      properties:
        id:
          type: string
          description: Unique reference identifier for this rule
          example: RUgV3GsQHWikMAe5SahY1oPe
        description:
          type: string
          example: Route high value EUR to Stripe
          nullable: true
        criteria:
          type: string
          example: transfer.currency == 'EUR' && transfer.amount > 10000
        action:
          type: string
          enum:
          - block
          - retry
          - route
        route_to_gateway:
          type: string
          nullable: true
          description: ID of gateway to route transfer to
          example: stripe
        ordinal:
          type: integer
          description: Order of execution of rule
        created_at:
          type: string
          format: date-time
          description: Creation time, in UTC.
          example: "2021-05-15T12:30:45Z"
        updated_at:
          type: string
          format: date-time
          description: Last time rule was updated, in UTC.
          example: "2021-05-15T12:30:45Z"

    RuleActionMemberOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - 'in'
          - 'not_in'
        values: 
          type: array
          items:
            type: string
            enum:
            - block
            - retry
            - route

    RuleActionOperator:
      nullable: false

    RuleActionValueOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
        value: 
          type: string
          enum:
          - block
          - retry
          - route

    RuleBooleanOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - and
          - or
        values: 
          type: array
          items:
            type: object
            description: "A RuleFilteringOperator object (recursive)"
            minItems: 2

    RuleCreate:
      type: object
      required:
      - criteria
      - action
      - ordinal
      properties:
        description:
          type: string
          example: Route high value EUR to Stripe
          nullable: true
        criteria:
          type: string
          example: transfer.currency == 'EUR' && transfer.amount > 10000
          description: |
            https://github.com/google/cel-spec

            Common Expression Language compatible rule

            Rules can fire by using transfer attributes ( including financial instrument attributes) and environment attributes as criteria.

            Transfer attributes
            - `transfer.amount` The amount of transfer
            - `transfer.currency` ISO 4217 currency code of the transfer
            - `transfer.type` Type of transfer, could be one of `credit`, `debit`, `reversal` or `verification`
            - `transfer.source` The ID of source financial instruments
            - `transfer.destination.bin` # Not implemented
            - `transfer.destination.card_type` # Not implemented
            
            Card attributes
            - `card.brand` The brand of credit card, could be one of `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, `DinersClub`, `UnionPay` or `Unknown`

            Environment attributes
            - `env.utc_hour` Current UTC time hour value, could be used for time-based routing rule
            - `env.utc_minute` Current UTC time minute value, could be used for time-based routing rule
            - `env.ip_address_requests_last_hour` # Not implemented
            - `env.source_requests_last_hour` # Not implemented
            - `env.username` The username value provided in auth token
            - `env.user_id` The user id value provided in auth token
            - `env.client_id` The client id value provided in auth token

            Sub-merchant routing can be established via `username` or `user_id`.

        action:
          type: string
          enum:
          - block
          - retry
          - route
        route_to_gateway:
          type: string
          nullable: true
          description: ID of gateway to route transfer to when action is set to `route` or `retry`
          example: stripe
        ordinal:
          type: integer
          description: Order of execution of rule

    RuleData:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/Rule'

    RuleDateOperator:
      nullable: false

    RuleError:
      additionalProperties: false
      nullable: false

    RuleFilter:
      type: array
      items:
        description: List of rule filtering operators.
        $ref: '#/components/schemas/RuleFilteringOperator'
        minItems: 1

    RuleFilteringOperator:
      nullable: false

    RuleIdMemberOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - 'in'
          - 'not_in'
        values: 
          type: array
          items:
            type: string
            description: "ID of a rule"
            example: "RUgV3GsQHWikMAe5SahY1oPe"

    RuleIdOperator:
      nullable: false

    RuleIdValueOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
        value: 
          type: string
          description: "ID of a rule"
          example: "RUgV3GsQHWikMAe5SahY1oPe"

    RuleIntegerOperator:
      nullable: false

    RuleListData:
      type: object
      required:
        - data
        - meta
        - links
      additionalProperties: false
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        meta:
          type: object
          properties:
            total_elements:
              type: integer
              description: Total number of rules.
              example: 42
            total_pages:
              type: integer
              description: Total number of pages.
              example: 4
        links:
          type: object
          required:
            - self
            - first
            - last
          properties:
            self:
              type: string
              description: The current page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/rules?page=5&limit=10"
            prev:
              type: string
              description: The previous page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/rules?page=4&limit=10"
            next:
              type: string
              description: The next page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/rules?page=6&limit=10"
            first:
              type: string
              description: The first page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/rules?page=0&limit=10"
            last:
              type: string
              description: The last page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/rules?page=37&size=10"

    RuleNotOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - not
        value: 
          type: object
          description: "A RuleFilteringOperator object (recursive)"

    RulesApiErrors:
      type: object
      required:
        - errors
      additionalProperties: false
      properties:
        errors:
          type: array
          items:
            description: List of errors that occurred while processing the request.
            minItems: 1
        trace_id:
          description: A unique identifier of the failed request.
          type: string
          example: ab28bdaad3d6e136e6eb9ce31cca9855

    RuleSorting:
      type: array
      items:
        description: List of rule sorting specs.
        $ref: '#/components/schemas/RuleSortingSpec'
        minItems: 1

    RuleSortingSpec:
      nullable: false

    RuleStringOperator:
      nullable: false

    RuleUpdate:
      type: object
      additionalProperties: false
      properties:
        description:
          type: string
          example: Route high value EUR to Stripe
          nullable: true
        criteria:
          type: string
          example: transfer.currency == 'EUR' && transfer.amount > 10000
          description: |
            https://github.com/google/cel-spec

            Common Expression Language compatible rule

            Rules can fire by using transfer attributes ( including financial instrument attributes) and environment attributes as criteria.

            Transfer attributes
            - `transfer.amount` The amount of transfer
            - `transfer.currency` ISO 4217 currency code of the transfer
            - `transfer.type` Type of transfer, could be one of `credit`, `debit`, `reversal` or `verification`
            - `transfer.source` The ID of source financial instruments
            - `transfer.destination.bin` # Not implemented
            - `transfer.destination.card_type` # Not implemented
            
            Card attributes
            - `card.brand` The brand of credit card, could be one of `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, `DinersClub`, `UnionPay` or `Unknown`

            Environment attributes
            - `env.utc_hour` Current UTC time hour value, could be used for time-based routing rule
            - `env.utc_minute` Current UTC time minute value, could be used for time-based routing rule
            - `env.ip_address_requests_last_hour` # Not implemented
            - `env.source_requests_last_hour` # Not implemented
            - `env.username` The username value provided in auth token
            - `env.user_id` The user id value provided in auth token
            - `env.client_id` The client id value provided in auth token

            Sub-merchant routing can be established via `username` or `user_id`.

        action:
          type: string
          enum:
          - block
          - retry
          - route
        route_to_gateway:
          type: string
          nullable: true
          description: ID of gateway to route transfer to when action is set to `route` or `retry`
          example: stripe
        ordinal:
          type: integer
          description: Order of execution of rule

    StoredFinancialInstrument:
      type: string
      description: ID of a Financial Instrument that's been previously stored.
      example: FN6imeVBVSrfyS62QiE2kFCv
      nullable: true

    StringMemberOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - 'in'
          - 'not_in'
        values: 
          type: array
          items:
            type: string

    StringValueOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
          - 'like'
          - 'ilike'
        value: 
          type: string

    ThreeDSAuthentication:
      description: |
        A ThreeDSAuthentication represents the record for a 3DS authentication session
      type: object
      additionalProperties: false
      required:
        - id
        - created_at
        - updated_at
        - amount
        - currency
        - card
        - state
      properties:
        id:
          type: string
          description: Unique reference identifier for this 3DS authentication
          example: TAjU9kwRgiVpVRbU2Yok12aV
        created_at:
          type: string
          format: date-time
          description: Creation time, in UTC.
          example: "2021-05-15T12:30:45Z"
        updated_at:
          type: string
          format: date-time
          description: Last time authentication was updated, in UTC.
          example: "2021-05-15T12:30:45Z"
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          type: string
          description: |
            ISO 4217 currency code for this 3DS authentication.
          example: USD
        device_fingerprint:
          type: object
          additionalProperties: false
          nullable: true
          required:
            - url
            - params
          properties:
            url:
              type: string
              description: |
                The iframe URL for device fingerprint
              example: https://acs-server.3dsintegrator.com/v2/fingerprint
            params:
              type: object
              description: |
                The form parameter payload for sending as a POST request to the given URL in an iframe
              example:
                threeDSMethodData: "3DS method data"
            wait_for_message:
              type: boolean
              description: |
                Should the VGS checkout.js waits for postMessage from iframe after the page is loaded or not
              example: false
        challenge:
          type: object
          additionalProperties: false
          nullable: true
          required:
            - url
            - params
            - wait_for_message
          properties:
            url:
              type: string
              description: |
                The iframe URL for challenge
              example: https://acs-server-sandbox.3dsintegrator.com/v2/challenge/ui
            params:
              type: object
              description: |
                The form parameter payload for sending as a POST request to the given URL in an iframe
              example:
                creq: "eyJtZXNzYWdlVHlwZSI6IkNSZXEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMS4wIiwidGhyZWVEU1NlcnZlclRyYW5zSUQiOiIyNzljZjUwYy1lZjM2LTQzMTMtYjA0ZC05NGNlZGZhZWRmZDQiLCJhY3NUcmFuc0lEIjoiZDZmMTVhYWUtMmM5ZC00MzMzLWE5MjAtOTU0YmUwN2MwYzc2IiwiY2hhbGxlbmdlV2luZG93U2l6ZSI6IjA0In0="
            wait_for_message:
              type: boolean
              description: |
                Should the VGS checkout.js waits for postMessage from iframe after the page is loaded or not
              example: false
        card:
          description: |
            The card financial instrument to be 3DS authenticated
          type: string
          example: FN6imeVBVSrfyS62QiE2kFCv
        state:
          description: |
            `device_fingerprint` means the 3DS authentication is created and needs device fingerprint.

            `challenge` means the 3DS provider requires the user to be challenged for approving this transaction.

            `successful` means the 3DS authentication is successful, and is ready to be passed to transfer for making a purchase.

            `failed` occurs when the authentication failed.
          type: string
          enum:
            - device_fingerprint
            - challenge
            - successful
            - failed
          example: successful

    ThreeDSAuthenticationCreate:
      type: object
      additionalProperties: false
      required:
      - card 
      - amount
      - currency
      - origin
      - browser_info
      properties:
        card:
          type: string
          description: The ID financial instrument for the credit card to be authenticated
          example: FN6imeVBVSrfyS62QiE2kFCv
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          type: string
          description: |
            ISO 4217 currency code for this authentication.
          example: USD
        origin:
          type: string
          description: |
            The URL of the web page which initiated the 3DS authentication and limited to receive messages from the notifications endpoint via Javascript postMessage calls
          example: https://my-shopping-cart.com/checkout
        browser_info:
          $ref: '#/components/schemas/BrowserInfo'

    ThreeDSAuthenticationData:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/ThreeDSAuthentication'

    ThreeDSProviderApiErrors:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            description: List of errors that occurred while processing the request.
            minItems: 1
        trace_id:
          description: A unique identifier of the failed request.
          type: string
          example: ab28bdaad3d6e136e6eb9ce31cca9855

    ThreeDSProviderCreate:
      type: object
      required:
      - type
      - config
      properties:
        type: {}
#          $ref: "#/components/schemas/ThreeDSProviderType"
        config:
          type: object
          description: |
            Any specific keys passed through to the provider configuration. Refer to docs

    ThreeDSProviderError:
      nullable: false

    ThreeDSProviderType:
      type: string
      description: |
        The type of 3DS provider.

        Please notice that not all 3DS provider listed in the enum are supported at this moment.
        Contact VGS customer support to find out the list of supported 3DS providers.
      enum:
      - adyen
      - paay
      - 3dsecure

    ThreeDSProvider:
      description: |
        A 3DS service provider with its credentials and configurations
      type: object
      additionalProperties: false
      required:
        - id
        - type
        - config
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Unique reference identifier for this 3DS provider
          example: TPjU9kwRgiVpVRbU2Yok12aV
        type:
          description: |
            The type of 3DS provider.

            Please notice that not all 3DS provider listed in the enum are supported at this moment.
            Contact VGS customer support to find out the list of supported 3DS providers.
          enum:
          - adyen
          - paay
          - 3dsecure
        config:
          type: object
          description: |
            Any specific keys passed through to the 3DS provider configuration. Refer to docs
        created_at:
          type: string
          format: date-time
          description: Creation time, in UTC.
          example: "2021-05-15T12:30:45Z"
        updated_at:
          type: string
          format: date-time
          description: Last time 3DS provider was updated, in UTC.
          example: "2021-05-15T12:30:45Z"

    ThreeDSProviderData:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/ThreeDSProvider'

    Transfer:
      description: |
        A Transfer represents any flow of funds either to or from a Financial Instrument.

        A Transfer can be
        - a debit from a payment card
        - a credit to a bank account
        - a reversal of another transfer.

        Each type is represented by the `type` field
      type: object
      additionalProperties: false
      required:
        - id
        - created_at
        - updated_at
        - amount
        - gateway
        - gateway_response
        - source
        - state
        - type
      properties:
        id:
          type: string
          description: Unique reference identifier for this transfer
          example: TRSuLCY8mXzc1gH7crxZzcbDG
        created_at:
          type: string
          format: date-time
          description: Creation time, in UTC.
          example: "2021-05-15T12:30:45Z"
        updated_at:
          type: string
          format: date-time
          description: Last time transfer was updated, in UTC.
          example: "2021-05-15T12:30:45Z"
        type:
          type: string
          enum:
          - credit
          - debit
          - reversal
          description: |
            - `debit` is created after capturing an Authorization.
            - `reversal` represents a refund or chargeback where funds are reversed from a previous transfer.
            - `credit` is when funds are transferred to the Financial Instrument represented by the `destination` field.
        amount:
          $ref: '#/components/schemas/Amount'
        fee:
          type: integer
          description: The total amount that will be debited in cents (e.g. 100 cents to debit $1.00)

            This amount cannot be greater than the `amount`.
        currency:
          type: string
          description: |
            ISO 4217 currency code for this transaction. If not supplied based on default of gateway.
          example: USD
          nullable: true
        amount_reversed:
          description: Total amount of funds reversed in cents (e.g. 100 cents means $1.00)
          type: integer
          example: 0
        amount_captured:
          description: Total amount of funds captured in cents (e.g. 100 cents means $1.00)
          type: integer
          example: 0
        gateway:
          $ref: '#/components/schemas/Gateway'
        gateway_response:
          $ref: '#/components/schemas/TransferGatewayResponse'
        source:
          description: |
            Where funds are drawn from.

            Not populated for reversals
          type: string
          example: FN6imeVBVSrfyS62QiE2kFCv
          nullable: true
        destination:
          description: |
            Destination for funds.

            Populated for reversals
          type: string
          nullable: true
          example: FN6imeVBVSrfyS62QiE2kFCv
        reversed_transfer:
          description: |
            If the transfer type is `reversal`, this will be the transfer id it's reversing
          type: string
          example: TRSuLCY8mXzc1gH7crxZzcbDG
          nullable: true
        state:
          description: |
            'pending' means transfer needs to be finalized by performing a 'capture' action on it.

            'canceled' means the 'authorized' request was nullified, and the funds were released from hold.

            'successful' means transfer is in it's final state, and the funds were transferred from customer's account to the destination.

            'failed' occurs when the authorization failed to be created.
          type: string
          enum:
            - pending
            - successful
            - canceled
            - failed
          example: successful
        captures:
          type: array
          items:
            $ref: '#/components/schemas/TransferCapture'
        avs_result:
          $ref: '#/components/schemas/AVSResult'

    TransferBooleanOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - and
          - or
        values: 
          type: array
          items:
            type: object
            description: "A TransferFilteringOperator object (recursive)"
            minItems: 2

    TransferCreateBase:
      type: object
      properties:
        action:
          description: |
            - `authorize` - holds the transfer amount with the customer's bank to be captured or canceled at a later time.
            - `capture` - transfers funds from the customer account immediately.
            - `payout` - transfers funds to the customer account immediately.
          type: string
          default: capture
          enum:
            - authorize
            - capture
            - payout
          example: authorize
        source:
          $ref: '#/components/schemas/StoredFinancialInstrument'
        destination:
          $ref: '#/components/schemas/StoredFinancialInstrument'
        currency:
          type: string
          description: |
            ISO 4217 currency code for this transaction. If not supplied based on default of gateway.
          example: USD
        gateway_options:
          $ref: '#/components/schemas/GatewayOptions'
        three_ds_authentication:
          type: string
          nullable: true
          description: |
            ID of a successful 3DS authentication to be passed to PSP, provides if the PSP accepts external 3DS data
          example: TAjU9kwRgiVpVRbU2Yok12aV

    TransferCapture:
      description: |
        A Transfer capture represents an attempt to capture previously held fund
      type: object
      required:
        - amount
        - gateway_response
        - created_at
      additionalProperties: false
      properties:
        amount:
          nullable: true
        gateway_response:
          $ref: '#/components/schemas/TransferGatewayResponse'
        created_at:
          type: string
          format: date-time
          description: Creation time, in UTC.
          example: "2021-05-15T12:30:45Z"

    TransferCreate:
      nullable: false

    TransferCreateFromOrderID:
      nullable: false

    TransferData:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/Transfer'

    TransferDateOperator:
      nullable: false

    TransferError:
      additionalProperties: false
      nullable: false

    TransferFilter:
      type: array
      items:
        description: List of transfer filtering operators.
        $ref: '#/components/schemas/TransferFilteringOperator'
        minItems: 1

    TransferFilteringOperator:
      nullable: false

    TransferFinancialInstrumentIdOperator:
      nullable: false

    TransferGatewayResponse:
      description: |
        Gateway-specific response data, taken directly from the PSP's reply.
      type: object
      required:
        - id
        - message
        - state
        - raw_response
      additionalProperties: false
      properties:
        id:
          type: string
          description: |
            Unique reference identifier for this record in PSP's system.
          example: '039-0084505050|sale'
        message:
          type: string
          description: Response message from the PSP's API.
          example: "The transfer was successful"
        state:
          type: string
          description: |
            Codified value allowing programmatic interpretation of PSP response.

            - `error` - Occurs when gateway returns a 5xx.
            - `timeout` - Network error connecting to gateway.
          enum:
          - successful
          - failed
          - error
          - timeout
        error_code:
          type: string
          description: |
            Error type from the PSP's API in case something went wrong.
          example: "Invalid account number"
        raw_response:
          type: string
          description: Full response object from the Gateway's API.
          example: '{"transid"=>"039-0084505050", "status"=>"approved"}'

    TransferIdMemberOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - 'in'
          - 'not_in'
        values: 
          type: array
          items:
            type: string
            description: "ID of a transfer"
            example: "TRSuLCY8mXzc1gH7crxZzcbDG"

    TransferIdOperator:
      nullable: false

    TransferIdValueOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
        value: 
          type: string
          description: "ID of a transfer"
          example: "TRSuLCY8mXzc1gH7crxZzcbDG"

    TransferIntegerOperator:
      nullable: false

    TransferJSONOperator:
      nullable: false

    TransferListData:
      type: object
      required:
        - data
        - meta
        - links
      additionalProperties: false
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
        meta:
          type: object
          properties:
            total_elements:
              type: integer
              description: Total number of transfers.
              example: 42
            total_pages:
              type: integer
              description: Total number of pages.
              example: 4
        links:
          type: object
          required:
            - self
            - first
            - last
          properties:
            self:
              type: string
              description: The current page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/transfers?page=5&limit=10"
            prev:
              type: string
              description: The previous page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/transfers?page=4&limit=10"
            next:
              type: string
              description: The next page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/transfers?page=6&limit=10"
            first:
              type: string
              description: The first page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/transfers?page=0&limit=10"
            last:
              type: string
              description: The last page of data.
              example: "https://<ORGANIZATION_NAME>.live.payments.verygoodsecurity.app/transfers?page=37&size=10"

    TransferNotOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - not
        value: 
          type: object
          description: "A TransferFilteringOperator object (recursive)"

    TransfersApiErrors:
      type: object
      required:
        - errors
      additionalProperties: false
      properties:
        errors:
          type: array
          items:
            description: List of errors that occurred while processing the request.
            minItems: 1
        trace_id:
          description: A unique identifier of the failed request.
          type: string
          example: ab28bdaad3d6e136e6eb9ce31cca9855

    TransferSorting:
      type: array
      items:
        description: List of transfer sorting specs.
        $ref: '#/components/schemas/TransferSortingSpec'
        minItems: 1

    TransferSortingSpec:
      nullable: false

    TransferStateMemberOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - 'in'
          - 'not_in'
        values: 
          type: array
          items:
            type: string
            enum:
            - pending
            - canceled
            - successful
            - failed

    TransferStateOperator:
      nullable: false

    TransferStateValueOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
        value: 
          type: string
          enum:
          - pending
          - canceled
          - successful
          - failed

    TransferStringOperator:
      nullable: false

    TransferTypeMemberOperator:
      type: object
      required:
        - op
        - values
      properties:
        op:
          type: string
          enum:
          - 'in'
          - 'not_in'
        values: 
          type: array
          items:
            type: string
            enum:
            - debit
            - reversal
            - credit
            - verification

    TransferTypeOperator:
      nullable: false

    TransferTypeValueOperator:
      type: object
      required:
        - op
        - value
      properties:
        op:
          type: string
          enum:
          - '=='
          - '!='
        value: 
          type: string
          enum:
          - debit
          - reversal
          - credit
          - verification

    TransferUpdate:
      type: object
      required:
        - action
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        action:
          description: |
            - `capture` - means move transfer to it's final state, and transfer the funds from customer's bank account to the merchant.
            - `cancel` - means nullify the transfer, releasing funds previously reserved with customer's bank.
          type: string
          enum:
            - capture
            - cancel
          example: capture
        gateway_options:
          $ref: '#/components/schemas/GatewayOptions'

    Verification:
      nullable: false

    VerificationData:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/VerificationTransfer'

    VerificationTransfer:
      description: |
        A Verification transfer represents an artificial transfer used to validate financial instruments.
        Typically a zero dollar auth is used for this purpose.

      type: object
      additionalProperties: false
      required:
        - id
        - created_at
        - updated_at
        - amount
        - gateway
        - gateway_response
        - source
        - state
        - type
      properties:
        id:
          type: string
          description: Unique reference identifier for this verification
          example: TRSuLCY8mXzc1gH7crxZzcbDG
        created_at:
          type: string
          format: date-time
          description: Creation time, in UTC.
          example: "2021-05-15T12:30:45Z"
        updated_at:
          type: string
          format: date-time
          description: Last time transfer was updated, in UTC.
          example: "2021-05-15T12:30:45Z"
        type:
          type: string
          enum:
            - verification
        amount:
          type: integer
          description: |
            Amount used to verify a financial instrument
          example: 0
          minimum: 0
          maximum: 99999999
        fee:
          type: integer
          description: The total amount that will be debited in cents (e.g. 100 cents to debit $1.00)

            This amount cannot be greater than the `amount`.
        currency:
          type: string
          description: |
            ISO 4217 currency code for this transaction. If not supplied based on default of gateway.
          example: USD
          nullable: true
        gateway:
          $ref: '#/components/schemas/Gateway'
        gateway_response:
          $ref: '#/components/schemas/TransferGatewayResponse'
        source:
          description: |
            Where funds are drawn from.

          type: string
          example: FN6imeVBVSrfyS62QiE2kFCv
          nullable: true
        destination:
          description: |
            Destination for funds.

            Populated for reversals
          type: string
          nullable: true
          example: FN6imeVBVSrfyS62QiE2kFCv
        state:
          description: |
            'successful' means that financial instrument was successfully verified

            'failed' occurs when the verification fails
          type: string
          enum:
            - successful
            - failed
          example: successful
        avs_result:
          $ref: '#/components/schemas/AVSResult'


    SortingSpec:
      type: object
      properties:
        direction:
          type: string
          enum:
          - 'asc'
          - 'desc'
          default: 'asc'

  requestBodies:
    FinancialInstrumentCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentCardCreate'
          examples:
            A:
              summary: Store a payment card (minimal)
              value:
                card:
                  name: John Doe
                  number: 41111111111111
                  exp_month: 10
                  exp_year: 2030
                  cvc: "123"
            B:
              summary: Store a payment card (full)
              value:
                card:
                  name: John Doe
                  number: 41111111111111
                  exp_month: 10
                  exp_year: 2030
                  cvc: "123"
                  billing_address:
                    name: John Doe
                    company: John Doe Company
                    address1: 555 Unblock Us St
                    address2: M13 9PL
                    city: New York
                    region: NY
                    country: US
                    postal_code: 12301
                    phone: '+14842634673'
            C:
              summary: Store a PSP token
              value:
                psp_token:
                  id: card_asdf1234
                  psp: stripe

    GatewayCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GatewayCreate'
          examples:
            A:
              summary: Stripe
              value:
                id: stripe-test
                type: stripe
                config:
                  login: sk_test_foobarbaz
            B:
              summary: Adyen
              value:
                id: adyen-merchant-bar
                type: adyen
                config:
                  username: username
                  password: foo
                  merchant_account: BARBAR
            C:
              summary: Braintree as the default gateway
              value:
                id: braintree-test
                type: braintree
                default_gateway: true
                config:
                  merchant_id: merchant_id
                  public_key: public_key
                  private_key: public_key

    GatewayUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GatewayUpdate'
          examples:
            A:
              summary: Update gateway type and config
              value:
                type: stripe
                config:
                  login: sk_test_foobarbaz

    RuleCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RuleCreate'
          examples:
            A:
              summary: Route to a specific gateway
              value:
                action: route
                description: Route EUR transfers to Adyen
                criteria: transfer.currency == 'EUR'
                route_to_gateway: adyen
                ordinal: 0
            B:
              summary: Fallback to another gateway
              value:
                action: retry
                description: Route EUR transfers to Adyen
                criteria: transfer.state == 'failed' && transfer.gateway_response.state == 'timeout'
                route_to_gateway: adyen
                ordinal: 1
            C:
              summary: Block a transfer
              value:
                action: block
                description: Block high EUR transfers
                criteria: transfer.currency == 'EUR' && transfer.amount >= 50000
                ordinal: 2
            D:
              summary: Route a specific user to a specific gateway
              value:
                action: route
                description: Route jess to their merchant account on worldpay
                criteria: env.username == 'jess'
                route_to_gateway: worldpay-jess
                ordinal: 3
            E:
              summary: Route a certain type of card to Stripe
              value:
                action: route
                description: Route American Express to Stripe
                criteria: card.brand == 'AmericanExpress'
                route_to_gateway: stripe
                ordinal: 4

    RuleUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RuleUpdate'
          examples:
            A:
              summary: Update criteria
              value:
                criteria: transfer.currency == 'EUR'
            B:
              summary: Update gateway
              value:
                route_to_gateway: adyen
            C:
              summary: Update description
              value:
                description: Block high EUR transfers
            D:
              summary: Update oridnal
              value:
                ordinal: 3
            E:
              summary: Update many fields
              value:
                description: Block high EUR transfers
                criteria: transfer.currency == 'EUR'
                ordinal: 3

    ReversalRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reversal'
          examples:
            A:
              summary: Reverse a specific amount
              value:
                amount: 100
            B:
              summary: Reverse the full amount of the original transfer
              value: {}

    OrderCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderCreate'

    TransferCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransferCreate'
          examples:
            A:
              summary: Charge a stored card or PSP token
              value:
                amount: 100
                source: FN6imeVBVSrfyS62QiE2kFCv
            B:
              summary: Charge a stored card or PSP token with values from order
              value:
                order_id: ORDSuLCY8mXzc1gH7crxZzcbDG
                source: FN6imeVBVSrfyS62QiE2kFCv
            C:
              summary: Authorize without capture
              value:
                amount: 100
                action: authorize
                source: FN6imeVBVSrfyS62QiE2kFCv
            D:
              summary: Charge a stored card with CVC override value
              value:
                amount: 100
                source: FN6imeVBVSrfyS62QiE2kFCv
                source_override:
                  card:
                    cvc: "123"
            E:
              summary: Credit money to a card
              value:
                amount: 100
                action: credit
                destination: FN6imeVBVSrfyS62QiE2kFCv
            F:
              summary: Charge with 3DS authentication data
              value:
                amount: 100
                source: FN6imeVBVSrfyS62QiE2kFCv
                three_ds_authentication: TAjU9kwRgiVpVRbU2Yok12aV

    TransferUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransferUpdate'
          examples:
            A:
              summary: Capture a transfer
              value:
                amount: 100
                action: capture
            B:
              summary: Cancel a pending transfer
              value:
                action: cancel

    VerificationRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Verification'

    ThreeDSAuthenticationArbitraryJSONRequest:
      content:
        application/json:
          schema:
            type: object
            description: Arbitrary JSON payload passed from the 3DS provider via post message notification page to VGS checkout.js

    ThreeDSAuthenticationRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThreeDSAuthenticationCreate'

    ThreeDSProviderRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThreeDSProviderCreate'
          examples:
            A:
              summary: Adyen
              value:
                type: adyen
                config:
                  username: username
                  password: foo
                  merchant_account: BARBAR
            B:
              summary: Paay
              value:
                type: paay
                config:
                  api_key: "2X/NqoasDDpfgOm7KnWNHA=="

  responses:
    ApiErrorsResponse:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    FinancialInstrumentApiErrorsResponse:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FinancialInstrumentApiErrors'

    FinancialInstrumentListDataResponse:
      description: A list of financial instrument records response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FinancialInstrumentListData'

    FinancialInstrumentResponse:
      description: Represents a financial instrument such as a Payment Card or Bank Account that can be used as a source or destination of funds.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FinancialInstrument'
          examples:
            A:
              summary: Payment card (minimal)
              value:
                data:
                  id: "FN6imeVBVSrfyS62QiE2kFCv"
                  created_at: "2021-05-15T12:30:45Z"
                  updated_at: "2021-05-15T12:30:45Z"
                  card:
                    name: John Doe
                    number: 41111111111111
                    exp_month: 10
                    exp_year: 2030
                    cvc: "123"
            B:
              summary: Payment card (full)
              value:
                data:
                  id: "FN6imeVBVSrfyS62QiE2kFCv"
                  created_at: "2021-05-15T12:30:45Z"
                  updated_at: "2021-05-15T12:30:45Z"
                  card:
                    name: John Doe
                    number: 41111111111111
                    exp_month: 10
                    exp_year: 2030
                    cvc: "123"
                    billing_address:
                      name: John Doe
                      company: John Doe Company
                      address1: 555 Unblock Us St
                      address2: M13 9PL
                      city: New York
                      region: NY
                      country: US
                      postal_code: 12301
                      phone: '+14842634673'                  
            C:
              summary: PSP token
              value:
                data:
                  id: "FN6imeVBVSrfyS62QiE2kFCv"
                  created_at: "2021-05-15T12:30:45Z"
                  updated_at: "2021-05-15T12:30:45Z"
                  psp_token:
                    id: card_asdf1234
                    psp: stripe

    GatewayDataResponse:
      description: A single verification record response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GatewayData'

    GatewayListDataResponse:
      description: A list of gateway records response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GatewayListData'

    GatewaysApiErrorsResponse:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GatewaysApiErrors'

    RuleListDataResponse:
      description: A list of rule records response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RuleListData'

    RuleResponse:
      description: A single verification record response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RuleData'

    RulesApiErrorsResponse:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RulesApiErrors'

    TransfersApiErrorsResponse:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransfersApiErrors'

    OrderApiErrorsResponse:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderApiErrors'

    OrderDataResponse:
      description: A single order record response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderData'

    TransferDataResponse:
      description: A single transfer record response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransferData'

    TransferListDataResponse:
      description: A list of transfer records response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransferListData'

    VerificationTransferResponse:
      description: A single verification record response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerificationData'

    ThreeDSAuthenticationDataResponse:
      description: A single 3DS authentication record response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThreeDSAuthenticationData'

    ThreeDSProviderDataResponse:
      description: A single 3DS provider record response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThreeDSProviderData'

    ThreeDSProviderApiErrorsResponse:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThreeDSProviderApiErrors'

  parameters:
    financial_instrument_filter:
      name: filter
      in: query
      description: Conditions for filtering financial instrument results as a JSON payload.
      required: false
      schema:
        $ref: '#/components/schemas/FinancialInstrumentFilter'
      example: |
        [
          {
            "field": "id",
            "op": "!=",
            "value": "FN6imeVBVSrfyS62QiE2kFCv"
          },
          {
            "op": "or",
            "values": [
              {
                "field": "card.exp_year",
                "op": "<",
                "value": "2023"
              },
              {
                "field": "card.name",
                "op": "ilike",
                "values": ["%john%"]
              }
            ]
          }
        ]
    financial_instrument_id:
      name: financial_instrument_id
      description: Id of a financial instrument.
      in: path
      required: true
      schema:
        type: string
        example: FN6imeVBVSrfyS62QiE2kFCv
    financial_instrument_sorting:
      name: sort
      in: query
      description: Specs for sorting financial instrument results as a JSON payload.
      required: false
      schema:
        $ref: '#/components/schemas/FinancialInstrumentSorting'
      example: |
        [
          {
            "field": "card.exp_year",
            "direction": "desc"
          },
          {
            "field": "created_at",
            "direction": "asc"
          }
        ]
    gateway_filter:
      name: filter
      in: query
      description: Conditions for filtering gateway results as a JSON payload.
      required: false
      schema:
        $ref: '#/components/schemas/GatewayFilter'
      example: |
        [
          {
            "field": "id",
            "op": "ilike",
            "value": "stripe-%"
          },
          {
            "op": "or",
            "values": [
              {
                "field": "default_gateway",
                "op": "==",
                "value": true
              },
              {
                "field": "default_currency",
                "op": "in",
                "values": ["EUR"]
              }
            ]
          }
        ]
    gateway_sorting:
      name: sort
      in: query
      description: Specs for sorting gateway results as a JSON payload.
      required: false
      schema:
        $ref: '#/components/schemas/GatewaySorting'
      example: |
        [
          {
            "field": "default_currency",
            "direction": "desc"
          },
          {
            "field": "created_at",
            "direction": "asc"
          }
        ]
    transfer_id:
      name: transfer_id
      description: Id of a transfer record.
      in: path
      required: true
      schema:
        type: string
        example: TRSuLCY8mXzc1gH7crxZzcbDG
    rule_id:
      name: rule_id
      description: Id of a rule.
      in: path
      required: true
      schema:
        type: string
        example: RUSuLCY8mXzc1gH7crxZzcbDG
    gateway_id:
      name: gateway_id
      description: Id of a gateway.
      in: path
      required: true
      schema:
        type: string
        example: adyen
    limit:
      name: limit
      in: query
      description: Amount of items per page.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 50
    page:
      name: page
      in: query
      description: Zero-based page number.
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    rule_filter:
      name: filter
      in: query
      description: Conditions for filtering rule results as a JSON payload.
      required: false
      schema:
        $ref: '#/components/schemas/RuleFilter'
      example: |
        [
          {
            "field": "action",
            "op": "!=",
            "value": "retry"
          },
          {
            "op": "or",
            "values": [
              {
                "field": "ordinal",
                "op": ">=",
                "value": 100
              },
              {
                "field": "criteria",
                "op": "ilike",
                "values": "transfer.%"
              }
            ]
          }
        ]
    rule_sorting:
      name: sort
      in: query
      description: Specs for sorting rule results as a JSON payload.
      required: false
      schema:
        $ref: '#/components/schemas/RuleSorting'
      example: |
        [
          {
            "field": "ordinal",
            "direction": "desc"
          },
          {
            "field": "created_at",
            "direction": "asc"
          }
        ]
    3ds_authentication_id:
      name: 3ds_authentication_id
      description: Id of a 3DS authentication.
      in: path
      required: true
      schema:
        type: string
        example: TAjU9kwRgiVpVRbU2Yok12aV
    transfer_filter:
      name: filter
      in: query
      description: Conditions for filtering transfer results as a JSON payload.
      required: false
      schema:
        $ref: '#/components/schemas/TransferFilter'
      example: |
        [
          {
            "field": "id",
            "op": "!=",
            "value": "TRSuLCY8mXzc1gH7crxZzcbDG"
          },
          {
            "op": "or",
            "values": [
              {
                "field": "amount",
                "op": ">=",
                "value": 1000
              },
              {
                "field": "currency",
                "op": "in",
                "values": ["EUR"]
              }
            ]
          }
        ]
    transfer_sorting:
      name: sort
      in: query
      description: Specs for sorting transfer results as a JSON payload.
      required: false
      schema:
        $ref: '#/components/schemas/TransferSorting'
      example: |
        [
          {
            "field": "amount",
            "direction": "desc"
          },
          {
            "field": "created_at",
            "direction": "asc"
          }
        ]
    order_id:
      name: order_id
      description: Id of an order.
      in: path
      required: true
      schema:
        type: string
        example: ORDa7sd7a9s7d9as87d9a
